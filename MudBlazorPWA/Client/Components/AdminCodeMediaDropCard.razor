@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AdminEditorState State
@implements IDisposable

<div class="media-card">
  @if (WindingCode != null) {
    <MudCard Elevation="4"
        Class="border-t mud-border-lines-default mud-width-full"
        Style="background-color: transparent;"
        Outlined="false">
      <MudCardHeader Class="border-b-2 mud-background-gray mud-border-lines-default pa-2">

        <MudIconButton Icon="@Icons.Material.Filled.Edit"
            Size="Size.Small"
            Class="mr-2 my-auto"
            OnClick="@TogglePopover"/>
        <MudStack Row
            Justify="Justify.FlexStart"
            AlignItems="AlignItems.Center">
          <MudDivider Class="my-n2"
              Vertical="true"
              FlexItem="true"
              DividerType="DividerType.FullWidth"/>
          <div>
            <MudText Typo="Typo.h6">
              <strong>
                @WindingCode.Division: @WindingCode.Name
              </strong>
            </MudText>
            <MudPopover Open="@_isOpen"
                RelativeWidth="false"
                Elevation="3"
                AnchorOrigin="Origin.TopLeft"
                TransformOrigin="Origin.TopLeft">
              <MudCard Square>
                <MudCardHeader Class="border-b d-flex justify-center mud-background-gray mud-border-info pa-1">
                  <MudText Typo="Typo.button">
                    Edit Code
                  </MudText>
                </MudCardHeader>
                <MudCardContent>
                  <MudListExtended T="CardOptions"
                      ItemCollection="@MediaCardOptions"
                      MultiSelection="true"
                      SelectedValues="@EnabledOptions"
                      SelectedValuesChanged="@OnSelectedValuesChanged">
                  </MudListExtended>

                </MudCardContent>
              </MudCard>
            </MudPopover>

          </div>

          <MudButton StartIcon="@Icons.Material.Outlined.Upgrade"
              Size="Size.Small"
              Color="Color.Secondary"
              Variant="Variant.Outlined"
              Disabled="@(WindingCode.Media.Pdf == null && WindingCode.Media.Video == null)">
            View Media
          </MudButton>
          <MudButton StartIcon="@Icons.Material.Filled.ImportExport"
              Size="Size.Small"
              Color="Color.Default"
              Variant="Variant.Outlined"
              OnClick="OpenImportMediaDialog">
            Import Media
          </MudButton>
        </MudStack>
      </MudCardHeader>
      <MudCardContent Class="pa-1"
          Style="height: auto; display: flex; justify-items:center;">
        <MudGrid Spacing="1"
            Justify="Justify.Center">

          @foreach (var entry in AssignedItemDictionary) {
            <MudItem Class="border d-flex justify-center mud-border-lines-default pa-0"
                xs="8"
                md="6"
                xl="3">

              <DirectoryItemCard Title="@entry.Key.ToString()"
                  ItemPaths="@entry.Value"/>
            </MudItem>
          }

        </MudGrid>
      </MudCardContent>
      <MudCardActions Class="border-t mud-border-lines-default mud-width-full">
        <MudStack Row
            Spacing="2"
            AlignItems="AlignItems.Center">
          <MudButton StartIcon="@Icons.Material.Filled.Verified"
              Size="Size.Small"
              Disabled="_submitDisabled"
              OnClick="@SaveChangesToDatabaseAsync">
            Submit
          </MudButton>
          <MudIconButton Icon="@Icons.Material.Outlined.Print"
              Color="Color.Secondary"
              Size="Size.Small"/>
        </MudStack>
      </MudCardActions>
    </MudCard>
  } else {
    <div class="align-center d-flex flex-1 flex-column justify-center my-auto"
        style="min-height: 200px">
      <MudProgressCircular Indeterminate="true"
          Color="Color.Secondary"
          Class="ma-4"/>
      <MudText Color="Color.Default"
          Typo="Typo.h5"
          Align="Align.Center">
        Select Code From table
      </MudText>
    </div>
  }

</div>

@code{

  [Parameter]
  [EditorRequired]
  public required WindingCode? WindingCode { get; set; }

  private bool _submitDisabled = true;
  private bool _isOpen;
  private bool _addItems;
  private bool _removeItems;
  private bool _editItems;

  private List<CardOptions> EnabledOptions { get; set; } = new();
  private Dictionary<Enum, List<string?>> AssignedItemDictionary { get; set; } = new() {
    { AssignedItem.Directory, new() },
    { AssignedItem.Pdf, new() },
    { AssignedItem.Video, new() },
    { AssignedItem.RefMedia, new() }
  };

  private List<CardOptions> MediaCardOptions { get; set; } = new() {
    new("Add Items"),
    new("Remove Items"),
    new("Edit Items")
  };

  protected override void OnParametersSet() {
    base.OnParametersSet();


    if (WindingCode is null) return;

    foreach (var item in Enum.GetValues(typeof(AssignedItem)).Cast<AssignedItem>()) {
      var items = AssignedItemDictionary[item];
      items.Clear();
      switch (item) {
        case AssignedItem.Directory:
  // if FolderPath is null, then do not add
  // else add
          if (WindingCode.FolderPath is not null)
            items.Add(WindingCode.FolderPath);
          break;
        case AssignedItem.Pdf:
          if (WindingCode.Media.Pdf is not null)
            items.Add(WindingCode.Media.Pdf);
          break;
        case AssignedItem.Video:
          if (WindingCode.Media.Video is not null)
            items.Add(WindingCode.Media.Video);
          break;
        case AssignedItem.RefMedia:
          if (WindingCode.Media.RefMedia is not null)
            items.AddRange(WindingCode.Media.RefMedia);
          break;
        default:
          throw new ArgumentOutOfRangeException();
      }
    }
  }
  protected override void OnInitialized() {
    base.OnInitialized();
    State.StateChanged += async () => await InvokeAsync(StateHasChanged);
  }

  void IDisposable.Dispose() { Console.WriteLine("Disposing AdminDashboard.razor"); }

  private static async Task SaveChangesToDatabaseAsync() { await Task.CompletedTask; }
  private async Task OpenImportMediaDialog() {
    if (WindingCode is null) return;
    var parameters = new DialogParameters {
      { "WindingCode", WindingCode }
    };

    var options = new DialogOptions() {
      CloseButton = true,
      MaxWidth = MaxWidth.ExtraSmall,
      NoHeader = true
    };

    var dialog = await DialogService.ShowAsync<ImportMediaDialog>("Delete", parameters, options);
    var result = await dialog.Result;

    if (result.Canceled) {
      Console.WriteLine("Dialog was canceled");
      Snackbar.Add($"Canceled Import Media Dialog", Severity.Info);
      return;
    }
    if (result.Data is not WindingCode _) return;
    _submitDisabled = false;
  }

  public enum AssignedItem {
    Directory,
    Pdf,
    Video,
    RefMedia
  }

  private void TogglePopover() { _isOpen = !_isOpen; }
  private void OnSelectedValuesChanged(IEnumerable<CardOptions> options) {
  // if any MediaCardOptions are in EnabledOptions, then set the items IsEnabled to true
    foreach (var option in options) {
      if (EnabledOptions.Contains(option)) {
        option.IsEnabled = true;
      }
    }
  }

  private record CardOptions(string Name, bool IsEnabled = false) {
    public bool IsEnabled { get; set; } = IsEnabled;
    public override string ToString() { return Name; }
  }

}
