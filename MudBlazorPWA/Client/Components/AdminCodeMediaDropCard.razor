@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AdminEditorState State
@using System.Collections
@implements IDisposable

<div id="media-card"
    class="d-flex flex-1 justify-center mud-width-full">
  @if (WindingCode != null) {
    <MudCard Elevation="4"
        Class="mud-height-full mud-width-full"
        Style="background-color: transparent; position: relative;"
        Outlined="false">
      <MudCardHeader Class="gap-x-4 mud-background-gray pa-1">
        <MudText Typo="Typo.h6">
          <strong>
            @WindingCode.Division: @WindingCode.Name
          </strong>
        </MudText>
        <MudButton StartIcon="@Icons.Material.Outlined.Upgrade"
            Size="Size.Small"
            Color="Color.Secondary"
            Variant="Variant.Outlined"
            Disabled="@(WindingCode.Media.Pdf == null && WindingCode.Media.Video == null)">
          View Media
        </MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.ImportExport"
            Size="Size.Small"
            Color="Color.Default"
            Variant="Variant.Outlined"
            OnClick="OpenImportMediaDialog">
          Import Media
        </MudButton>
      </MudCardHeader>
      <MudDivider/>
      <MudCardContent Class="pa-1"
          Style="height: auto; display: flex; justify-items: center;position: absolute;bottom: 48px;left: 0;right: 0;top: 40px;">
        <MudGrid Spacing="1"
            Justify="Justify.Center">

          @foreach (var entry in AssignedItemDictionary.Where(entry => entry.Value.Count != 0)) {
            <MudItem xs="6"
                lg="3"
                Class="border mud-border-primary">

              <DirectoryItemCard Title="@entry.Key.ToString()"
                  Items="@entry.Value"/>
            </MudItem>
          }

        </MudGrid>
      </MudCardContent>
      <MudCardActions Class="border-t mud-border-lines-default mud-width-full"
          Style="position: absolute; bottom: 0;">
        <MudStack Row
            Spacing="2"
            AlignItems="AlignItems.Center">
          <MudButton StartIcon="@Icons.Material.Filled.Verified"
              Size="Size.Small"
              Disabled="_submitDisabled"
              OnClick="@SaveChangesToDatabaseAsync">
            Submit
          </MudButton>
          <MudIconButton Icon="@Icons.Material.Outlined.Print"
              Color="Color.Secondary"
              Size="Size.Small"/>
        </MudStack>
      </MudCardActions>
    </MudCard>
  } else {
    <div class="align-center d-flex flex-1 flex-column justify-center my-auto"
        style="min-height: 200px">
      <MudProgressCircular Indeterminate="true"
          Color="Color.Secondary"
          Class="ma-4"/>
      <MudText Color="Color.Default"
          Typo="Typo.h5"
          Align="Align.Center">
        Select Code From table
      </MudText>
    </div>
  }

</div>

@code{

  [Parameter]
  [EditorRequired]
  public required WindingCode? WindingCode { get; set; }

  private bool _submitDisabled = true;
  private Dictionary<Enum, List<string?>> AssignedItemDictionary { get; set; } = new() {
    { AssignedItem.Directory, new() },
    { AssignedItem.Pdf, new() },
    { AssignedItem.Video, new() },
    { AssignedItem.RefMedia, new() }
  };

  protected override void OnParametersSet() {
    base.OnParametersSet();


    if (WindingCode is null) return;

    foreach (var item in Enum.GetValues(typeof(AssignedItem)).Cast<AssignedItem>()) {
      var items = AssignedItemDictionary[item];
      items.Clear();
      switch (item) {
        case AssignedItem.Directory:
  // if FolderPath is null, then do not add
  // else add
          if (WindingCode.FolderPath is not null)
            items.Add(WindingCode.FolderPath);
          break;
        case AssignedItem.Pdf:
          if (WindingCode.Media.Pdf is not null)
            items.Add(WindingCode.Media.Pdf);
          break;
        case AssignedItem.Video:
          if (WindingCode.Media.Video is not null)
            items.Add(WindingCode.Media.Video);
          break;
        case AssignedItem.RefMedia:
          if (WindingCode.Media.RefMedia is not null)
            items.AddRange(WindingCode.Media.RefMedia);
          break;
        default:
          throw new ArgumentOutOfRangeException();
      }
    }
  }
  protected override void OnInitialized() {
    base.OnInitialized();
    State.StateChanged += async () => await InvokeAsync(StateHasChanged);
  }

  void IDisposable.Dispose() { Console.WriteLine("Disposing AdminDashboard.razor"); }

  private static async Task SaveChangesToDatabaseAsync() { await Task.CompletedTask; }
  private async Task OpenImportMediaDialog() {
    if (WindingCode is null) return;
    var parameters = new DialogParameters {
      { "WindingCode", WindingCode }
    };

    var options = new DialogOptions() {
      CloseButton = true,
      MaxWidth = MaxWidth.ExtraSmall,
      NoHeader = true
    };

    var dialog = await DialogService.ShowAsync<ImportMediaDialog>("Delete", parameters, options);
    var result = await dialog.Result;

    if (result.Canceled) {
      Console.WriteLine("Dialog was canceled");
      Snackbar.Add($"Canceled Import Media Dialog", Severity.Info);
      return;
    }
    if (result.Data is not WindingCode _) return;
    _submitDisabled = false;
  }

  public enum AssignedItem {
    Directory,
    Pdf,
    Video,
    RefMedia
  }

}
