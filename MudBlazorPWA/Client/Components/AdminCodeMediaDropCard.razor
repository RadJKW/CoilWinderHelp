@using MudBlazorPWA.Client.Instructions.Pages
@using MudBlazorPWA.Client.Instructions.Dialogs
@using System.Diagnostics
@using System.Text.Json
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@implements IDisposable
@inject AdminEditorState State
<div id="media-card"
    class="d-flex justify-center mud-width-full">
  @if (WindingCode != null) {
    <MudCard Elevation="4"
        Class="mud-width-full"
        Style="background-color: transparent"
        Outlined="true">
      <MudCardHeader Class="gap-x-4 mud-background-gray pa-1">
        <MudText Typo="Typo.h6">
          <strong>
            @WindingCode.Division: @WindingCode.Name
          </strong>
        </MudText>
        <MudButton StartIcon="@Icons.Material.Outlined.Upgrade"
            Size="Size.Small"
            Color="Color.Secondary"
            Variant="Variant.Outlined"
            Disabled="@(WindingCode.Media.Pdf == null && WindingCode.Media.Video == null)">
          View Media
        </MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.ImportExport"
            Size="Size.Small"
            Color="Color.Default"
            Variant="Variant.Outlined"
            OnClick="OpenImportMediaDialog">
          Import Media
        </MudButton>
      </MudCardHeader>
      <MudDivider/>
      <MudCardContent Class="pa-1">
        <MudGrid Spacing="1"
            Justify="Justify.Center">
          @foreach (var config in _dropZoneConfigs) {
            var dropZoneId = $"{config.DropZoneId}-{WindingCode.Id}";
            <MudItem xs="9"
                lg="6">
              <div class="@config.ContainerClass">
                <div class="d-flex justify-flex-start mud-width-full">
                  <MudText Typo="Typo.button"
                      Align="Align.Left">
                    <strong>@config.HeaderText</strong>
                  </MudText>
                </div>
                <MudDropZone T="DropItem"
                    Style="@DropZoneConfig.Style"
                    Class="@config.DropZoneClass"
                    CanDrop="(context) => config.CanDrop(context)"
                    Identifier="@dropZoneId">
                  <ItemRenderer>
                    @{
                      var chipClass = "border border-solid drop-zone-item";
                      string chipIcon;
                      /*string? chipCloseIcon = context.IsCopy
                          ? null
                          : " ";*/
                      switch (context.Type) {
                        case DropItemType.Folder:
                          chipClass += " " + "folder-item";
                          chipIcon = Icons.Material.Filled.Folder;
                          break;
                        case DropItemType.Pdf:
                          chipClass += " " + "pdf-item";
                          chipIcon = Icons.Material.Filled.PictureAsPdf;
                          break;
                        case DropItemType.Video:
                          chipClass += " " + "video-item";
                          chipIcon = Icons.Material.Filled.VideoLibrary;
                          break;
                        case DropItemType.Media:
                        case DropItemType.Unknown:
                        default:
                          throw new ArgumentOutOfRangeException();
                      }

                      <div class="drop-zone-item-tooltip">

                        <div class="tooltip-icon">
                          <MudIconButton OnClick="@(() => State.OpenFilePreview(context.Path))"
                              Size="Size.Small"
                              Icon="@Icons.Material.Filled.OpenInNew"/>
                        </div>
                        <div class="tooltip-content">
                          <p>
                            @context.Path
                          </p>
                        </div>
                      </div>
                      <MudChip Class="@chipClass"
                          Icon="@chipIcon"
                          Size="@Size.Small"
                          Label="@true">
                        <p class="mud-typography-button">@context.Name</p>
                      </MudChip>
                    }
                  </ItemRenderer>
                </MudDropZone>
              </div>
            </MudItem>
          }
        </MudGrid>
      </MudCardContent>
      <MudCardActions>
        <MudStack Row
            Spacing="2"
            AlignItems="AlignItems.Center">
          <MudButton StartIcon="@Icons.Material.Filled.Verified"
              Size="Size.Small"
              Disabled="_submitDisabled"
              OnClick="@SaveChangesToDatabaseAsync">
            Submit
          </MudButton>

          <MudDropZone T="DropItem"
              Class="align-center d-flex justify-center mud-alert-text-error mud-height-full"
              OnlyZone="true"
              Identifier="trash">

            <MudIcon Icon="@Icons.Material.Outlined.Delete"
                Color="Color.Error"
                Class="mx-6 my-1"/>
          </MudDropZone>
          <MudIconButton Icon="@Icons.Material.Outlined.Print"
              Color="Color.Secondary"
              Size="Size.Small"/>
        </MudStack>
      </MudCardActions>
    </MudCard>
  } else {
    <div class="align-center d-flex flex-1 flex-column justify-center my-auto"
        style="min-height: 200px">
      <MudProgressCircular Indeterminate="true"
          Color="Color.Secondary"
          Class="ma-4"/>
      <MudText Color="Color.Default"
          Typo="Typo.h5"
          Align="Align.Center">
        Select Code From table
      </MudText>
    </div>
  }

</div>

@code{
  #region Parameters
  [Parameter]
  [EditorRequired]
  public required WindingCode? WindingCode { get; set; }
  #endregion
  #region Locals
  private List<DropZoneConfig> _dropZoneConfigs = new();
  private bool _submitDisabled = true;
  #endregion
  #region Lifecycle
  protected override void OnInitialized() {
    base.OnInitialized();
    State.DropItemsChanged += StateOnDropItemsChanged;
    _dropZoneConfigs = new() {
      new() {
        ContainerClass = "mud-alert-text-success",
        DropZoneId = AdminEditorState.DzCodeFolder,
        HeaderText = "Folder Path"
      },
      new() {
        ContainerClass = "mud-alert-text-warning",
        DropZoneId = AdminEditorState.DzCodePdf,
        HeaderText = "PDF"
      },
      new() {
        ContainerClass = "mud-alert-text-info",
        DropZoneId = AdminEditorState.DzCodeVideo,
        HeaderText = "Video"
      },
      new() {
        ContainerClass = "mud-alert-text-primary",
        DropZoneId = AdminEditorState.DzCodeRefMedia,
        HeaderText = "Reference Media"
      }
    };
  }
  void IDisposable.Dispose() { Debug.WriteLine("Disposing AdminDashboard.razor"); }
  #endregion
  #region Methods
  private async Task SaveChangesToDatabaseAsync() {
    var windingCode = MapDropItemsToWindingCode();
    if (windingCode is null) return;
    var result = await State.ModifyWindingCode(windingCode);
    if (!result) {
      Snackbar.Add($"Failed to commit changes, Data = {JsonSerializer.Serialize(windingCode)}", Severity.Error);
      return;
    }
    Snackbar.Add($"Committed changes, Data = {JsonSerializer.Serialize(windingCode)}", Severity.Info);
    var updatedItem = await State.GetWindingCode(windingCode.Id);
    Snackbar.Add($"Updated item, Data = {JsonSerializer.Serialize(updatedItem)}", Severity.Success);
  }
  private async Task OpenImportMediaDialog() {
    if (WindingCode is null) return;
    var parameters = new DialogParameters {
      { "WindingCode", WindingCode }
    };

    var options = new DialogOptions() {
      CloseButton = true,
      MaxWidth = MaxWidth.ExtraSmall,
      NoHeader = true
    };

    var dialog = await DialogService.ShowAsync<ImportMediaDialog>("Delete", parameters, options);
    var result = await dialog.Result;

    if (!result.Canceled) {
      var windingCode = result.Data as WindingCode;

      if (windingCode is null) return;

      // TODO: update the state to show the new drop items

      WindingCode.FolderPath = windingCode.FolderPath;
      WindingCode.Media = windingCode.Media;
      _submitDisabled = true;
    }
  }
  private void StateOnDropItemsChanged() { _submitDisabled = false; }

  private WindingCode? MapDropItemsToWindingCode() {
    var code = State.SelectedWindingCode;
    if (code is null) return null;

    var dropZoneItems = State.AssignedDropItems;

    var hasFolderItem = false;
    var hasPdfItem = false;
    var hasVideoItem = false;
    var hasRefMediaItem = false;

    Console.WriteLine("foreach item in dropZoneItems");
    foreach (var item in dropZoneItems) {
      string dropZonePrefix = item.DropZoneId[..item.DropZoneId.LastIndexOf('-')];
      Console.WriteLine("dropZonePrefix -> " + dropZonePrefix);
      switch (dropZonePrefix) {
        case AdminEditorState.DzCodeFolder:
          code.FolderPath = item.Path;
          hasFolderItem = true;
          break;
        case AdminEditorState.DzCodePdf:
          code.Media.Pdf = item.Path;
          hasPdfItem = true;
          break;
        case AdminEditorState.DzCodeVideo:
          code.Media.Video = item.Path;
          hasVideoItem = true;
          break;
        case AdminEditorState.DzCodeRefMedia: {
          Console.WriteLine("Case -> DzCodeRefMedia");
          Console.WriteLine("Item Path -> " + item.Path);
          code.Media.RefMedia?.Add(item.Path);
          hasRefMediaItem = true;
        }
          break;
      }
    }

    if (!hasFolderItem)
      code.FolderPath = null;

    if (!hasPdfItem)
      code.Media.Pdf = null;

    if (!hasVideoItem)
      code.Media.Video = null;
    if (!hasRefMediaItem)
      code.Media.RefMedia = null;

    Console.WriteLine("WindingCode -> " + code);
    return code;
  }
  #endregion
  #region Classes
  public class DropZoneConfig {
    private readonly string _containerClass = "pa-1";

    public static string Style => string.Empty;

    public string DropZoneClass { get; init; } = "drop-zone-gallery";
    public string ContainerClass { get => _containerClass; init => _containerClass = $"{_containerClass} {value}"; }

    public required string DropZoneId { get; init; }
    public required string HeaderText { get; init; }
    public bool CanDrop(DropItem context) {
  // get the dropItem type and see if it matches to the DropZoneId
  // the DropZone id is one of the constants DzCodeFolder, DzCodePdf, DzCodeVideo, DzCodeRefMedia
  // if the dropItem type is a pdf and type is pdf then return true

      var dropZoneType = DropZoneId switch {
        AdminEditorState.DzCodeFolder => DropItemType.Folder,
        AdminEditorState.DzCodePdf => DropItemType.Pdf,
        AdminEditorState.DzCodeVideo => DropItemType.Video,
        AdminEditorState.DzCodeRefMedia => DropItemType.Media,
        _ => DropItemType.Unknown
        };

  // since a PDF or Video can be classified as a Media,
  // if the dropZoneType is Media, then return true if the dropItem type is Media, Pdf, or Video

      return dropZoneType switch {
        DropItemType.Media => context.Type is DropItemType.Pdf or DropItemType.Video,
        _ => context.Type == dropZoneType
        };
    }
  }
  #endregion
}
