@using System.Text.Json

@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AdminEditorState State
@implements IDisposable

<div id="media-card"
    class="d-flex justify-center mud-width-full">
  @if (WindingCode != null) {
    <MudCard Elevation="4"
        Class="mud-width-full"
        Style="background-color: transparent"
        Outlined="true">
      <MudCardHeader Class="gap-x-4 mud-background-gray pa-1">
        <MudText Typo="Typo.h6">
          <strong>
            @WindingCode.Division: @WindingCode.Name
          </strong>
        </MudText>
        <MudButton StartIcon="@Icons.Material.Outlined.Upgrade"
            Size="Size.Small"
            Color="Color.Secondary"
            Variant="Variant.Outlined"
            Disabled="@(WindingCode.Media.Pdf == null && WindingCode.Media.Video == null)">
          View Media
        </MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.ImportExport"
            Size="Size.Small"
            Color="Color.Default"
            Variant="Variant.Outlined"
            OnClick="OpenImportMediaDialog">
          Import Media
        </MudButton>
      </MudCardHeader>
      <MudDivider/>
      <MudCardContent Class="pa-1">
        <MudGrid Spacing="1"
            Justify="Justify.Center">
        </MudGrid>
      </MudCardContent>
      <MudCardActions>
        <MudStack Row
            Spacing="2"
            AlignItems="AlignItems.Center">
          <MudButton StartIcon="@Icons.Material.Filled.Verified"
              Size="Size.Small"
              Disabled="_submitDisabled"
              OnClick="@SaveChangesToDatabaseAsync">
            Submit
          </MudButton>
          <MudIconButton Icon="@Icons.Material.Outlined.Print"
              Color="Color.Secondary"
              Size="Size.Small"/>
        </MudStack>
      </MudCardActions>
    </MudCard>
  } else {
    <div class="align-center d-flex flex-1 flex-column justify-center my-auto"
        style="min-height: 200px">
      <MudProgressCircular Indeterminate="true"
          Color="Color.Secondary"
          Class="ma-4"/>
      <MudText Color="Color.Default"
          Typo="Typo.h5"
          Align="Align.Center">
        Select Code From table
      </MudText>
    </div>
  }

</div>

@code{
  #region Parameters
  [Parameter]
  [EditorRequired]
  public required WindingCode? WindingCode { get; set; }
  #endregion
  #region Locals
  private bool _submitDisabled = true;
  #endregion
  #region Lifecycle
  protected override void OnInitialized() {
    base.OnInitialized();
    State.StateChanged += async () => await InvokeAsync(StateHasChanged);
  }
  void IDisposable.Dispose() { Console.WriteLine("Disposing AdminDashboard.razor"); }
  #endregion
  #region Methods
  private async Task SaveChangesToDatabaseAsync() { await Task.CompletedTask; }
  private async Task OpenImportMediaDialog() {
    if (WindingCode is null) return;
    var parameters = new DialogParameters {
      { "WindingCode", WindingCode }
    };

    var options = new DialogOptions() {
      CloseButton = true,
      MaxWidth = MaxWidth.ExtraSmall,
      NoHeader = true
    };

    var dialog = await DialogService.ShowAsync<ImportMediaDialog>("Delete", parameters, options);
    var result = await dialog.Result;

    if (result.Canceled) {
      Console.WriteLine("Dialog was canceled");
      Snackbar.Add($"Canceled Import Media Dialog", Severity.Info);
      return;
    }
    if (result.Data is not WindingCode _) return;
    _submitDisabled = false;
  }
  private void StateOnDropItemsChanged() { _submitDisabled = false; }
  #endregion
}
