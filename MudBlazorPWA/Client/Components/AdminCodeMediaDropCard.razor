@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AdminEditorState State
@implements IDisposable

  @if (WindingCode != null) {
    <MudCard Elevation="4"
        Class="border-t mud-border-lines-default mud-width-full mud-height-full"
        Style="background-color: transparent;"
        Outlined="false">
      <MudCardHeader Class="border-b-2 mud-background-gray mud-border-lines-default pa-2">
        <MudIconButton Icon="@Icons.Material.Filled.Edit"
            Size="Size.Small"
            Class="mr-2 my-auto"
            OnClick="@TogglePopover"/>
        <MudStack Row
            Justify="Justify.FlexStart"
            AlignItems="AlignItems.Center">
          <div class="d-flex gap-2 align-center">
            <MudDivider Class="my-n2"
                Vertical="true"
                FlexItem="true"
                DividerType="DividerType.FullWidth"/>
            <MudText Typo="Typo.h6">
              <strong>
                @WindingCode.Division: @WindingCode.Name
              </strong>
            </MudText>
            <MudPopover Open="@_isOpen"
                Class="my-n2"
                RelativeWidth="true"
                Elevation="3"
                AnchorOrigin="Origin.TopLeft"
                TransformOrigin="Origin.TopLeft">
              <MudCard Square>
                <MudCardHeader Class="d-flex justify-center mud-background-gray px-2 py-1">
                  <MudText Typo="Typo.button">
                    Edit Code
                  </MudText>
                </MudCardHeader>
                <MudCardContent>
                  @foreach (var option in MediaCardOptions) {
                    <MudSwitch Label="@option.Name"
                        Checked="@option.IsEnabled"
                        CheckedChanged="@((bool value) => option.IsEnabled = value)"
                        Color="Color.Info"/>
                  }
                </MudCardContent>
              </MudCard>
            </MudPopover>
          </div>

          <MudButton StartIcon="@Icons.Material.Outlined.Upgrade"
              Size="Size.Small"
              Color="Color.Secondary"
              Variant="Variant.Outlined"
              Disabled="@(WindingCode.Media.Pdf == null && WindingCode.Media.Video == null)">
            View Media
          </MudButton>
          <MudButton StartIcon="@Icons.Material.Filled.ImportExport"
              Size="Size.Small"
              Color="Color.Default"
              Variant="Variant.Outlined"
              OnClick="OpenImportMediaDialog">
            Import Media
          </MudButton>
        </MudStack>
      </MudCardHeader>
      <MudCardContent Class="pa-1 ma-1">
        <MudGrid Spacing="1"
            Justify="Justify.Center"
            Class="border mud-border-lines-default">

          @foreach (var entry in AssignedItemDictionary) {
            var index = AssignedItemDictionary.Keys.ToList().IndexOf(entry.Key);
            var itemClass =index switch {
              0 => "border-r border-b",
              1 => "border-b",
              2 => "border-r",
              _ => ""
            };
            itemClass += " " + " d-flex justify-center pa-0 mud-border-lines-default";
            <MudItem Class="@itemClass"
                xs="12"
                md="6"
                xxl="3">

              <DirectoryItemCard Key="@entry.Key"
                  DirectoryItems="@entry.Value" SelectedItemsChanged="OnSelectedItemsChanged"/>
            </MudItem>
          }
        </MudGrid>
      </MudCardContent>
      <MudCardActions Class="pa-1">
        <MudStack AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">

          <div>

          <MudTooltip Arrow
            Text="Save"
            ShowOnHover="@(!_submitDisabled)">
          <MudFab StartIcon="@Icons.Material.Rounded.Save"
              Size="Size.Small"
              IconSize="Size.Small"
              Disabled="_submitDisabled"/>
        </MudTooltip>
        <MudTooltip Arrow
            Text="Print">
          <MudFab StartIcon="@Icons.Material.Rounded.Print"
              Size="Size.Small"
              IconSize="Size.Small"/>
        </MudTooltip>
        <MudTooltip Arrow
            Text="Delete">
          <MudFab StartIcon="@Icons.Material.Rounded.Delete"
              Size="Size.Small"
              IconSize="Size.Small"
              OnClick="DeleteSelectedMedia"/>
        </MudTooltip>
          </div>
        </MudStack>
      </MudCardActions>
    </MudCard>
  } else {
    <div class="align-center d-flex flex-1 flex-column justify-center my-auto">
      <MudProgressCircular Indeterminate="true"
          Color="Color.Secondary"
          Class="ma-4"/>
      <MudText Color="Color.Default"
          Typo="Typo.h5"
          Align="Align.Center">
        Select Code From table
      </MudText>
    </div>
  }


@code{

  [Parameter]
  [EditorRequired]
  public required WindingCode? WindingCode { get; set; }


  private List<(Enum, IDirectoryItem)> SelectedItems { get; set; } = new();
  private bool _submitDisabled = true;
  private bool _isOpen;
  // private bool _addItems;
  // private bool _removeItems;
  // private bool _editItems;

  private IEnumerable<bool> EnabledOptions { get; set; } = new List<bool>();
  private Dictionary<Enum, List<IDirectoryItem?>> AssignedItemDictionary { get; set; } = new() {
    { AssignedItem.Directory, new() },
    { AssignedItem.Pdf, new() },
    { AssignedItem.Video, new() },
    { AssignedItem.RefMedia, new() }
  };


  private List<CardOptions> MediaCardOptions { get; set; } = new() {
    new("Add Items"),
    new("Remove Items"),
    new("Edit Items")
  };

  protected override void OnParametersSet() {
    base.OnParametersSet();


    if (WindingCode is null) return;

    foreach (var item in Enum.GetValues(typeof(AssignedItem)).Cast<AssignedItem>()) {
      var items = AssignedItemDictionary[item];
      items.Clear();
      switch (item) {
        case AssignedItem.Directory:
  // if FolderPath is null, then do not add
  // else add
          if (WindingCode.FolderPath is not null)
            items.Add(WindingCode.FolderPath.AsDirectoryItem());
          break;
        case AssignedItem.Pdf:
          if (WindingCode.Media.Pdf is not null)
            items.Add(WindingCode.Media.Pdf.AsDirectoryItem());
          break;
        case AssignedItem.Video:
          if (WindingCode.Media.Video is not null)
            items.Add(WindingCode.Media.Video.AsDirectoryItem());
          break;
        case AssignedItem.RefMedia:
          if (WindingCode.Media.RefMedia is not null)
            items.AddRange(WindingCode.Media.RefMedia.Select(x => x.AsDirectoryItem()));
          break;
        default:
          throw new ArgumentOutOfRangeException();
      }
    }
  }
  protected override void OnInitialized() {
    base.OnInitialized();
    State.StateChanged += async () => await InvokeAsync(StateHasChanged);
  }

  void IDisposable.Dispose() { Console.WriteLine("Disposing AdminDashboard.razor"); }

  private static async Task SaveChangesToDatabaseAsync() { await Task.CompletedTask; }
  private async Task OpenImportMediaDialog() {
    if (WindingCode is null) return;
    var parameters = new DialogParameters {
      { "WindingCode", WindingCode }
    };

    var options = new DialogOptions() {
      CloseButton = true,
      MaxWidth = MaxWidth.ExtraSmall,
      NoHeader = true
    };

    var dialog = await DialogService.ShowAsync<ImportMediaDialog>("Delete", parameters, options);
    var result = await dialog.Result;

    if (result.Canceled) {
      Console.WriteLine("Dialog was canceled");
      Snackbar.Add($"Canceled Import Media Dialog", Severity.Info);
      return;
    }
    if (result.Data is not WindingCode _) return;
    _submitDisabled = false;
  }

  private void DeleteSelectedMedia() {
    Console.WriteLine("deleting items");
    if (WindingCode is null) return;
    var code = WindingCode;
    foreach (var (key, value) in SelectedItems) {
      Console.WriteLine($"key: {key}, value: {value}");
      switch (key) {
        case AssignedItem.Directory: {
          code.FolderPath = null;
          break;
        }
        case AssignedItem.Pdf: {
          code.Media.Pdf = null;
          break;
        }
        case AssignedItem.Video: {
          code.Media.Video = null;
          break;
        }
        case AssignedItem.RefMedia: {
          if (code.Media.RefMedia != null)
            foreach (var item in code.Media.RefMedia.Where(item => item == value.Path)) {
              code.Media.RefMedia.Remove(item);
              break;
            }
          break;
        }
      }
    }
    State.NotifyStateChanged();
  }


  private void TogglePopover() { _isOpen = !_isOpen; }

  public enum AssignedItem {
    Directory,
    Pdf,
    Video,
    RefMedia
  }
  private record CardOptions(string Name, bool IsEnabled = false) {
    public bool IsEnabled { get; set; } = IsEnabled;
    public override string ToString() { return Name; }
  }

  private void OnSelectedItemsChanged((Enum, IEnumerable<IDirectoryItem>) args) {
    var (key, obj) = args;
    SelectedItems = obj.Select(x => (key, x)).ToList();

    var logMessage = string.Join(',', SelectedItems.Select(x => x.Item2.Name));
    Console.WriteLine($"Selected Items: {logMessage}");
  }
}
