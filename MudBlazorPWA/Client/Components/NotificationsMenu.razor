<MudBadge Color="Color.Secondary"
    Dot="true"
    Overlap="true"
    Visible="_newNotificationsAvailable">
  <MudMenu Icon="@Icons.Material.Outlined.Notifications"
      Color="Color.Inherit"
      AnchorOrigin="Origin.BottomLeft"
      TransformOrigin="Origin.TopCenter"
      PopoverClass="docs-layout-menu-shadow"
      ListClass="pa-2 docs-menu-list"
      LockScroll="true">
    <div class="align-center d-flex justify-space-between px-2">
      <MudText Typo="Typo.subtitle2">
        Notifications
      </MudText>
      <MudButton Disabled="@(_newNotificationsAvailable == false)"
          OnClick="MarkNotificationAsRead"
          StartIcon="@Icons.Material.Filled.DoneAll"
          Variant="Variant.Text"
          Color="Color.Primary"
          Class="ml-16 mr-n2">
        Clear
      </MudButton>
    </div>

    @if (_messages != null && _newNotificationsAvailable) {
      @foreach ((string? message, bool _) in _messages.Take(5)) {
        <MudMenuItem Class="px-2 py-0 rounded">
          <MudText Typo="Typo.body2">
            @message
          </MudText>
        </MudMenuItem>
        <MudDivider Class="my-2"/>
      }
    } else {
      <div class="align-center d-flex justify-center px-2 py-8 relative">
        <MudText Class="mud-text-secondary my-12">
          Nothing new :(
        </MudText>
      </div>
    }
  </MudMenu>
</MudBadge>

@code {
  private IDictionary<string, bool>? _messages;
  private bool _newNotificationsAvailable = true;

  private Task MarkNotificationAsRead() {
    _newNotificationsAvailable = false;
    return Task.CompletedTask;
  }

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
      _messages = GetNotifications();
      StateHasChanged();
    }

    await base.OnAfterRenderAsync(firstRender);
  }
  private static IDictionary<string, bool> GetNotifications() {
  // return two new notifications
    var notifications = new Dictionary<string, bool> {
      {
        "New Notification 1", true
      }, {
        "New Notification 2", true
      }
    };

    return notifications;
  }
}
