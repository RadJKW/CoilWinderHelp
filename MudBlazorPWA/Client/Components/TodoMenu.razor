<MudBadge
    Color="Color.Info"
    Dot="true"
    Overlap="true"
    Visible="true">
  <MudMenu
      Icon="@Icons.Material.Outlined.Checklist"
      Color="Color.Inherit"
      AnchorOrigin="Origin.BottomCenter"
      TransformOrigin="Origin.TopCenter"
      PopoverClass="todo-menu"
      ListClass=" pa-2 docs-menu-list">
    <MudGrid
        Spacing="0">
      <MudItem
          xs="8">
        <div
            class="align-center ml-8 d-flex justify-start">
          <MudText
              Typo="Typo.body1">
            TODOs
          </MudText>

        </div>
      </MudItem>
      <MudItem
          Class="mt-n2"
          xs="4">
        <MudText
              Style="font-size: 0.65rem"
              Typo="Typo.caption">
            QTY: 21
          </MudText>
      </MudItem>
    </MudGrid>

    <MudSpacer/>

    <MudDivider
        Class="mb-2 mt-1 mx-n2"
        DividerType="DividerType.FullWidth"/>
    <div
        class="mx-6">

    @foreach (var item in _todoList!) {
      // if this is not the first item, add a divider
      if (item != _todoList.First()) {
        <MudDivider
            Class="my-2"/>
      }
      <MudMenuItem
          Class="px-4 py-0 rounded todo-menu item"
          Icon="@(item.Complete ? Icons.Material.Filled.CheckBox : Icons.Material.Filled.CheckBoxOutlineBlank)"
          IconSize="Size.Small"
          OnClick="() => ToggleItemComplete(item)">
        <MudText
            Typo="Typo.body2">
          @item.Title
        </MudText>
      </MudMenuItem>
    }
    </div>
  </MudMenu>
</MudBadge>

@code{

  private class TodoItem {

    public TodoItem(string title, string description, bool complete) {
      Title = title;
      Description = description;
      Complete = complete;
    }
    public string? Title { get; set; }
    public string? Description { get; set; }
    public bool Complete { get; set; }

  }

  private List<TodoItem>? _todoList;


  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
      _todoList = GetTodoList();
      await InvokeAsync(StateHasChanged);
    }
  }

  private static List<TodoItem> GetTodoList() {

    var todoList = new List<TodoItem>() {
      new(
        title: "AdminPage",
        description: "Add a new page for Admin Stuff",
        complete: false),
      new(
        title: " Raspberry Pi",
        description: "Implement signalR on pi",
        complete: false),
    };

    return todoList;
  }


  private void ToggleItemComplete(TodoItem item) {
    item.Complete = !item.Complete;
  }
}
