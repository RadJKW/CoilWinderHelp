@using MudExtensions.Enums
@inject AdminEditorState State
<MudListExtended T="IDirectoryItem"
    Dense="true"
    MultiSelectionComponent="MultiSelectionComponent.CheckBox"
    SelectedValuesChanged="async (items) => await SelectedItemsChanged.InvokeAsync((Key, items))"
    MultiSelection="true"
    MultiSelectionAlign="Align.Left"
    Class=" directory-item-list mud-width-full py-0">
  <MudListSubheaderExtended T="IDirectoryItem"
      Class="align-center border-b d-flex directory-item-header justify-center ma-0 mud-border-lines-default pa-0">
    <MudText Typo="Typo.button"
        Align="Align.Center">
      @Title
    </MudText>
  </MudListSubheaderExtended>

  <div class="directory-item-content">

    @if (DirectoryItems.Any()) {
      foreach (var item in DirectoryItems) {
        <MudListItemExtended T="IDirectoryItem"
            Class="directory-item"
            Dense="true"
            Value="item">
          <MudStack Row
              Justify="Justify.Center">

            <MudIcon Icon="@item.Icon"/>
            <p class="@GetItemClass(item)">@item.Name</p>
          </MudStack>
        </MudListItemExtended>
      }
    } else {
      <MudPaper Style="background: transparent"
          Height="auto">

      </MudPaper>
    }
  </div>
</MudListExtended>

@code {
  [Parameter]
  public required AssignedItem Key { get; set; }

  [Parameter]
  public List<IDirectoryItem> DirectoryItems { get; set; } = new();

  [Parameter]
  public EventCallback<(AssignedItem, IEnumerable<IDirectoryItem>)> SelectedItemsChanged { get; set; }

  private string Title { get; set; } = default!;

  protected override async Task OnParametersSetAsync() {
    Console.WriteLine($"Key: {Key}, OnParametersSetAsync");
    await base.OnParametersSetAsync();
    Title = Key.ToString();
    if (!State.InitialAssignedItems.ContainsKey(Key)) {
      // add the key to the dictionary and append each DirectoryItem to the list

      var copies = new IDirectoryItem[DirectoryItems.Count];
      DirectoryItems.CopyTo(copies);
      State.InitialAssignedItems.Add(Key, copies.ToList());
    }
    if (State.InitialAssignedItems.TryGetValue(Key, out var items)) {
      Console.WriteLine($"Initial Items {Key} Items: {string.Join(',' , items.Select(x => x.Name))}");
    }



  }

  protected override void OnInitialized() {
    Console.WriteLine($"Key {Key}, OnInitialized");
    base.OnInitialized();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    await base.OnAfterRenderAsync(firstRender);
    if (firstRender) {
      Console.WriteLine($"Key {Key}, First Render");
      // if the key already exists in the dictionary, then do nothing
      // if the key does not exist in the dictionary, then add it

    }
  }
  private string GetItemClass(IDirectoryItem item) {
    // see if the item is in the initial list
    // if it is, then console.write line and return empty string
    // if it is not, then console.write line and return warning class
    if (State.InitialAssignedItems.TryGetValue(Key, out var items)) {
      if (items.Contains(item)) {
        Console.WriteLine($"Key: {Key}, Item: {item.Name}, Initial");
        return "";
      }
    }
    Console.WriteLine($"Key: {Key}, Item: {item.Name}, Not Initial");
    return "mud-alert-text-info";

  }


}
