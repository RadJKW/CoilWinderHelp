@implements IAsyncDisposable
@inject IJSRuntime JsRuntime

<div class="video-grid">
  <video id="videoPlayer" preload="auto" onmetadataloaded="@VideoLoaded">
    <source src="@VideoUrl"/>
  </video>
  <div class="video-controls darken">
    <MudButtonGroup
      Class="video-controls"
      OverrideStyles="false">
      <MudIconButton
        id="playButton"
        OnClick="JsPlayVideo"
        Icon="@Icons.Material.Sharp.PlayCircleOutline"
        Variant="Variant.Outlined"
        Size="Size.Medium"
        Color="Color.Tertiary">
      </MudIconButton>
      @* <div style="margin-inline: 2px;"></div> *@
      <MudIconButton
        id="pauseButton"
        OnClick="JsPauseVideo"
        Icon="@Icons.Material.Filled.PauseCircleOutline"
        Variant="Variant.Outlined"
        Size="Size.Medium"
        Color="Color.Tertiary">
      </MudIconButton>
      @* <div class="mx-2"></div> *@
      <div class="mx-2">
        <MudIconButton
          OnClick="JsRestartVideo"
          Icon="@Icons.Material.Filled.Refresh"
          Variant="Variant.Outlined"
          Size="Size.Medium"
          Color="Color.Tertiary">
        </MudIconButton>
      </div>
      <MudIconButton
        OnClick="@(() => JsSeekVideo(5, false))"
        Icon="@Icons.Material.Outlined.Replay5"
        Variant="Variant.Outlined"
        Size="Size.Medium"
        Color="Color.Secondary">
      </MudIconButton>
      @* <div class="mx-1"></div> *@
      <MudIconButton
        OnClick="@(() => JsSeekVideo(5, true))"
        Icon="@Icons.Material.Filled.Forward5"
        Variant="Variant.Outlined"
        Size="Size.Medium"
        Color="Color.Info">
      </MudIconButton>
    </MudButtonGroup>
  </div>
</div>

@code {
  [Parameter]
  public string? VideoPlayerId { get; set; }

  [Parameter]
  public required string VideoUrl { get; set; }

  [Parameter]
  public string? Class { get; set; }

  private  Lazy<Task<IJSObjectReference>>? _moduleTask;

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
      _moduleTask = new(() => JsRuntime.InvokeAsync<IJSObjectReference>(
        "import", $"./_content/CoilWinderWeb.Components/VideoPlayer.razor.js").AsTask());
    }
    await base.OnAfterRenderAsync(firstRender);
  }

  private async Task VideoLoaded() {
    await JsSetVideoPlayer();
  }

  private async Task JsPauseVideo() {
    var videoJs = await _moduleTask!.Value;
    await videoJs.InvokeVoidAsync("pauseVideo");
  }

  private async Task JsRestartVideo() {
    var videoJs = await _moduleTask!.Value;
    await videoJs.InvokeVoidAsync("restartVideo");
  }

  private async Task JsPlayVideo() {
    var videoJs = await _moduleTask!.Value;
    await videoJs.InvokeVoidAsync("playVideo");
  }

  private async Task JsSeekVideo(int time, bool seekDirection) {
    var videoJs = await _moduleTask!.Value;
    await videoJs.InvokeVoidAsync("seekVideo", time, seekDirection);
  }

  private async Task JsSetVideoPlayer() {
    var videoJs = await _moduleTask!.Value;
    await videoJs.InvokeVoidAsync("init");
  }

 public async ValueTask DisposeAsync() {
    if (_moduleTask!.IsValueCreated) {
      var videoJs = await _moduleTask.Value;
      await videoJs.DisposeAsync();
    }
  }
}