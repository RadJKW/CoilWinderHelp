@implements IAsyncDisposable
@inject IJSRuntime JsRuntime

<div class="video-grid">
  @*<div class="video-player">*@

    <video id="@VideoPlayerId" onloadedmetadata="@VideoLoaded" preload="auto">
      <source src="@VideoUrl" />
    </video>
  @* </div> *@
  <div class="controls-container darken">
    <VideoControls
          @ref="_videoControls"
          PlayClick="@JsPlayVideo"
          PauseClick="@JsPauseVideo"
          RefreshButtonClick="@JsRestartVideo"
          SeekBackClick="@(() => JsSeekVideo(5, false))"
          SeekForwardClick="@(() => JsSeekVideo(5, true))">
      </VideoControls>
  </div>
</div>

@code {
  [Parameter]
  public string? VideoPlayerId { get; set; }

  [Parameter]
  public required string VideoUrl { get; set; }

  [Parameter]
  public string? Class { get; set; }

  private VideoControls? _videoControls;

  private IJSObjectReference? _videoJs;

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
      _videoJs = await JsRuntime
        .InvokeAsync<IJSObjectReference>(
          "import", "../Components/VideoPlayer.razor.js");
    }
  }

  private async Task VideoLoaded() {
    await JsSetVideoPlayer();
  }

  private async Task JsPauseVideo() {
    if (_videoJs != null)
      await _videoJs.InvokeVoidAsync("pauseVideo");
  }

  private async Task JsRestartVideo() {
    if (_videoJs != null)
      await _videoJs.InvokeVoidAsync("restartVideo");
  }

  private async Task JsPlayVideo() {
    if (_videoJs != null)
      await _videoJs.InvokeVoidAsync("playVideo");
  }

  private async Task JsSeekVideo(int time, bool seekDirection) {
    if (_videoJs != null)
      await _videoJs.InvokeVoidAsync("seekVideo", time, seekDirection);
  }

  private async Task JsSetVideoPlayer() {
    if (_videoJs != null)
      await _videoJs.InvokeVoidAsync("init", VideoPlayerId, _videoControls?.GetButtonIds());
  }

  public async ValueTask ReloadVideo() {
    await JsRestartVideo();
  }

  public async ValueTask DisposeAsync() {
    if (_videoJs != null) {
      await _videoJs.DisposeAsync();
    }
  }
}