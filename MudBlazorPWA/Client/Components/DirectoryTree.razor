@inject AdminEditorState State
@using Microsoft.AspNetCore.Connections
@using MudBlazor.Interfaces
@implements IDisposable

<div @attributes="@AdditionalAttributes">

  <MudTreeView @ref="MudTreeRoot"
      Items="@TreeItems"
      ExpandOnDoubleClick="true"
      Hover="true"
      Width="100%"
      Dense="true">
    <ItemTemplate Context="item">
      <MudTreeViewItem Items="item.TreeItems"
          Value="@item"
          CanExpand="@item.CanExpand"
          Expanded="item.Expanded">
        <Content>
          @if (item.CanExpand) {
            <MudTreeViewItemToggleButton Loading="item.Loading"
                Expanded="item.Expanded"
                ExpandedChanged="(expanded) => OnItemExpanded(item, expanded)"
                Visible="true"
                ExpandedIcon="@Icons.Material.Filled.ChevronRight"
                LoadingIcon="@Icons.Material.Filled.Loop"
                LoadingIconColor="Color.Info"/>
          }
          <MudIcon Icon="@item.Icon"/>

          <MudText Class="cursor-text pl-2 z-30"
              Style="justify-self: start;">
            @item.Name
          </MudText>

          <div style="justify-self: end;">

            <MudIconButton Icon="@Icons.Material.Filled.OpenInBrowser"
                OnClick="@(() => OpenFilePreview(item))"
                Size="Size.Small"
                Color="Color.Inherit"/>
            <MudIconButton Icon="@Icons.Material.Filled.ContentCopy"
                Size="Size.Medium"
                Color="Color.Inherit"/>
          </div>
        </Content>
      </MudTreeViewItem>
    </ItemTemplate>
  </MudTreeView>
  @if (State.DropItems.Any()) {
    foreach (var item in State.DropItems) {
      Console.WriteLine($"File: {item.Name}");
      Console.WriteLine($"DZ: {item.Identifier}");
      <MudDropZone T="DropItem"
          Identifier="@item.Identifier">
        <ItemRenderer>
          <MudIcon Icon="@Icons.Custom.FileFormats.FileDocument"/>

          <MudText Class="cursor-text pl-2 z-30"
              Style="justify-self: start;">
            @item.Name
          </MudText>

          <div style="justify-self: end;">

            <MudIconButton Icon="@Icons.Material.Filled.OpenInBrowser"
                OnClick="@(() => State.OpenFilePreview(item.Path!))"
                Size="Size.Small"
                Color="Color.Inherit"/>
            <MudIconButton Icon="@Icons.Material.Filled.ContentCopy"
                Size="Size.Medium"
                Color="Color.Inherit"/>
          </div>
        </ItemRenderer>
      </MudDropZone>
    }
  }

</div>

@code{

  [Parameter(CaptureUnmatchedValues = true)]
  public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

  private HashSet<IDirectoryItem> TreeItems { get; set; } = new();
  private MudTreeView<IDirectoryItem> MudTreeRoot { get; set; } = new();





  protected override async Task OnInitializedAsync() {
    State.NavigateToRoot();
    State.StateChanged += AdminStateChanged;

    foreach (var item in State.CurrentDirectory.Folders.Select(folder
      => new DirectoryItem<DirectoryNode>(folder))) { TreeItems.Add(item); }

    foreach (var item in State.CurrentDirectory.Files.Select(file
      => new DirectoryItem<FileNode>(file))) { TreeItems.Add(item); }
    await base.OnInitializedAsync();
  }

  private void AdminStateChanged() => InvokeAsync(StateHasChanged);

  public void Dispose() { State.StateChanged -= AdminStateChanged; }

  private async Task OpenFilePreview(IDirectoryItem item) {
    if (item is not DirectoryItem<FileNode> file) return;
    await State.OpenFilePreview(file.Item.Path);
  }
  private async Task OnItemExpanded(IDirectoryItem item, bool expanded) {
    if (item.Expanded != expanded) {
      item.Expanded = expanded;
      StateHasChanged();
      await InvokeFetchTreeItems(item);
    }
  }
  private async Task InvokeFetchTreeItems(IDirectoryItem item) {
    if (!item.TreeItems.Any()) {
      item.Loading = true;
      StateHasChanged();
      await Task.Delay(500);
      await item.FetchTreeItems();
      StateHasChanged();
      item.Loading = false;
      StateHasChanged();
      await State.AppendDropItems(item.TreeItems);
    }
  }
}
