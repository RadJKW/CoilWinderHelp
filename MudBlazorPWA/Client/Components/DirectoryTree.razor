@inject AdminEditorState State
@using System.Text.Json
@implements IDisposable

@if (State.RootDirectoryItem != null) {
  <div @attributes="@AdditionalAttributes">

    <MudListSubheaderExtended T="string"
        DisableGutters="true"
        SecondaryBackground="true">
      <MudStack Row
          Spacing="6"
          AlignItems="AlignItems.Center"
          Justify="Justify.Center">
        <MudIconButton Icon="@Icons.Material.Filled.Print"
            Size="Size.Small"
            Color="Color.Primary"/>
        <MudIcon Icon="@Icons.Material.Filled.DatasetLinked"/>
        <MudText Typo="Typo.h5">
          <strong >Winding Instructions</strong>
        </MudText>
      </MudStack>
    </MudListSubheaderExtended>
    <div class="directory-explorer">
      <div class="directory-treeview">
        <MudTreeView T="IDirectoryItem"
            Items="@(State.RootDirectoryItem.TreeItems)"
            @bind-SelectedValue="@State.SelectedFolder"
            MaxHeight="100%"
            ExpandOnDoubleClick="true"
            Dense="true"
            Width="100%">
          <ItemTemplate Context="item">
            <MudTreeViewItem T="IDirectoryItem"
                Items="@item.TreeItems"
                Value="item"
                Expanded="item.Expanded">

              <Content>

                @if (item.CanExpand) {
                  <MudTreeViewItemToggleButton Loading="item.Loading"
                     @bind-expanded="@item.Expanded"
                      Visible="@State.HasChildItems(item)"/>
                } else if (item is {CanExpand: false} and DirectoryItem<DirectoryNode>) {
                  <MudTreeViewItemToggleButton/>
                }

                <MudIcon Icon="@item.Icon"/>
                <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
                  <MudText Class="pl-2"
                      Style="justify-self: start;">
                    @item.Name
                  </MudText>
                  @if (item is DirectoryItem<FileNode>) {
                    <div style="justify-self: end;">

                      <MudIconButton Icon="@Icons.Material.Filled.OpenInBrowser"
                          OnClick="@(() => OpenFilePreview(item))"
                          Size="Size.Small"
                          Color="Color.Inherit"/>
                      <MudIconButton Icon="@Icons.Material.Filled.ContentCopy"
                          Size="Size.Medium"
                          Color="Color.Inherit"/>
                    </div>
                  }
                </div>
              </Content>

            </MudTreeViewItem>
          </ItemTemplate>
        </MudTreeView>

      </div>
    </div>
  </div>
}

@code{

  [Parameter(CaptureUnmatchedValues = true)]
  public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }
  private MudTreeView<IDirectoryItem> MudTreeRoot { get; set; } = new();



  protected override void OnInitialized() { State.StateChanged += AdminStateChanged; }
  private void AdminStateChanged() => StateHasChanged();
  public void Dispose() { State.StateChanged -= AdminStateChanged; }

  private async Task OpenFilePreview(IDirectoryItem item) {
    if (item is not DirectoryItem<FileNode> file) return;
    await State.OpenFilePreview(file.Item.Path);
  }

}
