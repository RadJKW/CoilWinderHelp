@inject AdminEditorState State
@implements IDisposable

<div @attributes="@AdditionalAttributes">

  <MudListSubheaderExtended T="string"
      DisableGutters="true"
      SecondaryBackground="true">
    <MudStack Row
        Spacing="6"
        AlignItems="AlignItems.Center"
        Justify="Justify.Center">
      <MudIcon Icon="@Icons.Material.Filled.DatasetLinked"/>
      <MudText Typo="Typo.h5">
        <strong >Winding Instructions</strong>
      </MudText>
    </MudStack>
  </MudListSubheaderExtended>
  <div class="directory-tree-view">
    <MudTreeView T="IDirectoryItem"
        MaxHeight="50%"
        ExpandOnDoubleClick="true"
        SelectedValueChanged="UpdateSelectedItem"
        Dense="true"
        Width="100%">
      <ChildContent>
        @{
          var rootItem = State.RootDirectoryItem;
          <MudTreeViewItem T="IDirectoryItem"
              Items="State.RootDirectoryItem.TreeItems.Select(x => x).Where(x => x is DirectoryItem<DirectoryNode>).ToHashSet()"
              Icon="@Icons.Material.Filled.FolderSpecial"
              Value="rootItem"
              Text="@rootItem.Name"
              Activated="@(rootItem == SelectedItem)"
              @bind-Selected="@rootItem.Selected"
              @bind-Expanded="@rootItem.Expanded"/>
        }
      </ChildContent>
      <ItemTemplate Context="item">
        <MudTreeViewItem T="IDirectoryItem"
            Items="@(item.TreeItems.Select(x => x).Where(x => x is DirectoryItem<DirectoryNode>).ToHashSet())"
            Value="@item"
            Expanded="@item.Expanded"
            ExpandedChanged="(expanded) => OnItemExpanded(item, expanded)">

          <Content>
            @if (item.CanExpand) {
              <MudTreeViewItemToggleButton Loading="item.Loading"
                  Expanded="@item.Expanded"
                  ExpandedChanged="(expanded) => OnItemExpanded(item, expanded)"
                  Visible="@State.HasFolders(item)"
                  ExpandedIcon="@Icons.Material.Filled.ChevronRight"
                  LoadingIcon="@Icons.Material.Filled.Loop"
                  LoadingIconColor="Color.Info"/>
            } else if (item is {CanExpand: false} and DirectoryItem<DirectoryNode>) {
              <MudTreeViewItemToggleButton/>
            }
            <MudIcon Icon="@item.Icon"/>
            <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
              <MudText Class="pl-2"
                  Style="justify-self: start;">
                @item.Name
              </MudText>
              @if (item is DirectoryItem<FileNode>) {
                <div style="justify-self: end;">

                  <MudIconButton Icon="@Icons.Material.Filled.OpenInBrowser"
                      OnClick="@(() => OpenFilePreview(item))"
                      Size="Size.Small"
                      Color="Color.Inherit"/>
                  <MudIconButton Icon="@Icons.Material.Filled.ContentCopy"
                      Size="Size.Medium"
                      Color="Color.Inherit"/>
                </div>
              }
            </div>
          </Content>

        </MudTreeViewItem>
      </ItemTemplate>

    </MudTreeView>
    <MudDivider DividerType="DividerType.FullWidth"
        Style="border-width: 10px; border-color: var(--mud-palette-surface); flex: 0;"/>
    <MudDivider DividerType="DividerType.FullWidth"
        Style="border-width: 10px; border-color: var(--mud-palette-background-grey); flex: 0;"/>

    <div class="mud-border-lines-default pb-4">

      @if (State.SelectedItem != null && !State.SelectedItem.HasFiles()) {
        <div class="align-center d-flex justify-center mx-auto"
            style="margin-top: 2rem;">
          <MudText Typo="Typo.h6">No Files in Current Directory</MudText>
        </div>
      }
      @if (State.SelectedItem?.GetFiles().Count() > State.PageItemsCount) {
        <div class="align-center d-flex flex-column justify-end pb-4">

          <MudPagination @bind-Selected="@State.CurrentPage"
              Color="Color.Secondary"
              Class="gap-0 mud-background-gray"
              BoundaryCount="2"
              MiddleCount="5"
              Count="State.GetPaginationCount()"/>
        </div>
      }

      <MudDropZone T="IDirectoryItem"
          Identifier="@State.SelectedItem?.DropZoneId"
          Class="d-flex flex-column gap-2 mt-1">
        <ItemRenderer Context="item">

          @{
            const string baseClass = "align-center d-flex justify-center mx-auto";
            var itemClass = baseClass + " " + item.Name switch {
              // if name ends with .pdf or .PDF
              var name when name.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase) => "mud-error-hover",
              var name when name.EndsWith(".mp4", StringComparison.OrdinalIgnoreCase) => "mud-info-hover",
              _ => "mud-success-hover"

              };
            <div class="@itemClass"
                style="width:80%; border:1px solid; padding-inline:10px;">

              <MudIcon Icon="@item.Icon"/>
              <div style="display: grid;grid-template-columns: 1fr auto;align-items: center;justify-content: stretch;width: 100%;gap: 2rem;">

                <MudText Class="pl-2"
                    Style="justify-self: start;">
                  @item.Name
                </MudText>

                <div style="justify-self: end;">

                  <MudIconButton Icon="@Icons.Material.Filled.OpenInBrowser"
                      OnClick="@(() => State.OpenFilePreview(item.Path))"
                      Size="Size.Small"
                      Color="Color.Inherit"/>
                  <MudIconButton Icon="@Icons.Material.Filled.ContentCopy"
                      Size="Size.Medium"
                      Color="Color.Inherit"/>
                </div>
              </div>
            </div>
          }
        </ItemRenderer>
      </MudDropZone>

    </div>

  </div>
</div>

@code{

  [Parameter(CaptureUnmatchedValues = true)]
  public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }
  private MudTreeView<IDirectoryItem> MudTreeRoot { get; set; } = new();
  private IDirectoryItem? SelectedItem { get => State.SelectedItem; set => State.SelectedItem = value; }



  protected override async Task OnInitializedAsync() {
    State.NavigateToRoot();
    State.StateChanged += AdminStateChanged;
    await base.OnInitializedAsync();
  }
  private void AdminStateChanged() => StateHasChanged();
  public void Dispose() { State.StateChanged -= AdminStateChanged; }

  private async Task OpenFilePreview(IDirectoryItem item) {
    if (item is not DirectoryItem<FileNode> file) return;
    await State.OpenFilePreview(file.Item.Path);
  }
  private async Task OnItemExpanded(IDirectoryItem item, bool expanded) {
  // prevents parent from collapsing when child or grandchild is selected


    if (item.Expanded != expanded) {
      item.Expanded = expanded;
      StateHasChanged();
      await InvokeFetchTreeItems(item);
    }
  }
  private async Task InvokeFetchTreeItems(IDirectoryItem item) {
    if (!item.TreeItems.Any()) {
      item.Loading = true;
      StateHasChanged();
      await Task.Delay(500);
      await item.FetchTreeItems();
      StateHasChanged();
      item.Loading = false;
      StateHasChanged();
    }
  }
  private Task UpdateSelectedItem(IDirectoryItem? arg) {
    if (arg is null) return Task.CompletedTask;
    if (arg == SelectedItem) return Task.CompletedTask;
    SelectedItem = arg;
    StateHasChanged();
    return Task.CompletedTask;
  }
  private async Task OpenExpansionPanel(bool expanded) {
    if (State.RootDirectoryItem.Expanded == expanded) return;

    var childrenExpanded = State.RootDirectoryItem.TreeItems.Any(x => x.Expanded);
    if (childrenExpanded) {
  // for the first click, collapse the children and not RootDirectoryItem
      await CollapseChildren(State.RootDirectoryItem);
      return;
    }
    if (!expanded) {
      await CollapseChildren(State.RootDirectoryItem);
      await Task.Delay(500);
      State.RootDirectoryItem.Expanded = expanded;
      return;
    }
    if (State.SelectedItem is null) {
      State.RootDirectoryItem.Expanded = expanded;
      StateHasChanged();
    } else {
      State.RootDirectoryItem.Expanded = expanded;
      await ExpandToSelected(State.RootDirectoryItem);
      StateHasChanged();
    }
  }
  private async Task CollapseChildren(IDirectoryItem stateRootDirectoryItem) {
    foreach (var item in stateRootDirectoryItem.TreeItems) {
      item.Expanded = false;
      await CollapseChildren(item);
    }
  }

  private async Task ExpandToSelected(IDirectoryItem stateRootDirectoryItem) {
  // use the path of the selectedItem to determine which parent or parents need to be expanded.
  // expand each parent.

    if (State.SelectedItem is null) return;

    var path = State.SelectedItem.Path;
    var pathParts = path.Split('\\');
    foreach (var part in pathParts) {
      var item = stateRootDirectoryItem.TreeItems.FirstOrDefault(x => x.Name == part);
      if (item is null) continue;
      if (item == State.SelectedItem) return;
      await OnItemExpanded(item, true);
      await ExpandToSelected(item);
    }
  }

}
