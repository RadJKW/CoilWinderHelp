@inherits LayoutComponentBase
@inject LayoutService LayoutService
@inject ILocalStorageService LocalStorage

@using Blazored.LocalStorage
@implements IDisposable

@*Theme="MyCustomTheme"*@

<MudThemeProvider
    @ref="@_mudThemeProvider"
    IsDarkMode="@LayoutService.IsDarkMode"
    IsDarkModeChanged="@(() => LayoutService.SetDarkMode(_mudThemeProvider!.IsDarkMode))"
    Theme="LayoutService.CurrentTheme"/>
<MudDialogProvider
    CloseOnEscapeKey="true"
    DisableBackdropClick="true"
    FullWidth="true"
    MaxWidth="MaxWidth.ExtraSmall"
    Position="DialogPosition.Center" />
<MudSnackbarProvider />
@Body




@code {
  private MudThemeProvider? _mudThemeProvider;

  protected override void OnInitialized()
  {
    LayoutService.MajorUpdateOccured += LayoutService_OnMajorUpdateOccured!;

    base.OnInitialized();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    await base.OnAfterRenderAsync(firstRender);

    if (firstRender) {
      LayoutService.SetBaseTheme(new());
      var themePalette = await LocalStorage.GetItemAsync<string>("theme.palette");
      var darkMode = themePalette is "dark" or null;

      LayoutService.SetDarkMode(darkMode );
    }

  }

  public void Dispose() {
    LayoutService.MajorUpdateOccured -= LayoutService_OnMajorUpdateOccured!;
  }

  private void LayoutService_OnMajorUpdateOccured(object sender, EventArgs e) => InvokeAsync(StateHasChanged);
}
