@inherits LayoutComponentBase

@*Theme="MyCustomTheme"*@
<MudThemeProvider
    @bind-IsDarkmode="@_isDarkMode"
    @ref="_mudThemeProvider"/>
<MudDialogProvider
    CloseOnEscapeKey="true"
    DisableBackdropClick="true"
    Position="DialogPosition.Center"/>
<MudSnackbarProvider/>

<MudLayout>


  <MudAppBar
      Elevation="0"
      Dense="true">
    <MudIconButton
        Color="Color.Inherit"
        Edge="Edge.Start"
        Icon="@Icons.Material.Filled.Menu"
        OnClick="@(_ => DrawerToggle())"/>
    <MudSpacer/>
    @*display the current PAGE TITLE *@

    <MudText
        Style="text-wrap: none"
        Typo="Typo.h6">
      @(PageTitle)
    </MudText>

    <MudSpacer/>
    <MudIconButton
        Color="Color.Inherit"
        Icon="@Icons.Custom.Brands.MudBlazor"
        Link="https://mudblazor.com/"
        Target="_blank">
    </MudIconButton>
    <MudIconButton
        Color="Color.Inherit"
        Disabled="_drawerDisabled"
        Icon="@Icons.Custom.Brands.GitHub"
        Link="https://github.com/MudBlazor/MudBlazor/"
        Target="_blank">
    </MudIconButton>
  </MudAppBar>



  <MudDrawer
      @bind-Open="_drawerOpen"
      Elevation="6"
      Variant="DrawerVariant.Temporary">
    <MudDrawerHeader>
      <MudText
          Typo="Typo.h6">
        MudBlazorTest
      </MudText>
    </MudDrawerHeader>
    <NavMenu/>
    <MudSpacer/>
    <MudDivider/>

    <MudSwitch
        @bind-Checked="@_isDarkMode"
        Class="justify-center"
        Color="Color.Primary"
        Label="Dark Mode"
        T="bool">
    </MudSwitch>
  </MudDrawer>
  <MudMainContent>
    <CascadingValue Value="this">
      @Body
    </CascadingValue>
  </MudMainContent>
</MudLayout>


@code {
  bool _drawerOpen;
  private bool _hideAppBar;
  private bool _isDarkMode = true;
  private MudThemeProvider? _mudThemeProvider;

  private string? _pageTitle;
  private bool _drawerDisabled;

  public bool DrawerDisabled
  {
    get => _drawerDisabled;
    set
    {
      _drawerDisabled = value;
      InvokeAsync(StateHasChanged);
    }
  }

  public string PageTitle
  {
    get => _pageTitle ?? "MudBlazorTest";
    set
    {
      _pageTitle = value;
      InvokeAsync(StateHasChanged);
    }
  }

  public void HidAppBar(bool hide)
  {
    _hideAppBar = hide;
    InvokeAsync(StateHasChanged);
  }

  void DrawerToggle() {
    if (_drawerDisabled) return;
    _drawerOpen = !_drawerOpen;
  }

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
      _isDarkMode = await _mudThemeProvider!.GetSystemPreference();
  // Navigator.NavigateTo("plcdashboard");
    }

  // StateHasChanged();
  }

  // after the route changes, update the page title
  protected override void OnParametersSet() {
  //var title = Navigator.Uri.Split('/').Last();
  //PageTitle = title == "plcdashboard" ? "PLC-Dashboard" : "MudBlazorTest";
  }

}