@page "/messengerHub"
@using Microsoft.AspNetCore.SignalR.Client
@layout DocViewLayout
@inject HubClientService HubClientService
@inject ISnackbar Snackbar

<MudGrid Class="align-center align-stretch d-flex justify-center pa-6">
  <MudItem xs="6">
    <MudPaper Class="pa-4">
      <MudForm >
        <MudTextField T="string"
            Label="User"
            @bind-Value="_userInput"
            Variant="Variant.Outlined">
        </MudTextField>

        <MudTextField T="string"
            Label="Message"
            @bind-Value="@_messageInput"
            Variant="Variant.Outlined">
        </MudTextField>
        <div class="align-center d-flex justify-end pt-4 px-4">
          <MudButton Variant="Variant.Outlined"
              Color="Color.Success"
              OnClick="@(() => InvokeAsync(Send))"
              Disabled="!IsConnected">
            Send
          </MudButton>
        </div>
      </MudForm>
    </MudPaper>
  </MudItem>
  <MudItem xs="6">
    <MudPaper Class="mud-height-full pa-4">
      <MudGrid>
        <MudItem xs="12">
          @{ var allMessagesCount = _userMessages.Sum(x => x.Messages.Count); }
          <MudText Class="mud-width-full"
              Typo="Typo.subtitle2">
            @($"Messages : ({allMessagesCount})")
          </MudText>
        </MudItem>
        @foreach (var user in _userMessages.Where(x => x.Messages.Count > 0)) {
          foreach (var message in user.Messages) {
            <MudItem xs="12"
                Class="d-flex justify-start px-0">
              <MudText Class=""
                  Color="@Color.Error">
                @message
              </MudText>
            </MudItem>
            <MudDivider/>
          }
        }

      </MudGrid>
    </MudPaper>
  </MudItem>
</MudGrid>

@* <MudList> *@
@*   @foreach (var message in _messages) { *@
@*     <MudListItem> *@
@*       <MudText>@message</MudText> *@
@*     </MudListItem> *@
@*   } *@
@* </MudList> *@

@code {

  private class ChatMessage {
    public string? User { get; init; }
    public List<string> Messages { get; init; } = new();
  }



  private HubConnection? _hubConnection;
  private string _userInput = "JKW";
  private string _messageInput = string.Empty;
  private readonly List<ChatMessage> _userMessages = new();

  protected override async Task OnInitializedAsync() {
    _hubConnection = HubClientService.GetHubConnection(HubServers.ChatHub);
    HubClientService.NewChatMessage += HubClientService_NewChatMessage;
    await base.OnInitializedAsync();
  }

  private void HubClientService_NewChatMessage(string arg1, string arg2) {
    var user = _userMessages.FirstOrDefault(x => x.User == arg1);
    if (user is not null) {
      user.Messages.Add(arg2);
    } else {
      _userMessages.Add(new ChatMessage {
        User = arg1,
        Messages = new() {
          arg2
        }
      });
    }
  }

  private async void Send() {
    if (_hubConnection != null)
      await _hubConnection.InvokeAsync("SendMessage", _userInput, _messageInput);
  }

  private bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;
}
