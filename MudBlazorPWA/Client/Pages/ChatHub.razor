@page "/messengerHub"
@layout DocViewLayout
@inject HubClientService HubClientService
@inject ISnackbar Snackbar
@using Microsoft.AspNetCore.SignalR.Client
@implements IDisposable

<MudGrid Class="align-center align-stretch d-flex justify-center pa-6">
  <MudItem xs="6">
    <MudPaper Class="pa-4">
      <MudForm >
        <MudTextField T="string"
            Label="User"
            @bind-Value="UserInput"
            Variant="Variant.Outlined">
        </MudTextField>

        <MudTextField T="string"
            Label="Message"
            @bind-Value="MessageInput"
            Variant="Variant.Outlined">
        </MudTextField>
        <div class="align-center d-flex justify-end pt-4 px-4">
          <MudButton Variant="Variant.Outlined"
              Color="Color.Success"
              OnClick="@(() => { _hubConnection!.SendAsync("SendMessage", UserInput, MessageInput, null); MessageInput = string.Empty; })"
              Disabled="@(!IsConnected)">
            Send
          </MudButton>
        </div>
      </MudForm>
    </MudPaper>
  </MudItem>
  <MudItem xs="6">
    <MudPaper Class="mud-height-full pa-4">
          <MudGrid>
            <MudItem xs="12">
              @{
                int allMessagesCount = _messages.Count;
              }
              <MudText Class="mud-width-full"
                  Typo="Typo.subtitle2">
                @($"Messages : ({allMessagesCount})")
              </MudText>
            </MudItem>
            @foreach ((string user, string message) entry in _messages) {

              <MudItem xs="12">
                <MudPaper Class="pa-4 mud-background-gray">
                  <MudGrid>
                    <MudItem xs="12">
                      <MudText Class="mud-width-full"
                          Typo="Typo.subtitle2">
                        @entry.user
                      </MudText>
                    </MudItem>
                    <MudItem xs="12">
                      <MudText Class="pl-8 mud-width-full"
                          Typo="Typo.subtitle2">
                        @entry.message
                      </MudText>
                    </MudItem>
                  </MudGrid>
                </MudPaper>
              </MudItem>
            }

          </MudGrid>
        </MudPaper>

  </MudItem>
</MudGrid>

@* <MudList> *@
@*   @foreach (var message in _messages) { *@
@*     <MudListItem> *@
@*       <MudText>@message</MudText> *@
@*     </MudListItem> *@
@*   } *@
@* </MudList> *@

@code {
  private HubConnection? _hubConnection;
  private string UserInput { get; set; } = string.Empty;
  private string MessageInput { get; set; } = string.Empty;
  private readonly List<(string user, string message)> _messages = new();

  private bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;

  protected override async Task OnInitializedAsync() {
    _hubConnection = HubClientService.GetHubConnection(HubServers.ChatHub);
    HubClientService.NewChatMessage += (sender, args) => {
      _messages.Add((sender, args));
      Snackbar.Add($"New message from {sender}");
      StateHasChanged();
    };
    await base.OnInitializedAsync();
  }

  public void Dispose() {
    Snackbar?.Dispose();
  }
}
