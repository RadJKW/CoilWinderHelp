@inject OperatorState OperatorState
@layout DocViewLayout
@inject NavigationManager NavigationManager
@using System.Diagnostics.CodeAnalysis
@implements IDisposable

<MudDialog ClassContent="pa-0">
  <DialogContent>

    <MudStack Class="mud-width-full"
        Spacing="2">
      <div class="align-center border-b d-flex justify-start mud-border-lines-default mud-width-full">

        <MudText Class="ml-4 my-1"
            Align="Align.Start"
            Typo="Typo.h5">
          Employee Login
        </MudText>
        <MudSpacer/>
        <MudToggleIconButton Toggled="@_enableOnScreenKeyboard"
            ToggledChanged="OnToggleKeyboard"
            Color="Color.Primary"
            ToggledColor="Color.Error"
            Icon="@Icons.Material.Filled.KeyboardAlt"
            ToggledIcon="@Icons.Material.Filled.KeyboardHide"/>
      </div>
      <div class="mx-2">

        <MudPaper Class="align-center mud-background-gray mx-auto pa-0"
            Width="100%">
          @{
            var inputStyle = string.Empty;
            if (_validEmployee is not null)
              inputStyle = "background: rgb(40 205 40 / 0.2)";
          }
          <MudTextField T="string"
              @ref="@_employeeNumberInput"
              Style="@inputStyle"
              InputMode="InputMode.numeric"
              Variant="Variant.Filled"
              Label="Badge Number"
              @bind-Value="@_employeeNumber"
              MaxLength="5"
              Text="@_employeeNumber"
              Clearable="true"
              OnClearButtonClick="ClearInput"
              OnKeyUp="HandleKeyUp"
              @onclick="ShowHideKeyboard"
              Immediate="true"
              AutoFocus="true"
              KeyUpPreventDefault="true"
              Validation="@(new Func<string, IEnumerable<string>>(ValidateEmployeeNumber))"
              OnlyValidateIfDirty="true"/>
          <MudPopover Open="@_isOpen"
              AnchorOrigin="Origin.BottomCenter"
              TransformOrigin="Origin.TopCenter"
              OverflowBehavior="OverflowBehavior.FlipNever"
              Elevation="5"
              Class="pa-0 border mud-border-dark"
              RelativeWidth="true">
            <MudGrid Spacing="1" Class="pa-2"
                Justify="Justify.Center">
              @for (int i = 1; i <= 9; i++) {
                var number = i;
                <MudItem xs="4"
                    Class="d-flex justify-center">
                  <MudButton Class="py-1"
                      FullWidth="true"
                      Size="Size.Medium"
                      Variant="Variant.Outlined"
                      Color="Color.Info"
                      OnClick="@(() => AppendNumber(number))">
                    @number
                  </MudButton>
                </MudItem>
              }
              <MudItem xs="5"
                  Class="d-flex justify-end">
                <MudButton Class="py-1"
                    Size="Size.Medium"
                    FullWidth="true"
                    Variant="Variant.Outlined"
                    Color="Color.Info"
                    OnClick="@(() => AppendNumber(0))">
                  0
                </MudButton>
              </MudItem>
              <MudItem xs="5"
                  Class="d-flex justify-start">
                <MudIconButton Class="mud-width-full pa-0"
                    Size="Size.Medium"
                    Variant="Variant.Outlined"
                    Color="Color.Error"
                    Icon="@Icons.Material.Filled.Backspace"
                    OnClick="@(DeleteLastNumber)"/>
              </MudItem>
            </MudGrid>

          </MudPopover>
          @if (_validEmployee is not null && _isOpen is false) {
            <MudTextField T="string"
                Label="Name"
                Variant="Variant.Filled"
                @bind-Value="_validEmployee.EmployeeInfo.EmployeeName"
                ReadOnly="true"/>
            <MudTextField T="string"
                Variant="Variant.Filled"
                @bind-Value="_validEmployee.EmployeeInfo.SupervisorNumber"
                Label="Supervisor"
                ReadOnly="true"/>
            <MudTextField T="string"
                Label="Status"
                Variant="Variant.Filled"
                @bind-Value="_validEmployee.EmployeeInfo.EmployeeStatus"
                ReadOnly="true"/>
            <MudTextField T="string"
                Variant="Variant.Filled"
                Label="Department"
                @bind-Value="_validEmployee.EmployeeInfo.EmployeeDepartment"
                ReadOnly="true"/>
          }
        </MudPaper>
      </div>
    </MudStack>

  </DialogContent>
  <DialogActions>
    <MudButton Variant="Variant.Filled"
        Color="Color.Success"
        Disabled="@(_validEmployee is null)"
        OnClick="Submit">
      Login
    </MudButton>
    <MudButton Variant="Variant.Filled"
        Color="Color.Warning"
        Disabled="@string.IsNullOrEmpty(_employeeNumber)"
        OnClick="ResetForm">
      Clear
    </MudButton>
  </DialogActions>
</MudDialog>

@code {

  [CascadingParameter, AllowNull]
  MudDialogInstance MudDialog { get; set; }
  private MudTextField<string> _employeeNumberInput = default!;
  private string _employeeNumber = string.Empty;
  private Employee? _validEmployee;
  private CancellationTokenSource? _cancellationTokenSource;
  private bool _isOpen = true;
  private bool _enableOnScreenKeyboard = true;



  protected override async Task OnParametersSetAsync() { await base.OnParametersSetAsync(); }
  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();
    OperatorState.OperatorLoggedIn += OnOperatorLoggedIn;
  }

  private void OnOperatorLoggedIn() {
    Console.WriteLine($"Operator {OperatorState.CurrentEmployee?.EmployeeInfo.EmployeeNumber} logged in");
    if (OperatorState.CurrentEmployee is not null)
      NavigationManager.NavigateTo("/");
  }

  private async Task ValidateEmployee() {
    var employeeId = _employeeNumber.Length == 4
      ? "0" + _employeeNumber
      : _employeeNumber;

    var employee = await OperatorState.ValidateEmployee(employeeId);
    _validEmployee = employee ?? null;
    if (_validEmployee is not null) {
      _isOpen = false;
      StateHasChanged();
    }
      await _employeeNumberInput.Validate();
  }

  private async Task HandleKeyUp(KeyboardEventArgs arg) {
    if (_employeeNumber != _validEmployee?.EmployeeInfo.EmployeeNumber) {
      _validEmployee = null;
      StateHasChanged();
    }
    if (_employeeNumber.Length < 4) return;
    _cancellationTokenSource?.Cancel();
    _cancellationTokenSource = new();
    Console.WriteLine($"Key Up: {arg.Key}; {_employeeNumber}");
    switch (_employeeNumber.Length) {
      case 4:
        await Task.Delay(1000, _cancellationTokenSource.Token).ContinueWith(async t => {
          if (!t.IsCanceled) {
            await ValidateEmployee();
          }
          Console.WriteLine($"Task Delay: {t.Status}");
        });
        break;
      case 5:
        await ValidateEmployee();
        break;
    }
  }

  private async Task AppendNumber(int number) {
    if (_employeeNumber.Length >= 5) return;
    _employeeNumber += number.ToString();
    await HandleKeyUp(new() {
      Key = number.ToString()
    });
  }

  public void Dispose() {
    _cancellationTokenSource?.Cancel();
    OperatorState.OperatorLoggedIn -= OnOperatorLoggedIn;
    Cancel();
  }
  private void DeleteLastNumber() {
    switch (_employeeNumber.Length) {
      case 0: return;
      case 4 or 5: {
        _validEmployee = null;
        _employeeNumberInput.ResetValidation();
      }
        break;
    }
    _employeeNumber = _employeeNumber.Remove(_employeeNumber.Length - 1);
  }
  private void ShowHideKeyboard() {
    if (_enableOnScreenKeyboard is false) {
      _isOpen = false;
      return;
    }
    _isOpen = true;
    _employeeNumberInput.FocusAsync();
    StateHasChanged();
  }
  private void ResetForm() {
    _employeeNumber = string.Empty;
    _validEmployee = null;
  }
  private void Submit() {
    OperatorState.CurrentEmployee = _validEmployee;
    MudDialog.Close(DialogResult.Ok(true));
    NavigationManager.NavigateTo("/");
  }
  private void Cancel() => MudDialog.Cancel();

  private async void ClearInput() {
    _isOpen = false;
    _validEmployee = null;
    OperatorState.CurrentEmployee = null;
   _employeeNumberInput.ResetValidation();
    await _employeeNumberInput.ResetAsync();
    _employeeNumber = string.Empty;
    await _employeeNumberInput.FocusAsync();
  }
  private IEnumerable<string> ValidateEmployeeNumber(string arg) {
    // if the length is less than 4, invalid;
    // else if _validEmployee is not null, valid;
    // else if _validEmployee is null, invalid;

    if (arg.Length < 4) {
      yield return "Employee Number must be 4 digits";
    }
    else if (_validEmployee is null) {
      yield return "Employee Number is invalid";
    }
  }

  private void OnToggleKeyboard(bool toggled) {
    _enableOnScreenKeyboard = toggled;
   ShowHideKeyboard();
  }
}
