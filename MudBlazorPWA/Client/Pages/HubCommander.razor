@page "/HubCommander"
@using Microsoft.AspNetCore.SignalR.Client
@layout DocViewLayout
@inject HubClientService HubClientService
<div class="d-flex justify-center mud-width-full">
  <MudPaper id="hub-paper"
      Elevation="4"
      Class="ma-6 pa-6">
    <div class="paper-header align-center d-flex gap-6 flex-wrap justify-start py-6">

      <MudText Align="Align.Start"
          Typo="Typo.h3">
        Notify Clients
      </MudText>

      <MudRadioGroup @bind-SelectedOption="@SelectedRadio"
          Class="mud-elevation-4 px-4 rounded-t-lg">
        <MudRadio Option="@((int)HubServers.ChatHub)"
            Color="Color.Info"
            UnCheckedColor="Color.Default">
          <MudText Style="@($"color:{Colors.LightBlue.Darken1}; ")">
            @HubServers.ChatHub.ToString()
          </MudText>
        </MudRadio>
        <MudRadio Option="@((int)HubServers.DirectoryHub)"
            Color="Color.Success"
            UnCheckedColor="Color.Default">
          <MudText Style="@($"color:{Colors.Green.Darken1}; ")">
            @HubServers.DirectoryHub.ToString()
          </MudText>
        </MudRadio>
        <MudRadio Option="99"
            Color="Color.Error"
            UnCheckedColor="Color.Default">
          <MudText Style="@($"color:{Colors.DeepOrange.Accent2}; ")">
            None
          </MudText>
        </MudRadio>
      </MudRadioGroup>

    </div>
    <MudDivider/>
    <MudSelect T="string"
        Label="Callback Method"
        Disabled="CheckForValidHubConnection"
        @bind-Value="_selectedCallbackMethod">
      @if (CallbackMethods != null) {
        foreach (string? method in CallbackMethods) {
          <MudSelectItem Value="@method"/>
        }
      }
    </MudSelect>

    <MudSelect T="string"
        Disabled="CheckForValidHubConnection"
        Label="Connected Clients"
        @bind-Value="_selectedGroup">
      @foreach (string? client in _connectedClients) {
        <MudSelectItem T="string"
            Value="@client">
          @client
        </MudSelectItem>
      }
    </MudSelect>

    @if (WindingCodes != null && SelectedRadio == (int)HubServers.DirectoryHub) {
      <div class="d-flex align-center gap-2 justify-space-evenly">
        <MudPaper Width="100px"
            Class="my-auto"
            Outlined="true">
          <MudText Align="Align.Center">
            @(_selectedWindingCode != null ? _selectedWindingCode.Code : "Code Not Selected")
          </MudText>
        </MudPaper>


        <WindingStopCodeReel TValue="WindingCode"
            WindingStopCodes="@WindingCodes"
            OnCodeSelected="@((code => _selectedWindingCode = code))"/>
      </div>
    }
    <div class="pa-4">
      <MudButton Color="Color.Primary"
          Disabled="IsNotifyDisabled"
          Variant="Variant.Filled"
          OnClick="NotifyClients">
        Notify Clients
      </MudButton>
    </div>
  </MudPaper>
</div>

@code {
  private HubConnection? _hubConnection;
  private List<string>? CallbackMethods { get; set; }
  private IEnumerable<WindingCode>? WindingCodes { get; set; }
  private string _selectedCallbackMethod = string.Empty;
  private string _selectedGroup = string.Empty;
  private readonly List<string> _connectedClients = new();
  private int _selectedRadio = 99;
  private WindingCode? _selectedWindingCode;
  private int SelectedRadio {
    get => _selectedRadio;
    set {
      _selectedRadio = value;
      _ = SetHubConnection();
    }
  }

  private bool CheckForValidHubConnection => _hubConnection == null;
  /*&& string.IsNullOrEmpty(_selectedCallbackMethod)
    && string.IsNullOrEmpty(_selectedGroup);*/


  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();
  }

  private async Task SetHubConnection() {
    // clear any of the selected values from callback and clients select
    _selectedCallbackMethod = string.Empty;
    _selectedGroup = string.Empty;
    _selectedWindingCode = null;
    _connectedClients.Clear();

    if (SelectedRadio == 99) {
      _hubConnection = null;
      return;
    }

    _hubConnection = SelectedRadio switch {
      (int)HubServers.ChatHub
        => HubClientService.GetHubConnection(HubServers.ChatHub),
      (int)HubServers.DirectoryHub
        => HubClientService.GetHubConnection(HubServers.DirectoryHub),
      _ => null
      };

    if (_hubConnection == null) {
      return;
    }

    var connectedGroups =
      await _hubConnection
        .InvokeAsync<List<string>>("GetConnectedClients");
    _connectedClients
      .AddRange(connectedGroups);

    CallbackMethods =
      await _hubConnection
        .InvokeAsync<List<string>>("GetCallbackMethods");

    if (SelectedRadio == (int)HubServers.DirectoryHub) {
      WindingCodes = await _hubConnection.InvokeAsync<IEnumerable<WindingCode>?>("GetWindingCodes", Division.D1);
      StateHasChanged();
    }
  }


  protected override async Task OnAfterRenderAsync(bool firstRender) {
    await base.OnAfterRenderAsync(firstRender);

    if (firstRender) {
      await SetHubConnection();
    }
  }
  private bool IsNotifyDisabled => CanNotifyClients();

  private bool CanNotifyClients() {
    return SelectedRadio switch {
      (int)HubServers.ChatHub
        => string.IsNullOrEmpty(_selectedCallbackMethod) || string.IsNullOrEmpty(_selectedGroup) || _hubConnection == null,
      (int)HubServers.DirectoryHub
        => string.IsNullOrEmpty(_selectedCallbackMethod) || _hubConnection == null || _selectedWindingCode == null,
      _
        => true
      };
  }

  private async Task NotifyClients() {
    switch (SelectedRadio) {
      case (int)HubServers.ChatHub:
        await NotifyChatHub();
        break;
      case (int)HubServers.DirectoryHub:
        await NotifyDirectoryHub();
        break;
    }
  }

  private async Task NotifyChatHub() {
    if (string.IsNullOrEmpty(_selectedCallbackMethod) ||
        string.IsNullOrEmpty(_selectedGroup) ||
        _hubConnection == null) {
      return;
    }

    if (!string.IsNullOrEmpty(_selectedGroup)) {
      await _hubConnection
        .InvokeAsync(
          _selectedCallbackMethod,
          "commander",
          "sent from page",
          _selectedGroup);
    }
  }

  private async Task NotifyDirectoryHub() {
  // if _selectedCallbackMethod is null, return.

    if (string.IsNullOrEmpty(_selectedCallbackMethod))
      return;

    if (_selectedCallbackMethod == "UpdateCurrentWindingStop" && _selectedWindingCode != null) {
      HubClientService.SetCurrentCoilWinderStop(_selectedWindingCode);
      await HubClientService.SendChatMessage("commander", "updated current winding stop");
    }

    if (_selectedCallbackMethod == "UpdateCurrentWindingStop" && _selectedWindingCode == null) {
      await HubClientService.SendChatMessage("commander", "no winding stop selected");
    }
  }
}
