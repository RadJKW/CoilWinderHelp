@page "/instructions-viewer"
@using HtmlAgilityPack
@inject IHttpClientFactory ClientFactory

<h1>File Explorer</h1>


<!-- Breadcrumb -->
<div class="py-2 border-bottom border-dark">
    @foreach (var folder in Breadcrumb!)
    {
            <MudButton  Class="py-1" OnClick="@(() => GoToParentFolder(folder))" Variant="Variant.Outlined" Size="Size.Small">@folder.Name</MudButton>
            <span class="px-1">/</span>
    }        
    @if (IsFileVisible)
    {
        <MudButton OnClick="@(CloseFile)" Color="Color.Error" Variant="Variant.Filled" Size="Size.Small">Close</MudButton>
    }
</div>

<!-- Navigation buttons -->
<div class="my-2">
    @if (!IsFileVisible)
    {

        @foreach (var folder in CurrentFolder!.SubFolders.Where(folder => folder!.Name is not ".."))
        {
                <MudButton OnClick="@(() => GoToFolder(folder))" Variant="@Variant.Outlined" Color="@Color.Secondary">@folder!.Name</MudButton>
        }


        @foreach (var file in CurrentFolder.Files.Where(file => !IsFileVisible))
        {
                <MudButton OnClick="@(() => ViewFile(file))" Variant="@Variant.Filled" Color="@Color.Info">@file.Replace("%20", " ")</MudButton>
        }
    }
</div>


<!-- File view -->
@if (CurrentFile != null)
{
    <!-- PDF Viewer -->
        <!-- Make the pdf viewer fill the remainder of the pages height --> 
    @if (IsFileVisible)
    {
        <div class="col-10 mx-auto d-flex justify-center pt-4" style="height: calc(100vh - 25vh)">

            @if (PdfViewer is null)
            {

                @MediaPlayer
            }                



            @if (MediaPlayer is null)
            {
                @PdfViewer
            }

        </div>

    }


}

@code {

    // the HttpClient used by this component
    private HttpClient? FileServer { get; set; }
    // The base folder of the file directory
    private Folder? BaseFolder { get; set; }
    // The current folder that the user is viewing
    private Folder? CurrentFolder { get; set; }
    // The breadcrumb of folders leading to the current folder
    private List<Folder>? Breadcrumb { get; set; }
    // The file that the user is currently viewing, or null if no file is being viewed
    private string? CurrentFile { get; set; }
    private bool IsFileVisible { get; set; }

    private string? FileServerResponse { get; set; }

    // private string? HttpDirectoryNavigationUrl { get; set; }

    private RenderFragment? PdfViewer { get; set; }
    private RenderFragment? MediaPlayer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        FileServer = ClientFactory.CreateClient("MacServer");
        BaseFolder = new Folder("Winding Practices", "/");
        Breadcrumb = new List<Folder>();
        await GoToFolder(BaseFolder);

    }

    private void ViewFile(string file)
    {
        // Set the current file and visibility
        CurrentFile = file;
        IsFileVisible = true;

        var fileUrl = $"{FileServer!.BaseAddress}{CurrentFolder!.Path}/{file}";
        // Create the PDF viewer
        // get the file type of the file by extracting the file extension from the end file

        var fileType = file.Split('.').Last();
        switch (fileType)
        {
            case "pdf":
                {
                    PdfViewer = @<iframe src="@(fileUrl)" width="100%" height="100%"></iframe>;
                    MediaPlayer = null;
                    break;
                }
            case "mp4":
                {
                    PdfViewer = null;
                    MediaPlayer = @<video style="object-fit: fill;)" controls="controls" buffered="true" preload="auto">
                            <source src="@fileUrl" type="video/mp4"/>
    </video>;
                    break;
                }

        }

    }

    private void CloseFile()
    {
        // Clear the current file and visibility
        CurrentFile = null;
        IsFileVisible = false;
    }

    private async Task GoToFolder(Folder? folder)
    {
        CurrentFolder = folder;
        Breadcrumb!.Add(folder!);
        var response = await FileServer!.GetAsync(CurrentFolder!.Path);
        FileServerResponse = await response.Content.ReadAsStringAsync();
        ParseFolder(folder, FileServerResponse);
    }

    private static void ParseFolder(Folder? folder, string html)
    {

        // add a guard to prevent a folder from being parsed twice
        if (folder!.SubFolders.Count > 0 || folder.Files.Count > 0)
        {
            return;
        }

        var doc = new HtmlDocument();
        doc.LoadHtml(html);

        var ul = doc.DocumentNode.SelectSingleNode("//ul");
        foreach (var li in ul.ChildNodes)
        {
            if (li.Name != "li")
                continue;

            var link = li.SelectSingleNode("a");
            var name = link.InnerText.Replace("&#47;", "").Replace("#38;", "");
            var path = link.GetAttributeValue("href", "");

            if (path.EndsWith("&#47;"))
            {
                path = path.Replace("&#47;", "/");
                folder.AddSubFolder(new Folder(name, path));
            }
            else
            {
                if (!path.EndsWith(".pdf") && !path.EndsWith(".mp4"))
                    continue;

                folder.AddFile(name);
            }
        }
    }

    private Task GoToParentFolder(Folder? folder)
    {
        var index = Breadcrumb!.IndexOf(folder!);
        Breadcrumb.RemoveRange(index + 1, Breadcrumb.Count - index - 1);
        CurrentFolder = folder;
        //InvokeAsync(StateHasChanged);
        return Task.CompletedTask;
    }

    public class Folder
    {
        public string Name { get; set; }
        public string Path { get; set; }
        public List<Folder?> SubFolders { get; set; }
        public List<string> Files { get; set; }

        public Folder(string name, string? path = null)
        {
            Name = name;
            Path = path ?? name;
            SubFolders = new List<Folder?>();
            Files = new List<string>();
        }

        public void AddSubFolder(Folder? folder)
        {
            SubFolders.Add(folder);
        }

        public void AddFile(string fileName)
        {
            Files.Add(fileName);
        }
    }




}


