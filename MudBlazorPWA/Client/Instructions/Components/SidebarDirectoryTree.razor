@using Microsoft.AspNetCore.SignalR.Client
@inject HubClientService DirectoryHub
@implements IDisposable
<div
    class="directory-tree">

  <MudPaper
      Class="tree-paper mud-background-gray">
    @*TODO:MudTreeView causes UI to stutter when Expanded Folder has MANY children. Only on Windows Hosting No issue with Macbook using localhost *@
    <MudTreeView
        id="directory-tree-list"
        ServerData="LoadServerData"
        Items="TreeItems"
        ExpandOnClick="true"
        Color="Color.Primary"
        Hover="true"
        Dense="true"
        >
      <ItemTemplate>
        <MudTreeViewItem
            Class="@(context.CanExpand ? "folder" : "file")"
            Value="@context"
            bind-Activated="@(context == SelectedNode)"
            Icon="@context.Icon"
            LoadingIconColor="Color.Info"
            CanExpand="@context.CanExpand"
            Text="@context.Title"
            EndText="@context.Number?.ToString()"
            EndTextTypo="@Typo.caption"
            OnClick="@(() => NotifyFileSelected(context))">
        </MudTreeViewItem>
      </ItemTemplate>
    </MudTreeView>
  </MudPaper>
</div>

@code{
  protected virtual HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();
  private TreeItemData? SelectedNode { get; set; }


  protected override async Task OnInitializedAsync() {
    await InitializeDirectoryHub();
  }


  private async Task InitializeDirectoryHub() {
    DirectoryHub.ReceiveFolderContent += OnReceiveFolderContent;
    await DirectoryHub.Hub!.InvokeAsync("GetFolderContent", null);

  }
  private void OnReceiveFolderContent(string path, string[]? files, string[]? folders ) {
    if (SelectedNode == null) {
      TreeItems.Clear();
    } else {
      SelectedNode.TreeItems.Clear();
    }

    ConvertToTreeItems(
      folders: folders,
      SelectedNode
      );
    StateHasChanged();
  }

  private void ConvertToTreeItems(string[]? folders, TreeItemData? selectedNode = null) {
    if (folders == null)
      return;

    foreach (var folder in folders) {
      var folderTitle = GetLastIndexOf(folder);
      var newNode = new TreeItemData(
        title: folderTitle,
        path: folder,
        icon: Icons.Material.Outlined.Folder,
        number: null,
        canExpand: true);
      if (selectedNode == null) {
        TreeItems.Add(newNode);
      } else {
        var nodeTitle = newNode.Title.Replace(selectedNode.Title + "\\", "");
        newNode.Title = nodeTitle;
        newNode.CanExpand = TreeItems.Any(IsFolder);
        selectedNode.TreeItems.Add(newNode);
      }
    }
  }

  private static string GetLastIndexOf(string path) {
    return path.Contains("\\") ?
      path
        [(path.LastIndexOf("\\", StringComparison.Ordinal) + 1)..]
      : path
        [(path.LastIndexOf("/", StringComparison.Ordinal) + 1)..];
  }

  private async Task NotifyFileSelected(TreeItemData node) {
    switch (node.CanExpand) {
      case false when DirectoryHub != null:
        await DirectoryHub.Hub!.InvokeAsync("FileSelected", node.Path);
        break;
      case true:
        SelectedNode = node;
        break;
    }
  }

  private static bool IsFolder(TreeItemData node) {
    return node.Type != TreeItemData.ItemType.File;
  }

  protected virtual async Task<HashSet<TreeItemData>> LoadServerData(TreeItemData parentNode) {
    var currentPath = parentNode.Path;
    await DirectoryHub.Hub!.InvokeAsync("GetFolderContent", currentPath);
    SelectedNode = parentNode;
  // find the parent node in _mudTreeView and set Activated to true
    return parentNode.TreeItems;
  }

  public void Dispose() {
    DirectoryHub.ReceiveFolderContent -= OnReceiveFolderContent;
  }


}
