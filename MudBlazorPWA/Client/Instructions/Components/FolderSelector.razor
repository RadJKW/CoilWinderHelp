@inject HubClientService DirectoryHubClient
@inject ILogger<FolderSelector> Logger
@inject IJSRuntime JSRuntime
<MudStack id="folder-selector"
    Spacing="0"
    Class="mud-height-full">

  <MudListExtended T="Folder"
      @ref="SelectableFolders"
      Dense
      Clickable
      DisablePadding
      Class="border-2 border-solid folder-list mud-border-lines-default mud-width-full rounded-lg"
      MultiSelection="false"
      @bind-SelectedItem="SelectedItem"
      @bind-SelectedValue="SelectedValue">
    <MudListSubheaderExtended T="Folder"
        Class="border-b border-solid mud-border-lines-default mud-width-full py-2"
        Sticky="true"
        SecondaryBackground="true">
      @if (_breadCrumbs.Count >= 1) {
        var baseFolder = _breadCrumbs.FirstOrDefault();
        if (baseFolder == null)
          return;

        <MudStack Row
            Spacing="1"
            Justify="Justify.FlexStart"
            AlignItems="AlignItems.Center">
          <MudTooltip Text="@($"{baseFolder.Name}")"

              Arrow="true"
              Placement="Placement.Top">
            <MudIconButton Icon="@Icons.Material.Outlined.Home"
                Disabled="@(_breadCrumbs.Count == 1)"
                Color="Color.Primary"
                Size="Size.Small"
                Variant="Variant.Text"
                OnClick="@(() => SetFolderAsRoot(baseFolder))"/>
          </MudTooltip>
          @if (_breadCrumbs.Count >= 3) {
            int currentFolderIndex = _breadCrumbs.IndexOf(_breadCrumbs.Last());
            var parentFolder = _breadCrumbs[currentFolderIndex - 1];
            if (parentFolder == null)
              return;

            <strong>/</strong>
            <MudTooltip Text="@($"{parentFolder.Name}")"
                Arrow
                ShowOnHover
                Placement="Placement.Top">
              <MudChip Color="Color.Default"
                  Class="px-1"
                  Size="Size.Small"
                  Variant="Variant.Text"
                  Text="@parentFolder.Name"
                  OnClick="@(() => SetFolderAsRoot(parentFolder))">
              </MudChip>
            </MudTooltip>
          }
          @if (_breadCrumbs.Any()) {
            var currentFolder = _breadCrumbs.Last();
            <strong class="px-1">/</strong>
            <strong>@(currentFolder?.Name)</strong>
          }
        </MudStack>
      }
    </MudListSubheaderExtended>
    <div class="d-flex flex-column mud-background-gray mud-height-full mud-width-full">
      @if (RootFolder != null) {
        var hasSubFolders = false;
        var hasPdfs = false;
        var hasVideos = false;
        <div class="folder-item-flex-container">

          @foreach (var folder in RootFolder.SubFolders.OrderBy(f => f.Name)) {
            if (folder.MediaFiles.PdfFiles != null)
              hasPdfs = folder.MediaFiles.PdfFiles.Any();

            if (folder.MediaFiles.VideoFiles != null)
              hasVideos = folder.MediaFiles.VideoFiles.Any();

            hasSubFolders = folder.SubFolders.Any();
            if (!hasSubFolders && !hasPdfs && !hasVideos) {
              continue;
            }
            <MudListItemExtended T="Folder"
                Class="folder-list-item"
                Dense="true"
                IconSize="@Size.Small"
                Icon="@Icons.Material.Filled.Folder"
                Text="@(folder.Name)"
                Value="folder"
                OnClick="SetFolderAsRoot"/>
          }
          @if (!hasSubFolders && !hasPdfs && !hasVideos) {
            <MudListItemExtended T="string"
                Style="background-color: var(--mud-palette-surface);"
                SecondaryText="End of Directory Tree">

            </MudListItemExtended>
          }
        </div>
        <div class="mud-list-drop-content"
            style="background-color:var(--mud-palette-surface);">
          <MudListSubheaderExtended T="string"
              Class="border-solid border-t mud-border-lines-default py-2"
              Style="top: 0;"
              Sticky="true"
              Inset="false"
              DisableGutters="true"
              SecondaryBackground="true">
            <MudText Typo="Typo.button"
                Class="d-flex justify-center mud-width-full"
                Color="Color.Tertiary"
                Align="Align.Center"
                Inline="true">
              Drop-Items
            </MudText>
            @{
              // BUG: Other sticky subheaders overlap this button click when scrolling
              string? icon = _dropItemsDense ? Icons.Material.Outlined.ViewCozy : Icons.Material.Outlined.ViewStream;
              var color = _dropItemsDense ? Color.Secondary : Color.Primary;

              <MudIconButton Size="Size.Medium"
                  Icon="@icon"
                  Color="@color"
                  Variant="Variant.Outlined"
                  Class="ma-2 mud-elevation-4 pa-0"
                  OnClick="ToggleDropItemsDense"
                  Style="position: absolute; top: -2px; right: 25%;"/>
            }
          </MudListSubheaderExtended>

          @if (RootFolder.SubFolders.Any()) {
            <MudListItemExtended T="string"
                Class="drop-zone-header"
                InitiallyExpanded="true"
                Dense="true">
              <ChildContent>
                <MudText Typo="Typo.button"
                    Color="Color.Surface"
                    Align="Align.Center"
                    Inline="true">
                  Folders
                </MudText>
              </ChildContent>
              <NestedList>
                @{
                  var dzId = $"{FolderDropZoneId}-{RootFolder.Id}";
                  var dzClass = "drop-zone-gallery";
                  if (_dropItemsDense)
                    dzClass += " flex-column";


                  <MudDropZone T="DropItem"
                      Class="@dzClass"
                      Identifier="@dzId"
                      CanDrop="CanAcceptDropItem"/>
                }
              </NestedList>
            </MudListItemExtended>
          }
          @if (RootFolder.MediaFiles.PdfFiles != null && RootFolder.MediaFiles.PdfFiles.Any()) {
            <MudListItemExtended T="string"
                Class="drop-zone-header"
                InitiallyExpanded="true"
                Dense="true">
              <ChildContent>
                <MudText Typo="Typo.button"
                    Color="Color.Surface"
                    Align="Align.Center"
                    Inline="true">
                  PDF Media
                </MudText>
              </ChildContent>
              <NestedList>
                @{
                  var dzClass = "drop-zone-gallery";
                  if (_dropItemsDense)
                    dzClass += " flex-column";
                  <MudDropZone T="DropItem"
                      Identifier="@($"{PdfDropZoneId}-{RootFolder.Id}")"
                      Class="@dzClass"
                      CanDrop="CanAcceptDropItem"/>
                }
              </NestedList>
            </MudListItemExtended>
          }

          @if (RootFolder.MediaFiles.VideoFiles != null && RootFolder.MediaFiles.VideoFiles.Any()) {
            <MudListItemExtended T="string"
                Class="drop-zone-header"
                InitiallyExpanded="true"
                Dense="true">
              <ChildContent>
                <MudText Typo="Typo.button"
                    Color="Color.Surface"
                    Align="Align.Center"
                    Inline="true">
                  MP4 Media
                </MudText>
              </ChildContent>
              <NestedList>
                @{
                  var dzClass = "drop-zone-gallery video-gallery";
                  if (_dropItemsDense)
                    dzClass += " flex-column";
                  <MudDropZone T="DropItem"
                      Identifier="@($"{VideoDropZoneId}-{RootFolder.Id}")"
                      Class="@dzClass"
                      CanDrop="CanAcceptDropItem">
                  </MudDropZone>
                }
              </NestedList>
            </MudListItemExtended>
          }
        </div>
      }
    </div>

  </MudListExtended>
</MudStack>
