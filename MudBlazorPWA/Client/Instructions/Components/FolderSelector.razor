@inject HubClientService DirectoryHub
@using Microsoft.AspNetCore.SignalR.Client
@using MudBlazorPWA.Client.Instructions.Pages
@implements IDisposable
<MudStack Spacing="0">
  <MudPaper Class="left-column-paper mud-height-full" Width="300px">

    <MudListExtended T="Folder"
        @ref="SelectableFolders"
        Dense
        Clickable
        DisablePadding
        Class="mud-width-full"
        MultiSelection="false"
        @bind-SelectedItem="SelectedItem"
        @bind-SelectedValue="SelectedValue">
      <MudListSubheaderExtended T="Folder"
          Class="mud-width-full"
          Sticky="true"
          SecondaryBackground="true">
        @if (_breadCrumbs.Count >= 1) {
          Folder? baseFolder = _breadCrumbs.First();
          <MudStack Row
              Spacing="1"
              Justify="Justify.FlexStart"
              AlignItems="AlignItems.Center">
            <MudTooltip Text="@($"Go to {baseFolder?.Name}")"
                Arrow="true"
                Placement="Placement.Top">
              <MudIconButton Icon="@Icons.Material.Outlined.Home"
                  Color="Color.Primary"
                  Size="Size.Small"
                  Variant="Variant.Text"
                  OnClick="@(() => SetFolderAsRoot(baseFolder))"/>
            </MudTooltip>
            @if (_breadCrumbs.Count > 1) {
              int currentFolderIndex = _breadCrumbs.IndexOf(_breadCrumbs.Last());
              Folder? parentFolder = _breadCrumbs[currentFolderIndex - 1];
              <strong>/</strong>
              <MudTooltip Text="@($"Go to {parentFolder?.Name}")"
                  Arrow
                  ShowOnHover
                  Placement="Placement.Top">
                <MudChip Color="Color.Default"
                    Size="Size.Small"
                    Variant="Variant.Text"
                    Text="..."
                    OnClick="@(() => SetFolderAsRoot(parentFolder))">
                </MudChip>
              </MudTooltip>
            }
            @if (_breadCrumbs.Any()) {
              Folder? currentFolder = _breadCrumbs.Last();
              <strong class="px-1">/</strong>
              <strong>@currentFolder?.Name</strong>
            }
          </MudStack>
        }
      </MudListSubheaderExtended>

      @if (RootFolder is not null) {
        foreach (Folder folder in RootFolder.SubFolders.OrderBy(f => f.Name)) {
          bool hasSubFolders = folder.SubFolders.Any();
          switch (hasSubFolders) {
            case true:
              <MudListItemExtended T="Folder"
                  Icon="@Icons.Material.Filled.Folder"
                  Text="@folder.Name"
                  Value="@folder"
                  OnClick="SetFolderAsRoot">
              </MudListItemExtended>
              break;
            case false:
              _selectedFolders.Add(folder);
              break;
          }
        }
      }

      @{
        //if any folders in _breadCrumbs.Last() have SubFolders, then display the dropzone
        if (_breadCrumbs.Count > 0)
          _displayDropZone = _breadCrumbs.Count > 1;

        if (_displayDropZone) {
          <MudDropZone T="AdminDashboard.DropItem"
              Identifier="Drop Zone 0"
              Class="mud-background-gray">
            <ItemRenderer>
              <div class="mud-width-full d-flex justify-center align-center py-1 cursor-default">
                <MudChip Text="@context.Name"
                  Class="cursor-grab"
                  Icon="@Icons.Material.Outlined.Folder"
                  Size="Size.Small"
                  Label="true">
              </MudChip>
              </div>
            </ItemRenderer>
          </MudDropZone>
        }
      }

    </MudListExtended>
  </MudPaper>
</MudStack>

@code {
  [Parameter]
  public EventCallback<Folder[]?> OnFoldersSubmitted { get; set; }
  [Parameter]
  public string? DirectoryPath { get; set; }

  #region Properties
  private readonly List<Folder?> _breadCrumbs = new();
  private readonly List<Folder> _selectedFolders = new();
  private MudListExtended<Folder>? SelectableFolders { get; set; }
  private MudListExtended<Folder>? SelectedFoldersList { get; set; }
  private MudListItemExtended<Folder?>? SelectedItem { get; set; }
  private Folder? SelectedValue { get; set; }
  private Folder? RootFolder { get; set; }
  private string[]? _folders;
  private bool _displayDropZone;
  #endregion

  protected override async Task OnInitializedAsync() {
    var enumerable = await DirectoryHub.GetFoldersInPath();
    OnReceiveAllFolders(enumerable);
    await base.OnInitializedAsync();
  }
  private void OnReceiveAllFolders(IEnumerable<string> folders) {
    _folders = folders.Select(f => f.Insert(0, AppConfig.BasePath)).ToArray();
    RootFolder = BuildDirectoryTree(_folders);
    _breadCrumbs.Add(RootFolder);
    InvokeAsync(StateHasChanged);
  }
  public void Dispose() {
    DirectoryHub.ReceiveAllFolders -= OnReceiveAllFolders;
  }

  private Task SetFolderAsRoot() {
    if (SelectedValue == null || !SelectedValue.SubFolders.Any())
      return Task.CompletedTask;

    RootFolder = SelectedValue;
    _breadCrumbs.Add(SelectedValue);
    return InvokeAsync(StateHasChanged).ContinueWith(_ => SubmitSelectedFolders());
  }
  private Task SetFolderAsRoot(Folder? newRoot) {
  // remove the newRoot from _breadCrumbs and all following items
    int index = _breadCrumbs.IndexOf(newRoot);
    _breadCrumbs.RemoveRange(index, _breadCrumbs.Count - index);
    RootFolder = newRoot;
    _breadCrumbs.Add(newRoot);
    SelectableFolders!.Clear();
    return SubmitSelectedFolders();
  }
  private Task NavigateToFolder(Folder folder) {
    RootFolder = folder;
    _breadCrumbs.Add(folder);
    return SubmitSelectedFolders();
  }
  private async Task SubmitSelectedFolders() {
    var folders = _breadCrumbs.Count == 1 ? null : _selectedFolders.ToArray();
    _selectedFolders.Clear();
    await OnFoldersSubmitted.InvokeAsync(folders);
  }


  /// <summary>
  /// Builds a directory tree from a collection of file paths.
  /// </summary>
  /// <param name="paths">The file paths to use.</param>
  /// <returns>A directory tree.</returns>
  private static Folder? BuildDirectoryTree(IEnumerable<string> paths) {
  // Check for empty paths
    var enumerable = paths.ToList();
    if (!enumerable.Any()) {
      return null;
    }

  // Find the common part of the paths
    string firstPath = enumerable.First();
    char splitChar = firstPath.Contains('\\') ? '\\' : '/';
    var splitPaths = enumerable.Select(path => path.Split(splitChar)).ToList();
    int commonParts = FindCommonParts(splitPaths);

  // Set the root of the tree to the common part
    var root = new Folder(splitPaths[0][commonParts], string.Join("", splitPaths[0].Take(commonParts + 1)));

  // Add the remaining parts to the tree
    foreach (string[] splitPath in splitPaths) {
      AddRemainingParts(root, splitPath, commonParts);
    }
    return root;
  }

  /// <summary>
  /// Finds the common parts of a collection of split paths.
  /// </summary>
  /// <param name="splitPaths">The collection of split paths.</param>
  /// <returns>The number of common parts.</returns>
  private static int FindCommonParts(IEnumerable<string[]> splitPaths) {
    var commonParts = int.MaxValue;
    var stringsEnumerable = splitPaths.ToList();
    for (var i = 0; i < stringsEnumerable.First().Length; i++) {
      string currentPart = stringsEnumerable.First()[i];
      int count = 1 + stringsEnumerable.Skip(1)
        .TakeWhile(splitPath => i < splitPath.Length && splitPath[i] == currentPart)
        .Count();
      if (count == stringsEnumerable.Count()) {
        commonParts = i;
      } else {
        break;
      }
    }
    return commonParts;
  }

  /// <summary>
  /// Adds the remaining parts of a split path to the directory tree.
  /// </summary>
  /// <param name="root">The root of the directory tree.</param>
  /// <param name="splitPath">The split path.</param>
  /// <param name="commonParts">The number of common parts.</param>
  private static void AddRemainingParts(Folder? root, IReadOnlyList<string> splitPath, int commonParts) {
    Folder? current = root;
    for (int i = commonParts + 1; i < splitPath.Count; i++) {
      Folder? next = current?.SubFolders.FirstOrDefault(f => f.Name == splitPath[i]);
      if (next == null) {
        next = new Folder(splitPath[i], current?.Path + splitPath[i]);
        current?.SubFolders.Add(next);
      }
      current = next;
    }
  }

  private string GetNameWithParent(string folderName) {
    string? path = _folders?.FirstOrDefault(f => f.EndsWith(folderName));
    if (path == null)
      return folderName;

    char splitChar = path.Contains('\\') ? '\\' : '/';
    string[] splitPath = path.Split(splitChar);
    string parent = splitPath[^2];
    return $"{parent}{splitChar}{folderName}";
  }

}
