@using System.ComponentModel
@inject HubClientService DirectoryHub
@inject ILogger<FolderSelector> Logger
@inject IJSRuntime JSRuntime
<MudStack id="folder-selector"
    Spacing="0"
    Class="mud-height-full">
  <MudPaper>
    <MudListExtended T="Folder"
        @ref="SelectableFolders"
        Dense
        Clickable
        DisablePadding
        Class="border-2 border-solid folder-list mud-border-lines-default mud-width-full rounded-lg"
        MultiSelection="false"
        @bind-SelectedItem="SelectedItem"
        @bind-SelectedValue="SelectedValue">
      <MudListSubheaderExtended T="Folder"
          Class="border-b border-solid mud-border-lines-default mud-width-full py-2"
          Sticky="true"
          SecondaryBackground="true">
        @if (_breadCrumbs.Count >= 1) {
          Folder? baseFolder = _breadCrumbs.FirstOrDefault();
          if (baseFolder == null)
            return;
          <MudStack Row
              Spacing="1"
              Justify="Justify.FlexStart"
              AlignItems="AlignItems.Center">
            <MudTooltip Text="@($"{baseFolder.Name}")"
                Arrow="true"
                Placement="Placement.Top">
              @* disable icon button if the baseFolder is the only folder in _breadcrumbs*@
              <MudIconButton Icon="@Icons.Material.Outlined.Home"
                  Disabled="@(_breadCrumbs.Count == 1)"
                  Color="Color.Primary"
                  Size="Size.Small"
                  Variant="Variant.Text"
                  OnClick="@(() => SetFolderAsRoot(baseFolder))"/>
            </MudTooltip>
            @if (_breadCrumbs.Count >= 3) {
              int currentFolderIndex = _breadCrumbs.IndexOf(_breadCrumbs.Last());
              Folder? parentFolder = _breadCrumbs[currentFolderIndex - 1];
              if (parentFolder == null)
                return;

              <strong>/</strong>
              <MudTooltip Text="@($"{parentFolder.Name}")"
                  Arrow
                  ShowOnHover
                  Placement="Placement.Top">
                <MudChip Color="Color.Default"
                    Class="px-1"
                    Size="Size.Small"
                    Variant="Variant.Text"
                    Text="@parentFolder.Name"
                    OnClick="@(() => SetFolderAsRoot(parentFolder))">
                </MudChip>
              </MudTooltip>
            }
            @if (_breadCrumbs.Any()) {
              Folder? currentFolder = _breadCrumbs.Last();
              <strong class="px-1">/</strong>
              <strong>@(currentFolder?.Name)</strong>
            }
          </MudStack>
        }
      </MudListSubheaderExtended>
      <div class="mud-background-gray mud-width-full"
          style="height: 91vh;">
        @if (RootFolder != null) {
          var hasSubFolders = false;
          var hasPdfs = false;
          var hasVideos = false;
          <div class="folder-item-flex-container">

            @foreach (Folder folder in RootFolder.SubFolders.OrderBy(f => f.Name)) {
              if (folder.MediaFiles.PdfFiles != null)
                hasPdfs = folder.MediaFiles.PdfFiles.Any();

              if (folder.MediaFiles.VideoFiles != null)
                hasVideos = folder.MediaFiles.VideoFiles.Any();

              hasSubFolders = folder.SubFolders.Any();
              if (!hasSubFolders && !hasPdfs && !hasVideos) {
                continue;
              }
              <MudListItemExtended T="Folder"
                  Class="folder-list-item"
                  Dense="true"
                  IconSize="@Size.Small"
                  Icon="@Icons.Material.Filled.Folder"
                  Text="@(folder.Name)"
                  Value="folder"
                  OnClick="SetFolderAsRoot"/>
            }
            @if (!hasSubFolders && !hasPdfs && !hasVideos) {
              <MudListItemExtended T="string"
                  Style="background-color: var(--mud-palette-surface);"
                  SecondaryText="End of Directory Tree">

              </MudListItemExtended>
            }
          </div>
          <div class="mud-list-drop-content"
              style="background-color:var(--mud-palette-surface);">
            <MudListSubheaderExtended T="string"
                Class="border-solid border-t mud-border-lines-default py-2"
                Style="top: 0;"
                Sticky="true"
                Inset="false"
                DisableGutters="true"
                SecondaryBackground="true">
              <MudText Typo="Typo.button"
                  Class="d-flex justify-center mud-width-full"
                  Color="Color.Tertiary"
                  Align="Align.Center"
                  Inline="true">
                Drop-Items
              </MudText>
            </MudListSubheaderExtended>

            @if (_breadCrumbs.Count > 1 && RootFolder.SubFolders.Any()) {
              <MudListItemExtended T="string"
                  Style="position: sticky; top: 1px; z-index: 2;"
                  InitiallyExpanded="true"
                  Dense="true">
                <ChildContent>
                  <MudText Typo="Typo.button"
                      Color="Color.Surface"
                      Align="Align.Center"
                      Inline="true">
                    Folders : @RootFolder.Id
                  </MudText>
                </ChildContent>
                <NestedList>
                  <MudDropZone T="DropItem"
                      Identifier="@($"{FolderDropZoneId}-{RootFolder.Id}")"
                      Class="drop-zone-gallery"/>
                </NestedList>
              </MudListItemExtended>
            }
            @if (RootFolder.MediaFiles.PdfFiles != null && RootFolder.MediaFiles.PdfFiles.Any()) {
              <MudListItemExtended T="string"
                  Style="position: sticky; top: 1px; z-index: 2;"
                  InitiallyExpanded="true"
                  Dense="true">
                <ChildContent>
                  <MudText Typo="Typo.button"
                      Color="Color.Surface"
                      Align="Align.Center"
                      Inline="true">
                    PDF Media : @RootFolder.Id
                  </MudText>
                </ChildContent>
                <NestedList>
                  <div class="drop-zone-wrapper">
                    <MudDropZone T="DropItem"
                        Identifier="@($"{PdfDropZoneId}-{RootFolder.Id}")"
                        ApplyDropClassesOnDragStarted="true"
                        Class="drop-zone-gallery"/>
                  </div>
                </NestedList>
              </MudListItemExtended>
            }

            @if (RootFolder.MediaFiles.VideoFiles != null && RootFolder.MediaFiles.VideoFiles.Any()) {
              <MudListItemExtended T="string"
                  Style="position: sticky; top: 1px; z-index: 2;;"
                  InitiallyExpanded="true"
                  Dense="true">
                <ChildContent>
                  <MudText Typo="Typo.button"
                      Color="Color.Surface"
                      Align="Align.Center"
                      Inline="true">
                    MP4 Media : @RootFolder.Id
                  </MudText>
                </ChildContent>
                <NestedList>
                  <div class="drop-zone-wrapper">
                    <MudDropZone T="DropItem"
                        Identifier="@($"{VideoDropZoneId}-{RootFolder.Id}")"

                        Class="drop-zone-gallery"/>
                  </div>
                </NestedList>
              </MudListItemExtended>
            }
          </div>
        }
      </div>

    </MudListExtended>
  </MudPaper>
</MudStack>

@code {
  [Parameter]
  public EventCallback<Folder[]?> OnFoldersSubmitted { get; set; }
  [Parameter]
  public EventCallback<Folder> OnFolderSelected { get; set; }
  [Parameter]
  public EventCallback<List<DropItem>> OnDropItemsUpdated { get; set; }
  [Parameter]
  public string? DirectoryPath { get; set; }
  [Parameter]
  public List<WindingCode>? WindingCodes { get; set; }

    private const string FolderDropZoneId = "DZ-Folder";
    private const string PdfDropZoneId = "DZ-Pdf";
    private const string VideoDropZoneId = "DZ-Video";

  #region Properties
  private readonly List<Folder?> _breadCrumbs = new();
  private MudListExtended<Folder>? SelectableFolders { get; set; }
  private MudListExtended<Folder>? SelectedFoldersList { get; set; }
  private MudListItemExtended<Folder?>? SelectedItem { get; set; }
  private Folder? SelectedValue { get; set; }
  private Folder? RootFolder { get; set; }
  private List<WindingCode> _windingCodesWithFolders = default!;
  private List<DropItem> _dropItems = new();
  private IEnumerable<string> _folders = default!;
  private bool _rootFolderChanged = false;
  #endregion

  protected override async Task OnInitializedAsync() {
    if (WindingCodes != null)
      _windingCodesWithFolders = WindingCodes.Where(w => w.FolderPath != null).ToList();
    Logger.LogInformation("WindingCodesWithFolders: {@WindingCodesWithFolders}", _windingCodesWithFolders.Count);
    _folders = await DirectoryHub.GetFoldersInPath();
    await OnReceiveAllFolders();
  }
  // OnAfterRenderAsync to call JS Interop
  protected override async Task OnAfterRenderAsync(bool firstRender) {
    // only invoke the js FUnction if the RootFolder has changed since the last render
    if (_rootFolderChanged) {
      await JSRuntime.InvokeVoidAsync("checkOverflowingElements");
      _rootFolderChanged = false;
    }
  }
  private async Task OnReceiveAllFolders() {
     string[] folders = _folders.Select(f => f.Insert(0, DirectoryHub.WindingDocsFolder)).ToArray();
    RootFolder = BuildDirectoryTree(folders);
    if (RootFolder == null) return;
    _breadCrumbs.Add(RootFolder);
    _rootFolderChanged = true;
    await ConvertDirectoryToDropItems(RootFolder);
    await OnDropItemsUpdated.InvokeAsync(_dropItems);
  }
  private void SetFolderAsRoot() {
    if (SelectedValue == null)
      return;

    RootFolder = SelectedValue;
    _rootFolderChanged = true;
    _breadCrumbs.Add(SelectedValue);
    SelectableFolders!.Clear();
    SelectedValue = null;
  }
  private void SetFolderAsRoot(Folder newRoot) {
    if (newRoot != RootFolder) {
      int index = _breadCrumbs.IndexOf(newRoot);
      _breadCrumbs.RemoveRange(index, _breadCrumbs.Count - index);
      RootFolder = newRoot;
      _rootFolderChanged = true;
    }
    _breadCrumbs.Add(newRoot);
    SelectableFolders!.Clear();
  }

  #region Static Methods
  private static Folder? BuildDirectoryTree(IEnumerable<string> paths) {
    var enumerable = paths.ToList();
    if (!enumerable.Any()) {
      return null;
    }
    string firstPath = enumerable.First();
    char splitChar = firstPath.Contains('\\') ? '\\' : '/';
    var splitPaths = enumerable.Select(path => path.Split(splitChar)).ToList();
    int commonParts = FindCommonParts(splitPaths);
    var root = new Folder(splitPaths[0][commonParts], string.Join(splitChar, splitPaths[0].Take(commonParts + 1)), splitChar);
    foreach (string[] splitPath in splitPaths)
      AddRemainingParts(root, splitPath, commonParts);
    return root;
  }
  private static int FindCommonParts(IEnumerable<string[]> splitPaths) {
    var commonParts = int.MaxValue;
    var stringsEnumerable = splitPaths.ToList();
    for (var i = 0; i < stringsEnumerable.First().Length; i++) {
      string currentPart = stringsEnumerable.First()[i];
      int count = 1 + stringsEnumerable.Skip(1)
        .TakeWhile(splitPath => i < splitPath.Length && splitPath[i] == currentPart)
        .Count();
      if (count == stringsEnumerable.Count()) {
        commonParts = i;
      } else {
        break;
      }
    }
    return commonParts;
  }
  private static void AddRemainingParts(Folder? root, IReadOnlyList<string> splitPath, int commonParts) {
    Folder? current = root;
    for (int i = commonParts + 1; i < splitPath.Count; i++) {
      Folder? next = current?.SubFolders.FirstOrDefault(f => f.Name == splitPath[i]);
      if (next == null) {
        next = new(splitPath[i], current?.Path + current?.SplitChar + splitPath[i], current!.SplitChar);
        current.SubFolders.Add(next);
      }
      current = next;
    }
  }
  #endregion

  private async Task ConvertDirectoryToDropItems(Folder rootFolder) {
    var (pdfFiles, videoFiles) = await DirectoryHub.ListMediaFiles(rootFolder.Path);
    rootFolder.MediaFiles.PdfFiles = pdfFiles;
    rootFolder.MediaFiles.VideoFiles = videoFiles;

  // create a list of subfolders to add to the dropzone list
  // then add each item to the list as many times as needed depending on if it should
  // appear in multiple drop-zones.
    var dropItemFolders = rootFolder.SubFolders
      .ToList();

  // iterate over dropItemFolders and call AddFolderDropItem for each folder
    foreach (Folder folder in dropItemFolders) {
      AddFolderDropItem(folder, rootFolder.Id);
    }

    var dropItemPdfs = rootFolder.MediaFiles.PdfFiles
      .ToList();

    foreach (string pdf in dropItemPdfs) {
      AddPdfDropItem(pdf, rootFolder.Id);
    }

    var dropItemVideos = rootFolder.MediaFiles.VideoFiles.ToList();

    foreach (string video in dropItemVideos) {
      AddVideoDropItem(video, rootFolder.Id);
    }

    foreach (Folder subFolder in rootFolder.SubFolders) {
      await ConvertDirectoryToDropItems(subFolder);
    }
  }
  private void AddVideoDropItem(string video, string folderId) {
    video = video.Replace(DirectoryHub.WindingDocsFolder, "");
    var dropZoneId = $"{VideoDropZoneId}-{folderId}";
    _dropItems.Add(new() {
      Name = video.Split("/").Last(),
      Path = video,
      Type = DropItemType.Video,
      Identifier = dropZoneId
    });
    _dropItems.AddRange(_windingCodesWithFolders
      .Where(w => w.Media.Video == video)
      .Select(windingCode => new DropItem() {
        Name = video.Split("/").Last(),
        Path = video,
        Type = DropItemType.Video,
        Identifier = $"DZ-Code-Video-{windingCode.Id}",
        OriginalIdentifier = dropZoneId,
        IsCopy = true
      }));
  }
  private void AddPdfDropItem(string pdf, string folderId) {
    pdf = pdf.Replace(DirectoryHub.WindingDocsFolder, "");
    var dropZoneId = $"{PdfDropZoneId}-{folderId}";
    _dropItems.Add(new() {
      Name = pdf.Split("/").Last(),
      Path = pdf,
      Type = DropItemType.Pdf,
      Identifier = dropZoneId
    });
    _dropItems.AddRange(_windingCodesWithFolders
      .Where(w => w.Media.Pdf == pdf)
      .Select(windingCode => new DropItem() {
        Name = pdf.Split("/").Last(),
        Path = pdf,
        Type = DropItemType.Pdf,
        Identifier = $"DZ-Code-Pdf-{windingCode.Id}",
        OriginalIdentifier = dropZoneId,
        IsCopy = true
      }));
  }
  private void AddFolderDropItem(Folder folder, string folderId) {
    string? folderPath = folder.Path?.Replace(DirectoryHub.WindingDocsFolder, "");
    var dropZoneId = $"{FolderDropZoneId}-{folderId}";
    _dropItems.Add(new() {
      Name = folder.Name,
      Path = folderPath,
      Type = DropItemType.Folder,
      Identifier = dropZoneId
    });
    _dropItems.AddRange(_windingCodesWithFolders
      .Where(w =>
        w.FolderPath == folderPath || w.Media.ReferenceFolder == folderPath)
      .Select(windingCode => new DropItem() {
        Name = folder.Name,
        Path = folder.Path,
        Type = DropItemType.Folder,
        Identifier = $"DZ-Code-Folder-{windingCode.Id}",
        OriginalIdentifier = dropZoneId,
        IsCopy = true
      }));
  }

  private bool CanDropVideo(DropItem arg) {
    return arg.Type == DropItemType.Video && _dropItems.Any(d => d.Path == arg.Path || d.Name == arg.Name);
  }
  private bool CanDropPdf(DropItem arg) {
    return arg.Type == DropItemType.Pdf && _dropItems.Any(d => d.Path == arg.Path || d.Name == arg.Name);
  }
  private bool CanDropFolder(DropItem arg) {
    return arg.Type == DropItemType.Folder && _dropItems.Any(d => d.Path == arg.Path || d.Name == arg.Name);
  }
  private Dictionary<string, object> GetDropItemAttributes(DropItem context) {
    var attributes = new Dictionary<string, object> {
      {
        "data-path", context.Name!
      }
    };

    var copies = RootFolder?.DropItems.Where(d => d.Name == context.Name && d.IsCopy).ToList();
    if (copies == null || !copies.Any())
      return attributes;

    string identifiers = string.Join("<br />", copies.Select(c => c.Identifier));
    attributes.Add("data-title", identifiers);


    return attributes;
  }
}
