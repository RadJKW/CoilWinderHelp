@inject DocViewService DocViewSettings
@implements IDisposable

<MudMenu Icon="@Icons.Material.Outlined.SettingsApplications"
    AnchorOrigin="Origin.TopCenter"
    TransformOrigin="Origin.BottomCenter"
    PopoverClass="settings-menu"
    ListClass="pa-2 settings-menu-list">

  <MudText Typo="Typo.h6"
      Class="pl-6">
      Settings
    </MudText>
  <MudDivider Class="mb-2 mt-1 mx-n2"
      DividerType="DividerType.FullWidth"/>
  <MudGrid Spacing="0">
    <MudItem xs="12">
      <MudCheckBox @bind-Checked="@this[Settings.AppBarIsVisible]"
          Label="AppBar">
      </MudCheckBox>
      <MudCheckBox @bind-Checked="@this[Settings.DrawerOpen]"
          Label="Drawer Open">
      </MudCheckBox>
      <MudCheckBox @bind-Checked="@this[Settings.DrawerOpenOnHover]"
          Label="Drawer Hover">
      </MudCheckBox>
    </MudItem>
    <MudItem xs="12">

      <MudDivider Class="mb-2 mt-1 mx-n2"
          DividerType="DividerType.FullWidth"/>
    </MudItem>
    <MudItem xs="12">
      <div class="align-center d-flex justify-center mud-width-full">
        <MudText Typo="Typo.body2">
          @* ReSharper disable once Asp.Entity *@
          R&D: Jared West
        </MudText>
      </div>
    </MudItem>
  </MudGrid>
</MudMenu>

@code {

  private enum Settings {
    AppBarIsVisible,
    DrawerOpen,
    DrawerOpenOnHover
  }

  private Dictionary<Settings, Func<bool>> _getters = default!;
  private Dictionary<Settings, Action<bool>> _setters = default!;

  private AppSettings AppSettings { get; set; } = new();

  protected override async Task OnInitializedAsync() {
    AppSettings = DocViewSettings.AppSettings;
    DocViewSettings.MajorUpdateOccured += DocViewSettingsOnMajorUpdateOccured;
    _getters = new() {
      {
        Settings.AppBarIsVisible, () => AppSettings.AppBarIsVisible
      }, {
        Settings.DrawerOpen, () => AppSettings.DrawerOpen
      }, {
        Settings.DrawerOpenOnHover, () => AppSettings.DrawerOpenOnHover
      }
    };
    _setters = new() {
      {
        Settings.AppBarIsVisible, value => AppSettings.AppBarIsVisible = value
      }, {
        Settings.DrawerOpen, value => AppSettings.DrawerOpen = value
      }, {
        Settings.DrawerOpenOnHover, value => AppSettings.DrawerOpenOnHover = value
      }
    };
    await base.OnInitializedAsync();
  }

  private void DocViewSettingsOnMajorUpdateOccured(object? sender, EventArgs e) {
    AppSettings = DocViewSettings.AppSettings;
    InvokeAsync(StateHasChanged);
  }

  private bool this[Settings setting] {
    get => _getters[setting]();
    set {
      _setters[setting](value);
      DocViewSettings.SetAppSettings(AppSettings);
    }
  }

  public void Dispose() {
    if (DocViewSettings != null) {
      DocViewSettings.MajorUpdateOccured -= DocViewSettingsOnMajorUpdateOccured;
    }
  }
}
