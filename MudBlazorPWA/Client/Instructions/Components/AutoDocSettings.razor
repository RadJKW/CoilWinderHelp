@inject DocViewService DocViewSettings
@using Blazored.LocalStorage
@implements IDisposable

<MudMenu Icon="@Icons.Material.Outlined.SettingsApplications"
    AnchorOrigin="Origin.TopCenter"
    TransformOrigin="Origin.BottomCenter"
    PopoverClass="settings-menu"
    ListClass="pa-2 settings-menu-list">

  <MudText Typo="Typo.h6"
      Class="pl-6">
    Settings
  </MudText>
  <MudDivider/>
  <MudGrid Spacing="0">
    <MudItem xs="12">
      <MudCheckBox @bind-Checked="@this[Settings.AppBarIsVisible]"
          Label="AppBar">
      </MudCheckBox>
      <MudCheckBox @bind-Checked="@this[Settings.DrawerOpenOnHover]"
          Label="Drawer Hover">
      </MudCheckBox>
      @if (!this[Settings.DrawerOpenOnHover]) {
        <div class="pl-3">
          <MudCheckBox @bind-Checked="@this[Settings.DrawerOpen]"
              Label="Drawer Open">
          </MudCheckBox>
        </div>
      }
    </MudItem>
    <MudItem xs="12">

      <MudDivider/>
    </MudItem>
    <MudItem xs="12">
      <div class="align-center d-flex justify-center mud-width-full">
        <MudText Typo="Typo.body2">
          @* ReSharper disable once Asp.Entity *@
          R&D: Jared West
        </MudText>
      </div>
    </MudItem>
  </MudGrid>
</MudMenu>

@code {

  private enum Settings {
    AppBarIsVisible,
    DrawerOpen,
    DrawerOpenOnHover
  }

  private AppSettings _appSettings = new AppSettings();

  protected override async Task OnInitializedAsync() {
    DocViewSettings.MajorUpdateOccured +=  DocViewSettingsOnMajorUpdateOccured;
    _appSettings = DocViewSettings.Settings;
    await base.OnInitializedAsync();
  }

  private void DocViewSettingsOnMajorUpdateOccured() {
    _appSettings = DocViewSettings.Settings;
    InvokeAsync(StateHasChanged);
  }

  private bool this[Settings setting] {
    get => DocViewSettings.GetAppSetting<bool>(setting);
    set =>
      DocViewSettings.SetAppSetting(setting, value);
  }

  public void Dispose() {
    if (DocViewSettings != null) {
      DocViewSettings.MajorUpdateOccured -= DocViewSettingsOnMajorUpdateOccured;
    }
  }
}
