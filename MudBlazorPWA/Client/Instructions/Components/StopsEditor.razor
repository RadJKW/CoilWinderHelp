@inject IHttpClientFactory HttpClient
@implements IDisposable
@inject ISnackbar Snackbar
@inject HubClientService DirectoryHub
@using Newtonsoft.Json
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.SignalR.Client

<MudScrollbar Selector=""
    Width="4"
    HoverWidth="6"
    BorderRadius="3"
    Color="rgba(10,133,255,0.5)"
    Hide="false"/>
<MudStack Class="stack-container stops-editor"
    Spacing="1"
    Justify="Justify.FlexStart"
    AlignItems="AlignItems.Center">
  <div class="align-center d-flex gap-4 justify-center mud-width-full py-2"
      style="position: relative;">

    <DirectoryMenu Folder="DirectoryMenu.StartupFolder.Division1"
        OnRootFolderChange="HandleRootFolderChange"/>

    <div class="d-flex flex-1 justify-start px-6"
        style="position: absolute; left: 0">
      <MudButton Color="Color.Primary"
          Variant="Variant.Outlined"
          Class="mud-elevation-4"
          StartIcon="@Icons.Material.Filled.Save"
          OnClick="ConvertStopsToJson">
        Save Changes
      </MudButton>
    </div>
  </div>
  @switch (State) {
    case PageState.Loading:
      <div class="align-center d-flex justify-center mud-width-full"
          style="height: 50%">
        <div class="align-center d-flex flex-column justify-center">

          <MudProgressCircular Color="Color.Tertiary"
              StrokeWidth="5"
              Size="Size.Large"
              Indeterminate="true"/>

          <MudText Typo="Typo.h3">Loading...</MudText>
        </div>

      </div>
      break;
    case PageState.Loaded:

      <MudGrid Spacing="2"
          Justify="Justify.Center"
          Class="stops-editor-grid">
        @foreach (var group in WindingCodeGroups) {
          <MudItem xs="@(GetBreakpoint(WindingCodeGroups.Count()))"
              Class="stops-grid-item">
            <MudPaper Class="stops-editor-paper"
                Elevation="4">
              <MudListSubheaderExtended T="string"
                  Class="mud-elevation-4"
                  Sticky="true"
                  SecondaryBackground="true">
                <MudText Typo="Typo.h6"
                    Class="ml-6">
                  <strong>@group.Key.ToString() Codes</strong>
                </MudText>
              </MudListSubheaderExtended>

              <MudExpansionPanels MultiExpansion="true"
                  Class="flex-grow-0 overflow-auto stops-expansion-panel"
                  Elevation="2">
                @foreach (var windingCode in group) {
                  <MudExpansionPanel Class="stops-expansion-item"
                      IsInitiallyExpanded="false">
                    <TitleContent>
                      <div class="d-flex gap-10">
                        <MudIcon Icon="@Icons.Material.Filled.MoreVert"
                            Color="Color.Primary"/>
                        <MudText Align="Align.Center"
                            Style="width: 20%;backdrop-filter: contrast(75%) opacity(33%); ">
                          <strong> @windingCode.Code</strong>
                        </MudText>
                        <div class="d-flex justify-start mud-width-full mx-auto">

                          <MudText Typo="Typo.button"
                              Color="Color.Tertiary"
                              Align="Align.Center">
                            @windingCode.Name
                          </MudText>
                        </div>
                      </div>
                    </TitleContent>
                    <ChildContent>

                      <div class="align-center"
                          style="display: grid; grid-template-columns: auto 1fr; ">
                        <div class="align-content-start border-r border-solid mud-border-lines-default pr-8"
                            style="display: flex; flex-direction: column; gap: 0.2rem;">
                          <MudTooltip Arrow="true"
                              Delay="500"
                              Placement="Placement.Top"
                              ShowOnHover="true"
                              Text="@($"Notify Server: CurrentStop = {@windingCode.Code}")">
                            <MudIconButton Variant="Variant.Text"
                                Color="Color.Info"
                                Icon="@Icons.Material.Outlined.Bolt"
                                Size="Size.Small"
                                Class="mud-elevation-4"
                                Style="backdrop-filter: contrast(0.5) saturate(0.7)"/>
                          </MudTooltip>
                          <MudTooltip Arrow="true"
                              Delay="500"
                              Placement="Placement.Top"
                              ShowOnHover="true"
                              Text="Show Full Paths">
                            <MudIconButton Variant="Variant.Text"
                                Color="Color.Tertiary"
                                Icon="@Icons.Material.Outlined.SettingsEthernet"
                                Size="Size.Small"
                                Class="mud-elevation-4"
                                OnClick="@(() => {_showFullPaths = !_showFullPaths; InvokeAsync(StateHasChanged); })"
                              Style="backdrop-filter: contrast(0.5) saturate(0.7)"/>

                          </MudTooltip>
                          <MudIconButton Variant="Variant.Text"
                              Color="Color.Error"
                              Icon="@Icons.Material.Outlined.DeviceHub"
                              Size="Size.Small"
                              Class="mud-elevation-4"
                              Style="backdrop-filter: contrast(0.5) saturate(0.7)"/>

                        </div>
                        <MudSelectExtended T="string"
                            @bind-Value="@windingCode.FolderPath"
                            Text="@FormatWindingCode(windingCode)"
                            Variant="Variant.Filled"
                            Clearable="true"
                            OnClearButtonClick="@(() => windingCode.FolderPath = null)"
                            Color="Color.Dark"
                            Label="Assigned Folder"
                            ItemCollection="_folderPaths"
                            Placeholder="Select a folder"
                            PopoverClass="folder-select-popover"
                            SearchBox="true"
                            AutoFocus="true"
                            DisablePopoverPadding="true">
                          <ItemTemplate>
                            <MudText> @context.Value</MudText>
                          </ItemTemplate>

                        </MudSelectExtended>
                      </div>
                    </ChildContent>
                  </MudExpansionPanel>
                }

              </MudExpansionPanels>
              <MudSpacer/>
            </MudPaper>
          </MudItem>
        }
      </MudGrid>
      break;
    case PageState.Error:
    default:
      <MudAlert Severity="Severity.Error"
          Class="mud-height-full mud-width-full"
          Text="Error loading data"/>
      break;
  }

</MudStack>

@code{

  public enum PageState {
    Loading,
    Loaded,
    Error
  }

  #region Properties
  private HttpClient _pwaServer = null!;
  private IEnumerable<IGrouping<CodeTypeId, WindingCode>> WindingCodeGroups { get; set; } = new List<IGrouping<CodeTypeId, WindingCode>>();
  private PageState State { get; set; } = PageState.Loading;
  private List<string> _folderPaths = new List<string>();
  private readonly List<(string, List<string>?)> _folderItemGroups = new();
  private Folder? RootFolder { get; set; }
  private string _rawJson = string.Empty;
  private bool _showFullPaths = false;
  #endregion

  protected override async Task OnInitializedAsync() {
    DirectoryHub.WindingCodesDbUpdated += DirectHub_OnWindingCodesDbUpdated;
    _pwaServer = HttpClient.CreateClient("PwaServer");
    var response = await _pwaServer.GetAsync("files/WindingCodes.json");
    if (response.IsSuccessStatusCode) {
      await ParseWindingCodes(response);
    }
    await base.OnInitializedAsync();
  }


  private async Task ParseWindingCodes(HttpResponseMessage response) {
    var content = await response.Content.ReadAsStringAsync();
    _rawJson = content;
    var windingCodes = JsonConvert.DeserializeObject<List<WindingCode>>(content);
    if (windingCodes == null) {
      State = PageState.Error;
      return;
    }
    WindingCodeGroups = windingCodes.GroupBy(wc => wc.CodeTypeId);
    State = PageState.Loaded;
    await InvokeAsync(StateHasChanged);
  }

  private static int GetBreakpoint(int count) {
    return count switch {
      1 => 12,
      2 => 6,
      _ => 6
      };
  }

  private async Task HandleRootFolderChange(DirectoryMenu.FolderCallbackArgs folderArgs) {
    RootFolder = folderArgs.Folder;
    _folderPaths.Clear();
    if (folderArgs.SubFolders == null)
      return;

    _folderPaths = folderArgs.SubFolders.OrderBy(f => f).ToList();
    await PopulateFolderItemGroups();
  }

  private Task PopulateFolderItemGroups() {
    _folderItemGroups.Clear();
    var splitChar = _folderPaths.First().Contains('/') ? '/' : '\\';
    var folderGroups = _folderPaths.Where(f => f.Count(c => c is '/' or '\\') == 1)
      .Select(f => f.Split(splitChar).Last())
      .Distinct()
      .OrderBy(f => f)
      .ToList();

    foreach (var folderGroup in folderGroups) {
      var matchFolderRegex = new Regex($@"\{splitChar}{folderGroup}\{splitChar}");
      var folderItems = new List<string>() {
        folderGroup
      };
      folderItems.AddRange(_folderPaths.Where(f => matchFolderRegex.IsMatch(f) || f == folderGroup).OrderBy(f => f).ToList());
      _folderItemGroups.Add(folderItems.Count > 0 ? (folderGroup, folderItems) : (folderGroup, null));
    }

    _folderItemGroups.Sort((x, y) => {
      return x.Item2 switch {
        null when y.Item2 == null => string.Compare(x.Item1, y.Item1, StringComparison.OrdinalIgnoreCase),
        null => -1,
        _ => y.Item2 == null ? 1 : string.Compare(x.Item1, y.Item1, StringComparison.OrdinalIgnoreCase)
        };
    });
    StateHasChanged();
    return Task.CompletedTask;
  }
  private void DirectHub_OnWindingCodesDbUpdated() {
    Snackbar.Add("Winding Codes Database Updated", Severity.Success, config => {
      config.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow;
      config.ShowCloseIcon = true;
      config.ShowCloseIcon = true;
      config.CloseAfterNavigation = true;
    });
  }

  public void Dispose() {
    _pwaServer.Dispose();
  }
  private async Task ConvertStopsToJson() {
  //TODO: Values are not being updated in DataBase.
  //iterate through all the expansion panels and get the selected folder path for each winding code and then
  // convert the codes to IEnumerable<WindingCode> and then invoke DirectoryHub.SaveWindingCodesDb with the IEnumerable, true

    var windingCodesJson = WindingCodeGroups.SelectMany(group => group).ToList();
  // iterate over each winding code in the list and prepend the root folder path to the folder path
    foreach (var windingCode in windingCodesJson.Where(windingCode => windingCode.FolderPath != null)) {
      windingCode.FolderPath = windingCode.FolderPath!.Replace("..", RootFolder?.Path);
    }
    await DirectoryHub.Hub!.InvokeAsync("SaveWindingCodesDb", windingCodesJson, true);
  }
  private string FormatWindingCode(WindingCode windingCode) {
    if (RootFolder?.Path == null)
      return windingCode.FolderPath ?? string.Empty;
    if (_showFullPaths)
      return windingCode.FolderPath!;
    return windingCode.FolderPath?.Replace(RootFolder.Path, "..") ?? string.Empty;
  }
}
