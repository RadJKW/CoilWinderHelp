@inject HubClientService DirectoryHub
@using Microsoft.AspNetCore.SignalR.Client
@using MudBlazorPWA.Client.ViewModels
@implements IDisposable

<div class="align-center d-flex flex-row flex-shrink-1 flex-wrap justify-start ">

  @foreach (Folder? breadcrumb in _breadCrumbs) {
    <MudTooltip Duration="1000"
        Text="@breadcrumb?.Path">
      <MudChip Text="@breadcrumb!.Name"
          Icon="@Icons.Material.Outlined.Folder"
          Size="Size.Large"
          Label="true"
          OnClick="() => SetFolderAsRoot(breadcrumb)">
      </MudChip>
    </MudTooltip>
    <MudText Typo="Typo.h4"
        GutterBottom="false"
        Inline="false">
      /
    </MudText>
  }
  <MudMenu Class="px-2"
      Icon="@Icons.Material.Outlined.ChevronRight"
      IconColor="Color.Secondary"
      Size="Size.Medium"
      Variant="Variant.Outlined"

      ActivationEvent="MouseEvent.LeftClick"
      AnchorOrigin="Origin.TopRight"
      TransformOrigin="Origin.TopLeft">
    <MudListSubheaderExtended T="string"
        Class="mt-n2"
        SecondaryBackground="true">
      Select Folder
    </MudListSubheaderExtended>
    <MudDivider/>
    @foreach (Folder folder in RootFolder!.SubFolders.Where(f => f.SubFolders.Any())) {
      <MudMenuItem Icon="@Icons.Material.Filled.Folder"
          OnClick="() => NavigateToFolder(folder)">
        @folder.Name
      </MudMenuItem>
    }
  </MudMenu>

</div>

@code {

  public enum StartupFolder  {
    Division1,
    Division2,
    Division3,
    None
  }
  [Parameter]
  public EventCallback<FolderCallbackArgs> OnRootFolderChange { get; set; }
  [Parameter]
  public EventCallback<string[]> OnFoldersArrayReceived { get; set; }
  [Parameter]
  public EventCallback<Folder[]?> OnFoldersSubmitted { get; set; }
  [Parameter, EditorRequired]
  public StartupFolder Folder { get; set; }

  public class FolderCallbackArgs {
    public Folder? Folder { get; init; }
    public List<string>? SubFolders { get; init; }
  }

  #region Properties
  private readonly List<Folder?> _breadCrumbs = new();
  private readonly List<Folder> _selectedFolders = new();
  private Folder? RootFolder { get; set; }
  private string[]? _folders;
  private string? StartFolderPath {
    get {
      return Folder switch {
        StartupFolder.Division1 => @"B:\CoilWinderTraining-Edit\D1 Pole",
        StartupFolder.Division2 => @"B:\CoilWinderTraining-Edit\D2 Pad",
        StartupFolder.Division3 => @"B:\CoilWinderTraining-Edit\D3 3PH",
        _ => null
      };
    }
  }
  #endregion

  protected override async Task OnInitializedAsync() {

   var enumerable = await DirectoryHub.GetFoldersInPath(StartFolderPath!);
    OnReceiveAllFolders(enumerable);
    await base.OnInitializedAsync();
  }

  // after the parameters have been set,
  private void OnReceiveAllFolders(IEnumerable<string> folders ) {
    _folders = folders.Select(f => f.Insert(0, AppConfig.BasePath)).ToArray();
    RootFolder = BuildDirectoryTree(_folders);
    NavigateToFolder(RootFolder!);
  }
  public void Dispose() {
  }

  private Task SetFolderAsRoot(Folder newRoot) {
    int index = _breadCrumbs.IndexOf(newRoot);
    _breadCrumbs.RemoveRange(index, _breadCrumbs.Count - index);
    RootFolder = newRoot;
    _breadCrumbs.Add(newRoot);
    return RootFolderChanged();
  }
  private Task NavigateToFolder(Folder folder) {
    RootFolder = folder;
    _breadCrumbs.Add(folder);
    return RootFolderChanged();
  }

  private async Task RootFolderChanged() {
  // filter out the folder paths that are not in the current root folder
  // after the filter, replace the root folder path with "../" or "..\" depending on the OS
    string splitChar = RootFolder!.Path!.Contains('\\') ? @"\" : @"/";
    var subFolders = _folders!.Where(f => f.StartsWith(RootFolder!.Path! + splitChar)).ToList();
    subFolders = subFolders.Select(f => f.Replace(RootFolder!.Path!, $"..")).ToList();
    await OnRootFolderChange.InvokeAsync(new() {
      Folder = RootFolder,
      SubFolders = subFolders
    });
    await InvokeAsync(StateHasChanged);
  }
  private async Task SubmitSelectedFolders() {
    var folders = _selectedFolders.ToArray();
    _selectedFolders.RemoveAll(_ => true);
    await OnFoldersSubmitted.InvokeAsync(folders);
  }

  private static Folder? BuildDirectoryTree(IEnumerable<string> paths) {
    var enumerable = paths.ToList();
    if (!enumerable.Any()) {
      return null;
    }

    string firstPath = enumerable.First();
    char splitChar = firstPath.Contains('\\') ? '\\' : '/';
    var splitPaths = enumerable.Select(path => path.Split(splitChar)).ToList();
    int commonParts = FindCommonParts(splitPaths);

    var root = new Folder(
      splitPaths[0][commonParts],
      string.Join(splitChar, splitPaths[0].Take(commonParts + 1)), splitChar);

    foreach (string[] splitPath in splitPaths) {
      AddRemainingParts(root, splitPath, commonParts, splitChar);
    }
    return root;
  }
  private static int FindCommonParts(IEnumerable<string[]> splitPaths) {
    var commonParts = int.MaxValue;
    var stringsEnumerable = splitPaths.ToList();
    for (var i = 0; i < stringsEnumerable.First().Length; i++) {
      string currentPart = stringsEnumerable.First()[i];
      int count = 1 + stringsEnumerable.Skip(1)
        .TakeWhile(splitPath => i < splitPath.Length && splitPath[i] == currentPart)
        .Count();
      if (count == stringsEnumerable.Count()) {
        commonParts = i;
      } else {
        break;
      }
    }
    return commonParts;
  }
  private static void AddRemainingParts(Folder? root, IReadOnlyList<string> splitPath, int
    commonParts, char splitChar) {
    Folder? current = root;
    for (int i = commonParts + 1; i < splitPath.Count; i++) {
      Folder? next = current?.SubFolders.FirstOrDefault(f => f.Name == splitPath[i]);
      if (next == null) {
        next = new(splitPath[i], $"{current?.Path}{splitChar}{splitPath[i]}", splitChar);
        current?.SubFolders.Add(next);
      }
      current = next;
    }
  }
}
