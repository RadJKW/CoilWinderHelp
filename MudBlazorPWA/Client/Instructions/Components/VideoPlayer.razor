@implements IAsyncDisposable
@inject IJSRuntime JsRuntime
@inject IHttpClientFactory HttpClientFactory


@if (VideoUrl != null) {

  <video
      id="@Id"
      onloadedmetadata="@JsSetVideoPlayer"
      controls
      style="width: 100%; height: 100%">
    <source
        src="@VideoUrl"
        type="video/mp4"/>

  </video>
}

@code {
  // use reflection to gets the NameSpace of this component
  [Parameter]
  public string Id { get; set; } = "video-player";


  private IJSObjectReference? _videoJs;

    private const string RelativePath = "files";
    private const string RelativeVideoUrl = "TrainingVideos/Unsorted/WINDING%20SPEC%20DOWNLOAD%20Z80.mp4";

  private HttpClient? FileServer { get; set; }
  private string? VideoUrl { get; set; }

  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();
    FileServer = HttpClientFactory.CreateClient("PwaServer");
    VideoUrl = $"{FileServer.BaseAddress}{RelativePath}/{RelativeVideoUrl}";
  }
  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
      _videoJs = await JsRuntime
        .InvokeAsync<IJSObjectReference>(
          "import", "./Instructions/Components/VideoPlayer.razor.js");
    }
  }


  private async Task JsSetVideoPlayer() {
    if (_videoJs != null)
      await _videoJs.InvokeVoidAsync("init", Id);
  }


  public async ValueTask DisposeAsync() {
    if (_videoJs != null) {
      await _videoJs.DisposeAsync();
    }
  }
}
