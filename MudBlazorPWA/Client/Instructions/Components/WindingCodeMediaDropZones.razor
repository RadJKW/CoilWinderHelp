@using MudBlazorPWA.Client.Instructions.Pages
@using MudBlazorPWA.Client.Instructions.Dialogs
@typeparam T where T : DropItem
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@implements IDisposable
@inject NavigationManager NavigationManager
@inject HubClientService HubClientService
<div id="media-card"
    class="d-flex justify-center mud-width-full">
  <MudCard Elevation="4"
      Class="mud-width-full"
      Style="background-color: transparent"
      Outlined="true">
    <MudCardHeader Class="gap-x-4 mud-background-gray">
      <MudText Typo="Typo.h6">
        <strong>
          @WindingCode.Division: @WindingCode.Name
        </strong>
      </MudText>
      <MudButton StartIcon="@Icons.Material.Outlined.Upgrade"
          Size="Size.Small"
          Color="Color.Secondary"
          Variant="Variant.Outlined"
          OnClick="OpenCodeAutoDocs"
          Disabled="@(WindingCode.Media.Pdf == null && WindingCode.Media.Video == null)">
        View Media
      </MudButton>
      <MudButton StartIcon="@Icons.Material.Filled.ImportExport"
          Size="Size.Small"
          Color="Color.Default"
          Variant="Variant.Outlined"
          OnClick="OpenImportMediaDialog">
        Import Media
      </MudButton>
    </MudCardHeader>
    <MudDivider/>
    <MudCardContent>
      <MudGrid Spacing="2"
          Justify="Justify.Center">
        @foreach (DropZoneConfig? config in _dropZoneConfigs) {
          var identifier = $"{config.Identifier}-{WindingCode.Id}";
          <MudItem xs="9"
              lg="6">
            <div class="@config.ContainerClass">
              <div class="d-flex justify-flex-start mud-width-full">
                <MudText Typo="Typo.button"
                    Align="Align.Left">
                  <strong>@config.HeaderText</strong>
                </MudText>
              </div>
              <MudDropZone T="T"
                  Style="@DropZoneConfig.Style"
                  Class="@config.DropZoneClass"
                  CanDrop="@((item) => CanAcceptDrop(item, identifier))"
                  Identifier="@identifier">
              </MudDropZone>
            </div>
          </MudItem>
        }
      </MudGrid>
    </MudCardContent>
    <MudCardActions>
      <MudStack Row
          Spacing="2"
          AlignItems="AlignItems.Center">
        <MudButton StartIcon="@Icons.Material.Filled.Verified"
            Size="Size.Small"
            Disabled="_submitDisabled"
            OnClick="CommitItemChanges">
          Submit
        </MudButton>

        <MudDropZone T="T"
            Class="align-center d-flex justify-center mud-alert-text-error mud-height-full"
            OnlyZone="true"
            Identifier="trash">

          <MudIcon Icon="@Icons.Material.Outlined.Delete"
              Color="Color.Error"
              Class="mx-6 my-1"/>
        </MudDropZone>
        <MudIconButton Icon="@Icons.Material.Outlined.Print"
            Color="Color.Secondary"
            Size="Size.Small"
            OnClick="LogFolderItems"/>
      </MudStack>
    </MudCardActions>
  </MudCard>
</div>

@code{

    private const string DzCodeFolder = "DZ-Code-Folder";
    private const string DzCodePdf = "DZ-Code-Pdf";
    private const string DzCodeVideo = "DZ-Code-Video";
    private const string DzCodeRefMedia = "DZ-Code-Ref";


  [CascadingParameter]
  public AdminDashboard AdminDashboard { get; set; } = default!;

  [Parameter]
  [EditorRequired]
  public List<T>? FolderDropItems { get; set; }

  [Parameter]
  [EditorRequired]
  public required CellContext<WindingCode> Context { get; set; }

  [Parameter]
  [EditorRequired]
  public required WindingCode WindingCode { get; set; }

  [Parameter]
  public EventCallback<WindingCode> OnCommittedItemChanges { get; set; }

  private List<DropZoneConfig> _dropZoneConfigs = new();
  private List<T> _dropItemChanges = new();
  private bool _submitDisabled = true;

  protected override void OnInitialized() {
    AdminDashboard.OnDrop += AdminDashboard_OnDrop;
    base.OnInitialized();
    _dropZoneConfigs = new() {
      new() {
        ContainerClass = "mud-alert-text-success",
        Identifier = DzCodeFolder,
        HeaderText = "Folder Path"
      },
      new() {
        ContainerClass = "mud-alert-text-warning",
        Identifier = DzCodePdf,
        HeaderText = "PDF"
      },
      new() {
        ContainerClass = "mud-alert-text-info",
        Identifier = DzCodeVideo,
        HeaderText = "Video"
      },
      new() {
        ContainerClass = "mud-alert-text-primary",
        Identifier = DzCodeRefMedia,
        HeaderText = "Reference Media"
      }
    };
  }

  private void AdminDashboard_OnDrop(string? identifier, AdminDashboard.DropItemAction action) {
    Console.WriteLine("OnDrop Event");
    if (identifier == null) {
      Console.WriteLine("is null");
      return;
    }

    _submitDisabled = false;

    switch (action) {
  // if action is Remove, then remove the item from FolderDropItems
      case AdminDashboard.DropItemAction.Removed: {
        Console.WriteLine($"Remove item with identifier: {identifier} ");
        return;
      }
  // if action is Add, then add the item to FolderDropItems
      case AdminDashboard.DropItemAction.Added: {
        Console.WriteLine($"Added item with identifier: {identifier}");
        return;
      }
      case AdminDashboard.DropItemAction.Updated:
        Console.WriteLine($"Updated item with identifier: {identifier}");
        break;
      default:
        throw new ArgumentOutOfRangeException(nameof(action), action, null);
    }


  // get the last segment of the identifier which is the code id
  // split by "-" and get the last segment
    var codeId = identifier.Split('-').Last();
    if (codeId != WindingCode.Id.ToString()) {
      Console.WriteLine("not the same code id");
      return;
    }
    _submitDisabled = false;
  }

  private bool CanAcceptDrop(T item, string dropZoneIdentifier) {
    if (FolderDropItems == null)
      return false;

    bool isNotDuplicate = FolderDropItems.All(d => d.DropZoneId != dropZoneIdentifier);
    bool isDropZoneEmpty = FolderDropItems.All(d => d.DropZoneId != dropZoneIdentifier);
    return dropZoneIdentifier[..dropZoneIdentifier.LastIndexOf('-')] switch {
      DzCodeFolder => item is { Type: DropItemType.Folder, IsCopy: false }
                      && isNotDuplicate
                      && isDropZoneEmpty,
      DzCodePdf => item is { Type: DropItemType.Pdf, IsCopy: false }
                   && isNotDuplicate
                   && isDropZoneEmpty,
      DzCodeVideo => item is { Type: DropItemType.Video, IsCopy: false }
                     && isNotDuplicate
                     && isDropZoneEmpty,
      DzCodeRefMedia => item.Type != DropItemType.Folder
                        && item.IsCopy is false
                        && isNotDuplicate,
      _ => false
      };
  }
  private async Task CommitItemChanges() {
    WindingCode contextItem = Context.Item;
    bool hasNewDropItems = MapDropZoneItemsToWindingCode(contextItem);
    if (!hasNewDropItems)
      return;

    _submitDisabled = true;
    await OnCommittedItemChanges.InvokeAsync(contextItem);
  }
  private Task RevertItemChanges() {
    _submitDisabled = true;
    FolderDropItems?.AddRange(_dropItemChanges);
    StateHasChanged();
    return Task.CompletedTask;
  }
  private bool MapDropZoneItemsToWindingCode(WindingCode contextItem) {
    int id = contextItem.Id;
    string[] dropZoneNames = _dropZoneConfigs.Select(d => d.Identifier + "-" + id).ToArray();

    if (FolderDropItems == null)
      return false;

    var dropZoneItems = FolderDropItems.Where(d => dropZoneNames.Contains(d.DropZoneId)).ToArray();

    if (dropZoneItems.Length == 0)
      return false;

    var hasFolderItem = false;
    var hasPdfItem = false;
    var hasVideoItem = false;
    var hasRefMediaItem = false;

    Console.WriteLine("foreach item in dropZoneItems");
    foreach (var item in dropZoneItems) {
      string dropZonePrefix = item.DropZoneId[..item.DropZoneId.LastIndexOf('-')];
      Console.WriteLine("dropZonePrefix -> " + dropZonePrefix);
      switch (dropZonePrefix) {
        case DzCodeFolder:
          contextItem.FolderPath = item.Path;
          hasFolderItem = true;
          break;
        case DzCodePdf:
          contextItem.Media.Pdf = item.Path;
          hasPdfItem = true;
          break;
        case DzCodeVideo:
          contextItem.Media.Video = item.Path;
          hasVideoItem = true;
          break;
        case DzCodeRefMedia: {
          Console.WriteLine("Case -> DzCodeRefMedia");
          Console.WriteLine("Item Path -> " + item.Path);
          contextItem.Media.RefMedia?.Add(item.Path);
          hasRefMediaItem = true;
        }
          break;
      }
    }

    if (!hasFolderItem)
      contextItem.FolderPath = null;

    if (!hasPdfItem)
      contextItem.Media.Pdf = null;

    if (!hasVideoItem)
      contextItem.Media.Video = null;
    if (!hasRefMediaItem)
      contextItem.Media.RefMedia = null;

    Console.WriteLine("WindingCode -> " + contextItem);
    return true;
  }
  private async Task OpenCodeAutoDocs() {
    var newTabUrl = $"{NavigationManager.BaseUri}{WindingCode.Id}";
    await JSRuntime.InvokeVoidAsync("openFilePreview", newTabUrl);
  }


  public class DropZoneConfig {
    private string _containerClass = "pa-2";

    public static string Style => string.Empty;

    public string DropZoneClass { get; init; } = "drop-zone-gallery";
    public string ContainerClass { get => _containerClass; init => _containerClass = $"{_containerClass} {value}"; }

    public required string Identifier { get; init; }
    public required string HeaderText { get; init; }
  }

  public void Dispose() { AdminDashboard.OnDrop -= AdminDashboard_OnDrop; }
  private Task LogFolderItems() {
    if (FolderDropItems == null) {
      Console.WriteLine("FolderDropItems is null");
      return Task.CompletedTask;
    }
    string[] dropZoneNames = _dropZoneConfigs.Select(d => d.Identifier + "-" + Context.Item.Id).ToArray();
    var dropZoneItems = FolderDropItems.Where(d => dropZoneNames.Contains(d.DropZoneId)).ToArray();
    foreach (var item in dropZoneItems) {
      Console.WriteLine($" Item of type {item.Type}");
      Console.WriteLine($"Path: {item.Path}");
    }
    return Task.CompletedTask;
  }
  private async Task OpenImportMediaDialog() {
    var parameters = new DialogParameters {
      { "WindingCode", Context.Item }
    };

    var options = new DialogOptions() {
      CloseButton = true,
      MaxWidth = MaxWidth.ExtraSmall,
      NoHeader = true
    };

    var dialog = await DialogService.ShowAsync<ImportMediaDialog>("Delete", parameters, options);
    var result = await dialog.Result;

    if (!result.Canceled) {
      var windingCode = result.Data as WindingCode;

      if (windingCode is null) return;
      Context.Item.FolderPath = windingCode.FolderPath;
      Context.Item.Media = windingCode.Media;
      _submitDisabled = true;
      await OnCommittedItemChanges.InvokeAsync(Context.Item);
    }
  }
}
