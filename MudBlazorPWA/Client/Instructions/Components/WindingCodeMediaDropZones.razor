<div id="media-card"
    class="d-flex justify-center mud-width-full">
  <MudCard Elevation="4"
      Class="mud-width-full"
      Style="background-color: transparent"
      Outlined="true">
    <MudCardHeader Class="mud-background-gray">
      <MudText Typo="Typo.h6">
        <strong>
          Assigned Media
        </strong>
      </MudText>
    </MudCardHeader>
    <MudDivider/>
    <MudCardContent>
      <MudGrid Spacing="2"
          Justify="Justify.Center">
        @foreach (DropZoneConfig? config in _dropZoneConfigs) {
          <MudItem xs="12"
              lg="6">
            <div class="@config.ContainerClass">
              <div class="d-flex justify-flex-start mud-width-full">
                <MudText Typo="Typo.button"
                    Align="Align.Left">
                  <strong>@config.HeaderText</strong>
                </MudText>
              </div>
              <MudDropZone T="DropItem"
                  Style="@config.Style"
                  Class="@config.DropZoneClass"
                  CanDrop="@config.CanDropFunc"
                  Identifier="@($"{config.Identifier}-{WindingCode.Id}")">
              </MudDropZone>
            </div>
          </MudItem>
        }
      </MudGrid>
    </MudCardContent>
    <MudCardActions>
      <MudStack Row
          Spacing="2">
        <MudButton StartIcon="@Icons.Material.Filled.Verified"
            OnClick="CommitItemChanges">
          Submit
        </MudButton>
      </MudStack>
    </MudCardActions>
  </MudCard>
</div>

@code{

    private const string DzCodeFolder = "DZ-Code-Folder";
    private const string DzCodePdf = "DZ-Code-Pdf";
    private const string DzCodeVideo = "DZ-Code-Video";
    private const string DzCodeRefMedia = "DZ-Code-Ref";

  /// <summary>
  ///  Used to validate the if items can be dropped into the drop zones
  ///</summary>
  [Parameter, EditorRequired]
  public List<DropItem>? FolderDropItems { get; set; }

  [Parameter, EditorRequired]
  public required CellContext<WindingCode> Context { get; set; }

  [Parameter, EditorRequired]
  public required WindingCode WindingCode { get; set; }

  [Parameter]
  public EventCallback<WindingCode> OnCommittedItemChanges { get; set; }

  public class DropZoneConfig {
    private string _style = string.Empty;

    private string _containerClass = "pa-2";

    public string Style {
      get => _style;
      init => _style = $"{_style}{(value.EndsWith(";") ? value : value + ";")}";
    }

    public string DropZoneClass { get; init; } = "drop-zone-gallery";
    public string ContainerClass {
      get => _containerClass;
      init => _containerClass = $"{_containerClass} {value}";
    }

    public required string Identifier { get; init; }
    public required string HeaderText { get; init; }
    public Func<DropItem, bool>? CanDropFunc { get; init; }
  }

  private List<DropZoneConfig> _dropZoneConfigs = new();

  protected override void OnInitialized() {
    base.OnInitialized();
    _dropZoneConfigs = new() {
      new() {
        ContainerClass = "mud-alert-text-success",
        Identifier = DzCodeFolder,
        HeaderText = "Folder Path",
        CanDropFunc = CanDropFolder
      },
      new() {
        ContainerClass = "mud-alert-text-warning",
        Identifier = DzCodePdf,
        HeaderText = "PDF",
        CanDropFunc = CanDropPdf
      },
      new() {
        ContainerClass = "mud-alert-text-info",
        Identifier = DzCodeVideo,
        HeaderText = "Video",
        CanDropFunc = CanDropVideo
      },
      new() {
        ContainerClass = "mud-alert-text-secondary",
        Identifier = DzCodeRefMedia,
        HeaderText = "Reference Media",
        CanDropFunc = CanDropReferenceMedia
      }
    };
  }

  private async Task CommitItemChanges() {
    WindingCode contextItem = Context.Item;
    bool hasNewDropItems = MapDropZoneItemsToWindingCode(contextItem);
    if (hasNewDropItems)
      await OnCommittedItemChanges.InvokeAsync(contextItem);
  }
  private bool MapDropZoneItemsToWindingCode(WindingCode contextItem) {
    int id = contextItem.Id;
    string[] dropZoneNames = _dropZoneConfigs.Select(d => d.Identifier + "-" + id).ToArray();

    if (FolderDropItems == null)
      return false;

    var dropZoneItems = FolderDropItems.Where(d => dropZoneNames.Contains(d.Identifier)).ToArray();

    if (dropZoneItems.Length == 0)
      return false;

    var refMedia = new List<string>();

    foreach (DropItem item in dropZoneItems) {
      string? dropZonePrefix = item.Identifier?[..item.Identifier.LastIndexOf('-')];
      switch (dropZonePrefix) {
        case DzCodeFolder:
          contextItem.FolderPath = item.Path;
          break;
        case DzCodePdf:
          contextItem.Media.Pdf = item.Path;
          break;
        case DzCodeVideo:
          contextItem.Media.Video = item.Path;
          break;
        case DzCodeRefMedia: {
          Console.WriteLine("Case -> DzCodeRefMedia");
          if (item.Path != null) {
           Console.WriteLine("Item Path -> " + item.Path);
            refMedia.Add(item.Path);
          }
        }
          break;
      }
    }
    if (refMedia.Count > 0)
      contextItem.Media.RefMedia = refMedia;
    if (contextItem.Media.RefMedia != null)
      Console.WriteLine("Refs ->" + string.Join(", ", contextItem.Media.RefMedia.ToArray()));
    return true;
  }

  private bool CanDropVideo(DropItem arg) {
    if (FolderDropItems == null) return false;

    return arg.Type == DropItemType.Video && FolderDropItems.Any(d => d.Path == arg.Path || d.Name == arg.Name);
  }
  private bool CanDropPdf(DropItem arg) {
    if (FolderDropItems == null) return false;

    return arg.Type == DropItemType.Pdf && FolderDropItems.Any(d => d.Path == arg.Path || d.Name == arg.Name);
  }
  private bool CanDropFolder(DropItem arg) {
    if (FolderDropItems == null) return false;

    return arg.Type == DropItemType.Folder && FolderDropItems.Any(d => d.Path == arg.Path || d.Name == arg.Name);
  }
  private bool CanDropReferenceMedia(DropItem arg) {
    if (FolderDropItems == null) return false;

    return arg.Type is DropItemType.Pdf or DropItemType.Video && FolderDropItems.Any(d => d.Path == arg.Path || d.Name == arg.Name);
  }
}
