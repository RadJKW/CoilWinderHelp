@using MudBlazorPWA.Client.Instructions.Pages
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject HubClientService HubClientService
<div id="media-card"
    class="d-flex justify-center mud-width-full">
  <MudCard Elevation="4"
      Class="mud-width-full"
      Style="background-color: transparent"
      Outlined="true">
    <MudCardHeader Class="gap-x-4 mud-background-gray">
      <MudText Typo="Typo.h6">
        <strong>
          Assigned Media
        </strong>
      </MudText>
      <MudButton StartIcon="@Icons.Material.Outlined.Upgrade"
          Size="Size.Small"
          Color="Color.Secondary"
          Variant="Variant.Outlined"
          OnClick="OpenCodeAutoDocs"
          Disabled="@(WindingCode.Media.Pdf == null && WindingCode.Media.Video == null)">
        View Media
      </MudButton>
    </MudCardHeader>
    <MudDivider/>
    <MudCardContent>
      <MudGrid Spacing="2"
          Justify="Justify.Center">
        @foreach (DropZoneConfig? config in _dropZoneConfigs) {
          var identifier = $"{config.Identifier}-{WindingCode.Id}";
          <MudItem xs="9"
              lg="6">
            <div class="@config.ContainerClass">
              <div class="d-flex justify-flex-start mud-width-full">
                <MudText Typo="Typo.button"
                    Align="Align.Left">
                  <strong>@config.HeaderText</strong>
                </MudText>
              </div>
              <MudDropZone T="DropItem"
                  Style="@config.Style"
                  Class="@config.DropZoneClass"
                  CanDrop="@((item) => CanAcceptDrop(item, identifier))"
                  Identifier="@identifier">
              </MudDropZone>
            </div>
          </MudItem>
        }
      </MudGrid>
    </MudCardContent>
    <MudCardActions>
      <MudStack Row
          Spacing="2">
        <MudButton StartIcon="@Icons.Material.Filled.Verified"
            Size="Size.Small"
            Disabled="_submitDisabled"
            OnClick="CommitItemChanges">
          Submit
        </MudButton>
      </MudStack>
    </MudCardActions>
  </MudCard>
</div>

@code{

  #region Constants
    private const string DzCodeFolder = "DZ-Code-Folder";
    private const string DzCodePdf = "DZ-Code-Pdf";
    private const string DzCodeVideo = "DZ-Code-Video";
    private const string DzCodeRefMedia = "DZ-Code-Ref";
  #endregion

  #region Parameters
  [CascadingParameter]
  public AdminDashboard AdminDashboard { get; set; } = default!;

  [Parameter]
  [EditorRequired]
  public List<DropItem>? FolderDropItems { get; set; }

  [Parameter]
  [EditorRequired]
  public required CellContext<IWindingCode> Context { get; set; }

  [Parameter]
  [EditorRequired]
  public required IWindingCode WindingCode { get; set; }

  [Parameter]
  public EventCallback<IWindingCode> OnCommittedItemChanges { get; set; }
  #endregion

  private List<DropZoneConfig> _dropZoneConfigs = new();
  private bool _submitDisabled = true;

  protected override void OnInitialized() {
    base.OnInitialized();
    AdminDashboard.OnDrop += AdminDashboard_OnDrop;
    _dropZoneConfigs = new() {
      new() {
        ContainerClass = "mud-alert-text-success",
        Identifier = DzCodeFolder,
        HeaderText = "Folder Path"
      },
      new() {
        ContainerClass = "mud-alert-text-warning",
        Identifier = DzCodePdf,
        HeaderText = "PDF"
      },
      new() {
        ContainerClass = "mud-alert-text-info",
        Identifier = DzCodeVideo,
        HeaderText = "Video"
      },
      new() {
        ContainerClass = "mud-alert-text-secondary",
        Identifier = DzCodeRefMedia,
        HeaderText = "Reference Media"
      }
    };
  }

  private void AdminDashboard_OnDrop(string? identifier) {
    Console.WriteLine("OnDrop Event");
    if (identifier == null) {
      Console.WriteLine("is null");
      return;
    }

    DropItem? dropItem = FolderDropItems?.FirstOrDefault(d => d.Identifier == identifier);
    if (dropItem == null)
      return;

    _submitDisabled = false;
  }

  #region Methods
  private async Task CommitItemChanges() {
    IWindingCode contextItem = Context.Item;
    bool hasNewDropItems = MapDropZoneItemsToWindingCode(contextItem);
    if (!hasNewDropItems)
      return;

    _submitDisabled = true;
    await OnCommittedItemChanges.InvokeAsync(contextItem);
  }
  private bool MapDropZoneItemsToWindingCode(IWindingCode contextItem) {
    int id = contextItem.Id;
    string[] dropZoneNames = _dropZoneConfigs.Select(d => d.Identifier + "-" + id).ToArray();

    if (FolderDropItems == null)
      return false;

    var dropZoneItems = FolderDropItems.Where(d => dropZoneNames.Contains(d.Identifier)).ToArray();

    if (dropZoneItems.Length == 0)
      return false;

    var refMedia = new List<string>();

    foreach (DropItem item in dropZoneItems) {
      string? dropZonePrefix = item.Identifier?[..item.Identifier.LastIndexOf('-')];
      switch (dropZonePrefix) {
        case DzCodeFolder:
          contextItem.FolderPath = item.Path;
          break;
        case DzCodePdf:
          contextItem.Media.Pdf = item.Path;
          break;
        case DzCodeVideo:
          contextItem.Media.Video = item.Path;
          break;
        case DzCodeRefMedia: {
          Console.WriteLine("Case -> DzCodeRefMedia");
          if (item.Path != null) {
            Console.WriteLine("Item Path -> " + item.Path);
            refMedia.Add(item.Path);
          }
        }
          break;
      }
    }
    if (refMedia.Count > 0)
      contextItem.Media.RefMedia = refMedia;
    if (contextItem.Media.RefMedia != null)
      Console.WriteLine("Refs ->" + string.Join(", ", contextItem.Media.RefMedia.ToArray()));
    return true;
  }
  private bool CanAcceptDrop(DropItem item, string dropZoneIdentifier) {
  // create a switch statement that handles each drop item type (folder, pdf, video)
  // and returns true if the item is of the type and FolderDropItems does not contain the item where item.Identifier == dropZoneIdentifier
  // otherwise return false

  // trim the last '-' and everything after it from the dropZoneIdentifier
  // then use a switch statement to determine the dropzone
    if (FolderDropItems == null)
      return false;

    bool isNotDuplicate = !FolderDropItems.Any(d => d.Identifier == dropZoneIdentifier && d.Path == item.Path);
    bool isDropZoneEmpty = FolderDropItems.All(d => d.Identifier != dropZoneIdentifier);
    return dropZoneIdentifier[..dropZoneIdentifier.LastIndexOf('-')] switch {
      DzCodeFolder => item is { Type: DropItemType.Folder, IsCopy: false }
                      && isNotDuplicate
                      && isDropZoneEmpty,
      DzCodePdf => item is { Type: DropItemType.Pdf, IsCopy: false }
                   && isNotDuplicate
                   && isDropZoneEmpty,
      DzCodeVideo => item is { Type: DropItemType.Video, IsCopy: false }
                     && isNotDuplicate
                     && isDropZoneEmpty,
      DzCodeRefMedia => item is { Type: DropItemType.Video, IsCopy: false}
                        || item is { Type: DropItemType.Pdf, IsCopy: false }
                        && isNotDuplicate,
      _ => false
      };
  }
  #endregion

  #region Classes
  public class DropZoneConfig {
    private string _style = string.Empty;

    private string _containerClass = "pa-2";

    public string Style {
      get => _style;
      init => _style = $"{_style}{(value.EndsWith(";") ? value : value + ";")}";
    }

    public string DropZoneClass { get; init; } = "drop-zone-gallery";
    public string ContainerClass {
      get => _containerClass;
      init => _containerClass = $"{_containerClass} {value}";
    }

    public required string Identifier { get; init; }
    public required string HeaderText { get; init; }
  }
  #endregion

  private async Task OpenCodeAutoDocs() {
    var newTabUrl = $"{NavigationManager.BaseUri}{WindingCode.Id}";
    await JSRuntime.InvokeVoidAsync("openFilePreview", newTabUrl);
  }
}
