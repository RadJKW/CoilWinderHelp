@layout MainLayout
@inherits LayoutComponentBase
@inject DocViewService DocViewSettings
@implements IDisposable
<CascadingValue Value="this">
  <MudLayout>
    @if (AppSettings!.AppBarIsVisible) {

      <MudAppBar Elevation="5"
          Dense="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu"
            Color="Color.Inherit"
            Edge="Edge.Start"
            OnClick="@(ToggleDrawer)"/>
        <MudSpacer/>
        @*display the current PAGE TITLE *@

        <MudText Typo="Typo.h6"
            Style="text-wrap: none">
          @(PageTitle)
        </MudText>

        <MudSpacer/>
        <AppbarButtons/>
      </MudAppBar>
    }
    <MudDrawer Class="docview drawer-left"
        @bind-Open="@AppSettings!.DrawerOpen"
        Anchor="Anchor.Left"
        Elevation="1"
        Variant="@DrawerVariant.Mini"
        ClipMode="DrawerClipMode.Always"
        PreserveOpenState="true"
        OpenMiniOnHover="@AppSettings!.DrawerOpenOnHover">
      <NavMenu />
      <MudDivider Class="mx-3" DividerType="DividerType.Middle"/>
      <MudSpacer/>
      <MudDivider Class="px-2 flex-grow-0"/>
      <AutoDocSettings/>
    </MudDrawer>
    <MudMainContent Class="docview main-content">
      <MudContainer Class="docview main-container"
          MaxWidth="MaxWidth.ExtraExtraLarge">
        @Body
      </MudContainer>
    </MudMainContent>

  </MudLayout>
</CascadingValue>

@code {


  // create a delegate for the event that will be raised when the drawer is toggled

  public delegate void ToggleDrawerEventHandler();

  public event ToggleDrawerEventHandler? ToggleDrawerEvent;

  // public delegate void ToggleDrawerRightEventHandler();
  //
  // public event ToggleDrawerRightEventHandler? ToggleDrawerRightEvent;

  private AppSettings? AppSettings { get; set; }

  protected override async Task OnInitializedAsync() {
    AppSettings = DocViewSettings.AppSettings;
    DocViewSettings.MajorUpdateOccured += DocViewSettings_OnMajorUpdateOccured!;
    await base.OnInitializedAsync();
  }
  private void DocViewSettings_OnMajorUpdateOccured(object sender, EventArgs e) {
    AppSettings = DocViewSettings.AppSettings;
    InvokeAsync(StateHasChanged);
  }
  public void Dispose() {
    if (DocViewSettings != null) {
      DocViewSettings.MajorUpdateOccured -= DocViewSettings_OnMajorUpdateOccured!;
    }
  }

  public void HandleToggleDrawerEvent() {
    ToggleDrawerEvent?.Invoke();
  }

  private string PageTitle { get; set; } = "MudBlazorTest";

  void ToggleDrawer() {
    AppSettings!.DrawerOpen = !AppSettings.DrawerOpen;
    DocViewSettings.SetAppSettings(AppSettings);
  }
}
