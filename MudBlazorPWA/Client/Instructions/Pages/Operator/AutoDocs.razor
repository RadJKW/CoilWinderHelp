@page "/"
@layout DocViewLayout
@inject IHttpClientFactory HttpClientFactory
@implements IDisposable

<MudMainContent
    Class="docview main-content">
  <MudContainer
      Class="docview main-container"
      MaxWidth="MaxWidth.ExtraLarge">
    <div
        class="pdf-grid">
      <div
          class="pdf-content">
       @if (VideoUrl is not null) {
                 <PdfViewer
                     Src="@PdfUrl">
                 </PdfViewer>
               }
        <div class="z-10 d-flex justify-start align-content-start mud-height-full"
            style="margin: -100%; padding-top: 20%; padding-left: 5%">
        <MudText
            Typo="Typo.h4"
            Style="">
          PDF
        </MudText>
        </div>
      </div>
    </div>
  </MudContainer>
</MudMainContent>
<MudDrawer
    Class="docview drawer-right"
    @bind-Open="@_drawerRightOpen"
    Anchor="Anchor.Right"
    Fixed="true"
    Elevation="1"
    Variant="@DrawerVariant.Mini"
    MiniWidth="15%"
    Width="30%"
    ClipMode="DrawerClipMode.Always"
    PreserveOpenState="true"
    OpenMiniOnHover="@_openOnHover">
  <div
      class="index-grid">
    <div
        class="video-header">
      <MudSkeleton
          SkeletonType="SkeletonType.Rectangle"
          Animation="Animation.False"
          Height="100%"
          Width="100%">
      </MudSkeleton>

      <div
          class=" z-10 d-flex flex-column justify-center align-center mud-width-full my-2"
          style="margin-inline: -100%">
         <MudText Typo="Typo.body1">Tools</MudText>
        <MudButtonGroup
            Size="Size.Medium"
            OverrideStyles="false">

          <MudIconButton
              Disabled="_openOnHover"
              Size="Size.Medium"
              Color="Color.Dark"
              Variant="Variant.Filled"
              Class="justify-center align-center"
              Icon="@(_drawerRightOpen ? Icons.Material.Outlined.ArrowCircleRight : Icons.Material.Outlined.ArrowCircleLeft)"
              OnClick="ToggleDrawerRight">
          </MudIconButton>
          <MudTooltip
              Arrow="true"
              Text="Toggles 'OpenOnHover'">
            <MudButton
                Size="Size.Medium"
                Variant="Variant.Filled"
                Color="@(_openOnHover ? Color.Dark : Color.Error)"
                OnClick="ToggleHover">
              Hover
            </MudButton>
          </MudTooltip>
        </MudButtonGroup>
      </div>
    </div>
    <div
        class="video-content">
      <MudSkeleton
          SkeletonType="SkeletonType.Rectangle"
          Animation="Animation.Pulse"
          Height="100%"
          Width="100%">
      </MudSkeleton>
      <MudText
          Class="z-10 mud-width-full"
          Style="margin-inline: -100%"
          Typo="Typo.h4"
          Align="Align.Center">
        Videos List
      </MudText>
    </div>
  </div>

</MudDrawer>

@code{

      private const string RelativePath = "files";

      private const string RelativeVideoUrl = "TrainingVideos/Unsorted/WINDING%20SPEC%20DOWNLOAD%20Z80.mp4";
      private const string RelativePdfUrl = "D1 Pole/01.Setup/Computer OPS/computerOps.pdf";

  private bool _drawerOpen;
  private bool _drawerRightOpen;
  private bool _openOnHover;

  [CascadingParameter]
  public DocViewLayout? DocViewLayout { get; set; }

  private HttpClient? FileServer { get; set; }

  private string? VideoUrl { get; set; }
  private string? PdfUrl { get; set; }

  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();
    FileServer = HttpClientFactory.CreateClient("PwaServer");
    VideoUrl = $"{FileServer.BaseAddress}{RelativePath}/{RelativeVideoUrl}";
    PdfUrl = $"{FileServer.BaseAddress}{RelativePath}/{RelativePdfUrl}";

  }


  protected override Task OnParametersSetAsync() {
    DocViewLayout!.ToggleDrawerEvent += ToggleDrawer;
  // DocViewLayout!.ToggleDrawerRightEvent += ToggleDrawerRight;
    return base.OnParametersSetAsync();
  }

  private void ToggleDrawer() {
    _drawerOpen = !_drawerOpen;
  }

  private void ToggleDrawerRight() {
    _drawerRightOpen = !_drawerRightOpen;
  }
  private void ToggleHover() {
    _openOnHover = !_openOnHover;
  }
  public void Dispose() {
    DocViewLayout!.ToggleDrawerEvent -= ToggleDrawer;
  // DocViewLayout!.ToggleDrawerRightEvent -= ToggleDrawerRight;
  }
}
