@page "/"
@layout DocViewLayout
@inject IHttpClientFactory HttpClientFactory
@implements IDisposable

<div
class="auto-docs container">
<MudSplitter
    Class="auto-docs splitter"
    @bind-Dimension="@_startWidth"
    StyleBar="width: 6px !important;"
    OnDoubleClicked="HandleDoubleClicked"
    EnableSlide="true"
    EnableMargin="false"
    Sensitivity="0.1d">
  <StartContent>
    <PrimaryContent
        Src="@PdfUrl">
    </PrimaryContent>
    @if (_startWidth <= 50) {
      <div
          class="d-flex justify-center">
        <MudIconButton
            Size="Size.Large"
            Variant="Variant.Filled"
            Class="justify-center align-center"
            Icon="@(_startWidth >= 50 ? Icons.Material.Outlined.ArrowCircleLeft : Icons.Material.Outlined.ArrowCircleRight)"
            OnClick="StartContentClicked">
        </MudIconButton>
      </div>
    }
  </StartContent>
  <EndContent>
    @if (_startWidth > 50) {
      <div
          class="d-flex justify-center">
        <MudIconButton
            Size="Size.Large"
            Variant="Variant.Filled"
            Class="justify-center align-center"
            Icon="@(_startWidth >= 50 ? Icons.Material.Outlined.ArrowCircleLeft : Icons.Material.Outlined.ArrowCircleRight)"
            OnClick="EndContentClicked">
        </MudIconButton>
      </div>
    }
    <SecondaryContent/>
  </EndContent>
</MudSplitter>
</div>

@code{

    private const string RelativePath = "files";
    private const string RelativePdfUrl = "D1 Pole/01.Setup/Computer OPS/computerOps.pdf";

  private bool _drawerOpen;
  private double _startWidth = 65;

  [CascadingParameter]
  public DocViewLayout? DocViewLayout { get; set; }

  private HttpClient? FileServer { get; set; }

  private string? PdfUrl { get; set; }

  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();
    FileServer = HttpClientFactory.CreateClient("PwaServer");
    PdfUrl = $"{FileServer.BaseAddress}{RelativePath}/{RelativePdfUrl}";

  }


  protected override Task OnParametersSetAsync() {
    DocViewLayout!.ToggleDrawerEvent += ToggleDrawer;
  // DocViewLayout!.ToggleDrawerRightEvent += ToggleDrawerRight;
    return base.OnParametersSetAsync();
  }

  private void ToggleDrawer() {
    _drawerOpen = !_drawerOpen;
  }

  public void Dispose() {
    DocViewLayout!.ToggleDrawerEvent -= ToggleDrawer;
  // DocViewLayout!.ToggleDrawerRightEvent -= ToggleDrawerRight;
  }
  private void HandleDoubleClicked() {
    _startWidth = _startWidth <= 50 ? 70 : 30;
  }
  private void StartContentClicked() {
    _startWidth = 70;
  }
  private void EndContentClicked() {
    _startWidth = 40;
  }
}
