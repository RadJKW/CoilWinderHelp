@page "/StopEmulator"
@layout DocViewLayout
@inject HubClientService HubClientService
<MudScrollbar Selector=""
    Width="6"
    BorderRadius="6"
    Color="#594ae2ff"
    Hide="false"/>

<MudDropContainer T="DropItem"
    Items="_items"
    ItemsSelector="@((item, dropzone) => item.Identifier == dropzone)"
    ItemDropped="ItemUpdated"
    Class="stops-container">

  <ChildContent>
    <div class="stops-left-column ">

      <FolderSelector
          OnFoldersSubmitted="HandleFoldersSubmitted"/>
    </div>
    <div class="stops-right-column">
      @foreach (IWindingCode windingCode in WindingCodes ?? Enumerable.Empty<IWindingCode>()) {
        <div>
          <MudListSubheaderExtended T="string"
              Class="align-center d-flex flex-row justify-center pa-2"
              SecondaryBackground="true"
              Sticky="true">
            <div class="mud-typography-h5">
              @windingCode.Name
            </div>
            <div class="mud-typography-h6">
              : ( @windingCode.Code )
            </div>
          </MudListSubheaderExtended>
          <MudDropZone T="DropItem"
              Identifier="@windingCode.Name"
              Class="align-center d-flex flex-column justify-center mud-paper-outlined overflow-auto pa-2 rounded-2">
            @if (_items is null || _items.All(x => x.Identifier != windingCode.Name)) {
              <MudText Typo="Typo.button"
                  Align="Align.Center"
                  Class="border border-dashed">
                Drag Here
              </MudText>
            }
          </MudDropZone>
        </div>
      }
    </div>
  </ChildContent>

  <ItemRenderer>
    <div Class="align-center d-flex justify-center ma-2 mud-paper-outlined pa-3 rounded">
      <MudIcon Icon="@Icons.Custom.Uncategorized.Folder"
          Color="Color.Inherit"
          Class="mr-2"/>
      @context.Name
    </div>
  </ItemRenderer>

</MudDropContainer>

@code{

  #region Properties
  private readonly List<DropItem>? _items = new();
  private IEnumerable<IWindingCode>? WindingCodes { get; set; }
  #endregion

  protected override async Task OnInitializedAsync() {
    WindingCodes = await HubClientService.GetCodeList();
    await base.OnInitializedAsync();
  }
  private static void ItemUpdated(MudItemDropInfo<DropItem> dropItem) {
    dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
  }


  private Task HandleFoldersSubmitted(Folder[]? folders) {
    if (_items is null)
      return Task.CompletedTask;

    _items.RemoveAll(x => x.Identifier == "Drop Zone 0");

    if (folders != null) {
      _items.AddRange(folders.Where(x => _items.All(y => y.Name != x.Name))
        .Select(x => new DropItem {
          Name = x.Name,
          Identifier = "Drop Zone 0"
        }));
    }
    return InvokeAsync(StateHasChanged);
  }


  public class DropItem {
    public string? Name { get; init; }
    public string? Identifier { get; set; }
    public string? Value { get; init; }
  }






}
