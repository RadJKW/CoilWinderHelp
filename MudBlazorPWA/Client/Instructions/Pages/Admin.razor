@page "/Admin"
@layout DocViewLayout
@inject AdminEditorState State
@implements IDisposable


@if (Loading) {
  <div class="align-center d-flex justify-center mud-width-full"
      style="height: 50%">
    <MudProgressCircular Indeterminate
        Color="Color.Secondary"
        Size="Size.Large"/>
  </div>
} else {
  <MudDropContainer T="IDirectoryItem"
      @ref="MudDropContainer"
      Items="@State.GetPaginatedFiles()"
      Class="admin-drop-container mud-height-full"
      CanDropClass="mud-border-success cursor-cell"
      NoDropClass="mud-border-error cursor-not-allowed"
      DraggingClass="item-dragging"
      ApplyDropClassesOnDragStarted="true"
      ItemsSelector="@((item, dropzone) => item.DropZoneId == dropzone)"
      ItemDropped="ItemUpdated"
      ItemDraggingClass="mud-alert-text-success">
    <div class="directory-tree-grid">

      <div class="dark-background directory-tree-component overflow-hidden rounded-lg">
        <DirectoryTree class="bordered directory-tree"/>
      </div>

      <MudStack Justify="Justify.FlexStart"
          AlignItems="AlignItems.Stretch"
          Class="bordered dark-background mud-width-full overflow-y-hidden">
        <AdminDataGrid WindingCodes="@State.WindingCodes.ToList()"/>
        <AdminCodeMediaDropCard WindingCode="@State.SelectedWindingCode"></AdminCodeMediaDropCard>
      </MudStack>
    </div>
  </MudDropContainer>
}

@code{


  private MudDropContainer<IDirectoryItem> MudDropContainer { get; set; } = null!;
  private bool Loading { get; set; } = true;
  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();
    State.StateChanged += AdminStateChanged;
  }

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (State.SelectedItem != null) Loading = false;
    await base.OnAfterRenderAsync(firstRender);
  }


  private void AdminStateChanged() { StateHasChanged(); }

  public void Dispose() { State.StateChanged -= AdminStateChanged; }

  private void ItemUpdated(MudItemDropInfo<IDirectoryItem> dropInfo) {
    if (dropInfo.Item != null)
      dropInfo.Item.DropZoneId = dropInfo.DropzoneIdentifier;
    MudDropContainer.Refresh();
  }

}
