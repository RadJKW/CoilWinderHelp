@page "/Admin"
@layout DocViewLayout
@inject AdminEditorState State
@implements IDisposable

@if (_loading) {
  <div class="align-center d-flex justify-center mud-width-full"
      style="height: 50%">
    <MudProgressCircular Indeterminate
        Color="Color.Secondary"
        Size="Size.Large"/>
  </div>
} else {
  <div>

    <MudIconButton Icon="@Icons.Material.Outlined.Home"
        OnClick="() => _navigator.NavigateToRoot()">
    </MudIconButton>
    <MudIconButton Icon="@Icons.Material.Filled.ArrowLeft"
        OnClick="() => State.NavigateBack()"
        Disabled="@( _navigator.NavigationHistory.Count == 1)"/>
  </div>

  if (State.CurrentDirectory is {Folders: not null}) {
    <div>
      @foreach (var subdir in State.CurrentDirectory.Folders) {
        <MudButton Color="@Color.Secondary"
            Variant="@Variant.Outlined"
            OnClick="() => State.NavigateToFolder(subdir)">
          @subdir.Name
        </MudButton>
      }
    </div>
    <div>
      @foreach (var file in State.CurrentDirectory.Files) {
        <MudButton Color="@Color.Tertiary"
            Variant="@Variant.Outlined">
          @file.Name
        </MudButton>
      }
    </div>
  }
}

@code{


  private bool _loading = true;
  private IDirectoryNavigator _navigator = default!;

  protected override async Task OnInitializedAsync() {
    State.StateChanged += AdminStateChanged;
    _navigator = State.DirectoryNavigator;
    await State.FetchDirectoryTree();
  }
  private void AdminStateChanged() {
    _loading = false;
    StateHasChanged();
  }

  public void Dispose() {
    State.StateChanged -= AdminStateChanged;
  }

}
