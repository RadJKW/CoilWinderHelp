@page "/Admin"
@using System.ComponentModel.DataAnnotations
@layout DocViewLayout
<MudDropContainer T="KanbanTaskItem"
    @ref="_dropContainer"
    Items="@_tasks"
    ItemsSelector="@((item, column) => item.Status == column)"
    ItemDropped="TaskUpdated"
    Class="d-flex flex-row">
  <ChildContent>
    @foreach (var item in _sections) {
      <MudPaper Elevation="0"
          Width="224px"
          MinHeight="400px"
          Class="d-flex flex-column ma-4 mud-background-gray pa-4 rounded-lg">
        <MudToolBar DisableGutters="true">
          <MudText Typo="Typo.subtitle1">
            <b>@item.Name</b>
          </MudText>
          <MudSpacer/>
          <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz"
              AnchorOrigin="Origin.BottomRight"
              TransformOrigin="Origin.TopRight"
              ListClass="pa-2 d-flex flex-column"
              PopoverClass="mud-elevation-25">
            <MudButton Size="Size.Small"
                Color="Color.Error"
                StartIcon="@Icons.Material.Outlined.Delete"
                OnClick="@(() => DeleteSection(item))">
              Delete Section
            </MudButton>
            <MudButton Size="Size.Small"
                Color="Color.Default"
                StartIcon="@Icons.Material.Rounded.Edit">
              Rename Section
            </MudButton>
          </MudMenu>
        </MudToolBar>
        <MudDropZone T="KanbanTaskItem"
            Identifier="@item.Name"
            Class="mud-height-full"/>
        @if (item.NewTaskOpen) {
          <MudPaper Elevation="25"
              Class="pa-2 rounded-lg">
            <MudTextField @bind-Value="item.NewTaskName"
                Placeholder="New Task"
                DisableUnderLine="true"
                Margin="Margin.Dense"
                Class="mt-n2 mx-2">
            </MudTextField>
            <MudButton OnClick="@(() => AddTask(item))"
                Size="Size.Small"
                Color="Color.Primary"
                FullWidth="true">
              Add Task
            </MudButton>
          </MudPaper>
        } else {
          <MudButton OnClick="@(() => item.NewTaskOpen = !item.NewTaskOpen)"
              StartIcon="@Icons.Material.Filled.Add"
              FullWidth="true"
              Class="py-2 rounded-lg">
            Add Task
          </MudButton>
        }
      </MudPaper>
    }
    <MudPaper Class="pa-4 mud-background"
        Elevation="0"
        Width="224px">
      @if (_addSectionOpen) {
        <MudPaper Elevation="0"
            Width="224px"
            Class="d-flex flex-column mud-background-gray pa-4 rounded-lg">
          <EditForm Model="@_newSectionModel"
              OnValidSubmit="OnValidSectionSubmit">
            <DataAnnotationsValidator/>
            <MudTextField @bind-Value="_newSectionModel.Name"
                For="@(() => _newSectionModel.Name)"
                Placeholder="New Section"
                DisableUnderLine="true">
            </MudTextField>
            <MudButton ButtonType="ButtonType.Submit"
                Size="Size.Small"
                Color="Color.Primary"
                FullWidth="true">
              Add Section
            </MudButton>
          </EditForm>
        </MudPaper>
      } else {
        <MudButton OnClick="OpenAddNewSection"
            Variant="Variant.Outlined"
            StartIcon="@Icons.Material.Filled.Add"
            Color="Color.Primary"
            Class="py-2 rounded-lg"
            FullWidth="true">
          Add Section
        </MudButton>
      }
    </MudPaper>
  </ChildContent>
  <ItemRenderer>
    <MudPaper Elevation="25"
        Class="my-3 pa-4 rounded-lg">
      @context.Name
    </MudPaper>
  </ItemRenderer>
</MudDropContainer>

@code {
  private MudDropContainer<KanbanTaskItem>? _dropContainer;

  private bool _addSectionOpen;
  /* handling board events */
  private static void TaskUpdated(MudItemDropInfo<KanbanTaskItem> info) {
    info.Item.Status = info.DropzoneIdentifier;
  }

  /* Setup for board  */

  private readonly List<KanBanSections> _sections = new() {
    new KanBanSections("To Do", false, String.Empty),
    new KanBanSections("In Process", false, String.Empty),
    new KanBanSections("Done", false, String.Empty),
  };

  public class KanBanSections {
    public string? Name { get; init; }
    public bool NewTaskOpen { get; set; }
    public string NewTaskName { get; set; }

    public KanBanSections(string? name, bool newTaskOpen, string newTaskName) {
      Name = name;
      NewTaskOpen = newTaskOpen;
      NewTaskName = newTaskName;
    }
  }

  public class KanbanTaskItem {
    public string Name { get; init; }
    public string? Status { get; set; }

    public KanbanTaskItem(string name, string? status) {
      Name = name;
      Status = status;
    }
  }

  private readonly List<KanbanTaskItem> _tasks = new() {
    new KanbanTaskItem("Write unit test", "To Do"),
    new KanbanTaskItem("Some doc's stuff", "To Do"),
    new KanbanTaskItem("Walking the dog", "To Do"),
  };

  readonly KanBanNewForm _newSectionModel = new KanBanNewForm();

  public class KanBanNewForm {
    [Required]
    [StringLength(10, ErrorMessage = "Name length can't be more than 10.")]
    public string? Name { get; set; }
  }

  private void OnValidSectionSubmit(EditContext context) {
    _sections.Add(new KanBanSections(_newSectionModel.Name, false, String.Empty));
    _newSectionModel.Name = string.Empty;
    _addSectionOpen = false;
  }

  private void OpenAddNewSection() {
    _addSectionOpen = true;
  }

  private void AddTask(KanBanSections section) {
    _tasks.Add(new KanbanTaskItem(section.NewTaskName, section.Name));
    section.NewTaskName = string.Empty;
    section.NewTaskOpen = false;
    _dropContainer?.Refresh();
  }

  private void DeleteSection(KanBanSections section) {
    if (_sections.Count == 1) {
      _tasks.Clear();
      _sections.Clear();
    } else {
      int newIndex = _sections.IndexOf(section) - 1;
      if (newIndex < 0) {
        newIndex = 0;
      }

      _sections.Remove(section);

      var tasks = _tasks.Where(x => x.Status == section.Name);
      foreach (var item in tasks) {
        item.Status = _sections[newIndex].Name;
      }
    }
  }
}
