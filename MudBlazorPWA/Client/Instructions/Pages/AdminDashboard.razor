@page "/AdminDashboard"
@layout DocViewLayout
@inject HubClientService HubClientService
@inject ISnackbar Snackbar
@implements IDisposable

<div class="mt-6 mx-4">

  @if (_windingCodesList.Any() == false) {
    <MudProgressLinear Indeterminate="true"/>
  } else {
    <MudGrid Spacing="4">
      <MudItem xs="12"
          Class="d-flex justify-center mud-width-full">

        <MudCard Style="width: 75%">
          <MudCardContent>
            <div class="align-center d-flex flex-column gap-1 justify-center mud-width-full">

              <div class="d-flex flex-row gap-6 justify-center mx-auto">
                <div class="d-flex justify-start mx-auto px-4">

                  <MudIconButton Color="Color.Primary"
                      Icon="@Icons.Material.Outlined.Refresh"
                      Variant="Variant.Outlined"
                      Size="Size.Small"
                      OnClick="() => HubClientService.GetCodeList()">
                  </MudIconButton>
                  <MudIconButton Color="Color.Warning"
                      Icon="@Icons.Material.Filled.DeleteOutline"
                      Variant="Variant.Outlined"
                      Size="Size.Small"
                      OnClick="() => _windingCodesList.Clear()">
                  </MudIconButton>
                </div>
                <MudText Typo="Typo.h6">Winding Codes</MudText>
                <MudText Typo="Typo.body2">Total: <strong>@_windingCodesList.Count</strong></MudText>
              </div>
              <MudDivider FlexItem="true"
                  DividerType="DividerType.FullWidth"/>
              <div class="d-flex flex-wrap justify-center">
                <MudSwitch @bind-Checked="@_readOnly"
                    Color="Color.Primary">
                  Read Only
                </MudSwitch>
              </div>
            </div>
          </MudCardContent>
        </MudCard>
      </MudItem>

      <MudItem xs="12"
          Class="d-flex justify-center mud-width-full">
        <MudDataGrid T="WindingCode"
            Items="@_windingCodesList"
            Height="70vh"
            ReadOnly="@_readOnly"
            EditMode="DataGridEditMode.Form"
            EditTrigger="DataGridEditTrigger.OnRowClick"
            StartedEditingItem="@StartedEditingItem"
            CanceledEditingItem="@CanceledEditingItem"
            CommittedItemChanges="@CommittedItemChanges"
            FixedHeader="true"
            Striped="true"
            Bordered="true"
            Dense="true">
          <Columns>
            <HierarchyColumn T="WindingCode"/>
            <PropertyColumn Property="x => x.Id"
                T="WindingCode"
                TProperty="int"
                IsEditable="false"
                Hideable="true">
              <EditTemplate>
              </EditTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.Division.ToString()"
                Title="Division"
                T="WindingCode"
                TProperty="string"
                IsEditable="false"/>
            <PropertyColumn Property="x => x.Code"
                TProperty="string"
                T="WindingCode"
                IsEditable="false"/>
            <PropertyColumn Property="x => x.Name"
                T="WindingCode"
                TProperty="string"
                IsEditable="false"/>
            <PropertyColumn Property="x => x.CodeTypeId.ToString()"
                T="WindingCode"
                TProperty="string"
                Title="CodeType"
                CellStyle="text-align: center;"/>
          </Columns>
          <ChildRowContent>
            <MudCard>
              <MudCardHeader>
                <CardHeaderContent>
                  <MudText Typo="Typo.h6">Folder & Media</MudText>
                </CardHeaderContent>
              </MudCardHeader>
              <MudCardContent>
                <MudStack Spacing="1">
                  @{
                    var contextItems = new[] {
                      context.Item.FolderPath, context.Item.Media.Pdf, context.Item.Media.Video, context.Item.Media.ReferenceFolder
                    };

                    for (var i = 0; i < contextItems.Length; i++) {

                      // display the Name of the attreibute and the value in a row

                      // switch statement for the icons
                      switch (i) {
                        case 0:
                          <MudIcon Icon="@Icons.Material.Outlined.Folder" Color="Color.Primary"/>
                          break;
                        case 1:
                          <MudIcon Icon="@Icons.Material.Outlined.PictureAsPdf" Color="Color.Primary"/>
                          break;
                        case 2:
                          <MudIcon Icon="@Icons.Material.Outlined.VideoLibrary" Color="Color.Primary"/>
                          break;
                      case 3:
                          <MudIcon Icon="@Icons.Material.Outlined.Folder" Color="Color.Primary"/>
                          break;
                      }
                      var i1 = i;
                      <MudText Typo="Typo.body2">
                        @contextItems[i1]
                      </MudText>



                    }
                  }
                </MudStack>

              </MudCardContent>
            </MudCard>

          </ChildRowContent>

        </MudDataGrid>
      </MudItem>
    </MudGrid>
  }
</div>

@code {

  private readonly List<WindingCode> _windingCodesList = new();
  private bool _readOnly;
  protected override Task OnInitializedAsync() {
    HubClientService.WindingCodesDbUpdated += OnWindingCodesDbUpdated;
    HubClientService.WindingCodesListUpdated += (list) => {
      _windingCodesList.Clear();
      _windingCodesList.AddRange(list);
      StateHasChanged();
    };
    return base.OnInitializedAsync();
  }
  private void OnWindingCodesDbUpdated() {
    Snackbar.Add("Winding Codes Database Updated", Severity.Success);
  }

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
      HubClientService.GetCodeList();
    }
    await base.OnAfterRenderAsync(firstRender);
  }

  void IDisposable.Dispose() {
    HubClientService.WindingCodesDbUpdated -= OnWindingCodesDbUpdated;
    Snackbar.Dispose();
  }

  void StartedEditingItem(WindingCode item) {
    Snackbar.Add($"Started editing, Data = {System.Text.Json.JsonSerializer.Serialize(item)}", Severity.Info);
  }

  void CanceledEditingItem(WindingCode item) {
    Snackbar.Add($"Canceled editing, Data = {System.Text.Json.JsonSerializer.Serialize(item)}", Severity.Info);
  }

  void CommittedItemChanges(WindingCode item) {
    Snackbar.Add($"CommittedItemChanges ,Data =  {System.Text.Json.JsonSerializer.Serialize(item)}", Severity.Info);
  }

}
