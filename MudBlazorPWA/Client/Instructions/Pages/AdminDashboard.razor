@page "/AdminDashboard"
@layout DocViewLayout
@inject HubClientService HubClientService
@inject ISnackbar Snackbar
@inject ILogger<AdminDashboard> Logger
@implements IDisposable

<MudScrollbar Selector=""
    Width="6"
    Color="@Colors.DeepPurple.Accent3"
    BorderRadius="6"/>

<MudDropContainer T="DropItem"
    Items="_dropItems"
    Class="mud-width-full"
    ItemsSelector="@((item, dropzone) => item.Identifier == dropzone)"
    ItemDropped="ItemUpdated">
  <ChildContent>

    <div class="mt-6 mud-height-full mx-4">
      <MudStack Row
          Class="mud-width-full"
          AlignItems="AlignItems.Stretch"
          Justify="Justify.Center">

        <FolderSelector OnFoldersSubmitted="@HandleFoldersSubmitted"/>

        @switch (_windingCodesList.Count == 0) {
          case true:
            <MudProgressLinear Indeterminate="true"/>
            break;
          case false:


            <div class="data-grid-border mud-background-gray">
              <MudDataGrid T="WindingCode"
                  id="winding-codes-data-grid"
                  Class="mud-elevation-4"
                  Style="min-width: 60%;"
                  Items="@_windingCodesList"
                  QuickFilter="@DataGridQuickFilter"
                  Height="60vh"
                  EditDialogOptions="@(new DialogOptions() { MaxWidth = MaxWidth.False, FullWidth = true, CloseOnEscapeKey = true})"
                  Virtualize="true"
                  OverscanCount="5"
                  ShowMenuIcon="true"
                  Hover="true"
                  ReadOnly="@(_enableEdit == false)"
                  EditMode="DataGridEditMode.Form"
                  EditTrigger="DataGridEditTrigger.OnRowClick"
                  StartedEditingItem="@StartedEditingItem"
                  CanceledEditingItem="@CanceledEditingItem"
                  CommittedItemChanges="@CommittedItemChanges"
                  HorizontalScrollbar="false"
                  FixedHeader="true"
                  FilterMode="DataGridFilterMode.Simple"
                  FilterDefinitions="@_dataGridFilter"
                  Striped="true"
                  Bordered="true"
                  Dense="true">
                <ToolBarContent>
                  <MudStack Row
                      AlignItems="AlignItems.Center"
                      Justify="Justify.Center">
                    <MudTooltip Placement="Placement.Bottom"
                        Text="Table Settings">
                      <MudMenu Icon="@Icons.Material.Outlined.ExpandCircleDown"
                          Class="mud-background-gray"
                          AnchorOrigin="Origin.BottomLeft"
                          TransformOrigin="Origin.TopLeft"
                          Variant="Variant.Filled"
                          PopoverClass="py-1 px-2 border border-radius-4"
                          Size="Size.Small">
                        <MudCheckBox Label="Enable Edit"
                            @bind-Checked="_enableEdit"
                            Color="Color.Info"
                            Dense="true"
                            Size="Size.Small"/>
                      </MudMenu>
                    </MudTooltip>
                    <MudText Typo="Typo.h6">Winding-Stop Codes</MudText>
                    <MudMenu Label="@(_selectedDivisions.Any() ? string.Join(", ", _selectedDivisions) : "Division")"
                        StartIcon="@Icons.Material.Outlined.FilterAlt"
                        Dense="true"
                        LockScroll="true"
                        PositionAtCursor="true"
                        PopoverClass="data-grid-filter-popover mud-background-gray"
                        FullWidth="false"
                        Color="@(_selectedDivisions.Any() ? Color.Info : Color.Default)"
                        Variant="Variant.Outlined">
                      <div class="pt-1 px-2">
                        <MudStack Spacing="1">
                          @foreach (Division divEnum in Enum.GetValues(typeof(Division)).Cast<Division>()) {
                            <div class="border d-flex flex-column mud-width-full px-2">
                              <MudCheckBox Checked="@_selectedDivisions.Contains(divEnum)"
                                  CheckedChanged="(bool isChecked) => OnDivisionCheckedChanged(isChecked, divEnum)"
                                  Color="Color.Info"
                                  Dense="true"
                                  Size="Size.Small">
                                <MudText Class="mx-2"
                                    Typo="Typo.body2">
                                  @divEnum.ToString()
                                </MudText>
                              </MudCheckBox>
                            </div>
                          }
                        </MudStack>
                      </div>
                    </MudMenu>
                  </MudStack>
                  <MudSpacer/>
                  <MudTextField @bind-Value="_searchString"
                      Variant="Variant.Text"
                      Placeholder="Search"
                      Adornment="Adornment.Start"
                      Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium"
                      Class="mt-0">
                  </MudTextField>
                </ToolBarContent>
                <Columns>
                  <HierarchyColumn T="WindingCode"
                      ButtonDisabledFunc="@_assignedMediaDisabled"/>
                  <PropertyColumn Property="x => x.Id"
                      T="WindingCode"
                      TProperty="int"
                      IsEditable="false"
                      Hideable="true">
                    <EditTemplate/>
                  </PropertyColumn>
                  <PropertyColumn Property="x => x.Division.ToString()"
                      T="WindingCode"
                      TProperty="string"
                      Title="Dept"
                      IsEditable="false"
                      Hideable="true">
                    <EditTemplate/>
                  </PropertyColumn>
                  <PropertyColumn Property="x => x.Code"
                      TProperty="string"
                      T="WindingCode"
                      IsEditable="false">
                    <EditTemplate/>
                  </PropertyColumn>
                  <PropertyColumn Property="x => x.Name"
                      T="WindingCode"
                      TProperty="string"
                      IsEditable/>
                  <PropertyColumn Property="x => x.CodeTypeId.ToString()"
                      T="WindingCode"
                      TProperty="string"
                      Title="CodeType"
                      Hideable="true">
                    <EditTemplate>
                      <MudSelectExtended T="CodeTypeId"
                          Class="mt-4"
                          RelativeWidth="true"
                          ItemCollection="@(Enum.GetValues<CodeTypeId>().ToList())"
                          @bind-Value="@context.Item.CodeTypeId"
                          Margin="Margin.Dense"
                          Dense="true"
                          Variant="Variant.Outlined"
                          Label="CodeType">
                      </MudSelectExtended>
                    </EditTemplate>
                  </PropertyColumn>
                  <PropertyColumn Property="x => x.FolderPath"
                      T="WindingCode"
                      TProperty="string"
                      Hidden="true">
                    <EditTemplate>
                      <MudSelectExtended T="string"
                          Context="selectContext"
                          ItemCollection="@(_folderPathsCollection.OrderByDirection(SortDirection.Ascending, x => x).ToList())"
                          @bind-Value="@context.Item.FolderPath"
                          Margin="Margin.Dense"
                          Variant="Variant.Filled"
                          Clearable="true"
                          CloseIcon="true"
                          OnClearButtonClick="@(() => @context.Item.FolderPath = null)"
                          Color="Color.Dark"
                          Label="Assigned Folder"
                          Placeholder="Select a folder"
                          PopoverClass="folder-select-popover"
                          ForceShrink="true"
                          SearchBox="true"
                          SearchBoxPlaceholder="@($"\"{@context.Item.Name}\"")"
                          SearchBoxAutoFocus="true"
                          LockScroll="true"
                          DisablePopoverPadding="true">
                        <ItemTemplate>
                          <MudText Typo="Typo.button"> @selectContext.Value</MudText>
                        </ItemTemplate>
                      </MudSelectExtended>
                    </EditTemplate>
                  </PropertyColumn>
                  <PropertyColumn Property="x => x.Media.Pdf"
                      T="WindingCode"
                      TProperty="string"
                      IsEditable="false"
                      Hidden="true">
                    <EditTemplate/>
                  </PropertyColumn>
                </Columns>
                <ChildRowContent>
                  <WindingCodeMediaDropZones/>
                  @*<WindingCodeMediaCard Context="context"
                      FolderPathsCollection="_folderPathsCollection"
                      PdfPathsCollection="_pdfPathsCollection"
                      VideoPathsCollection="_videoPathsCollection"
                      OnCommittedItemChanges="CommittedItemChanges">
                  </WindingCodeMediaCard>*@

                </ChildRowContent>
              </MudDataGrid>
            </div>
            break;
        }

      </MudStack>
    </div>
  </ChildContent>

</MudDropContainer>

@code {
  private readonly List<DropItem> _dropItems = new();
  private readonly List<string> _pdfPathsCollection = new();
  private readonly List<WindingCode> _windingCodesList = new();
  private readonly List<string> _folderPathsCollection = new();
  private readonly List<string> _videoPathsCollection = new();
  private readonly List<Division> _selectedDivisions = new();
  private readonly List<FilterDefinition<WindingCode>> _dataGridFilter = new();
  private bool _enableEdit;
  private string? _searchString;

  protected override Task OnInitializedAsync() {
    HubClientService.WindingCodesDbUpdated += async () => await OnWindingCodesDbUpdated();
    return base.OnInitializedAsync();
  }
  private async Task OnWindingCodesDbUpdated() {
    Snackbar.Add("Winding Codes Database Updated", Severity.Success);
    await RefreshWindingCodes();
  }
  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
      var getWindingCodesTask = HubClientService.GetCodeList();
      var getFolderPathsTask = HubClientService.GetFoldersInPath();
      var getPdfFilesTask = HubClientService.ListPdfFiles();
      var getVideoFilesTask = HubClientService.ListVideoFiles();

      await Task.WhenAll(getWindingCodesTask, getFolderPathsTask, getPdfFilesTask, getVideoFilesTask);

      if (getWindingCodesTask.Result != null) {
        _windingCodesList.AddRange(getWindingCodesTask.Result);
        _folderPathsCollection.AddRange(getFolderPathsTask.Result);
        _pdfPathsCollection.AddRange(getPdfFilesTask.Result);
        _videoPathsCollection.AddRange(getVideoFilesTask.Result);
        StateHasChanged();
      }
    }
    await base.OnAfterRenderAsync(firstRender);
  }
  void IDisposable.Dispose() {
    Snackbar.Dispose();
  }

  #region QuickFilterSearch
  private readonly Dictionary<string, Func<WindingCode, string>> _columnMap = new() {
    ["CodeType"] = x => x.CodeTypeId.ToString(),
    ["CodeTypeId"] = x => x.CodeTypeId.ToString(),
    ["Code"] = x => x.Code,
    ["Name"] = x => x.Name,
    ["Division"] = x => x.Division.ToString(),
    ["Dept"] = x => x.Division.ToString()
  };

  private Func<WindingCode, bool> DataGridQuickFilter => x => {
    if (string.IsNullOrWhiteSpace(_searchString)) {
      return true;
    }

    var searchTerms = _searchString.Split(',').Select(s => s.Trim()).Where(s => !string.IsNullOrEmpty(s));
    foreach (string searchTerm in searchTerms) {
      int delimiterIndex = searchTerm.IndexOfAny(new[] {
        '=', ':'
      });
      if (delimiterIndex < 0) {
        bool matches = _columnMap.Values.Any(propertySelector => propertySelector(x).Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        if (!matches) {
          return false;
        }
      } else {
        string columnName = searchTerm[..delimiterIndex].Trim();
        if (!_columnMap.TryGetValue(columnName, out var propertySelector)) {
          continue;
        }

        string searchTermValue = searchTerm[(delimiterIndex + 1)..].Trim();
        string columnValue = propertySelector(x);
        if (!columnValue.Contains(searchTermValue, StringComparison.OrdinalIgnoreCase)) {
          return false;
        }
      }
    }

    return true;
  };
  #endregion

  #region DataGrid Methods
  private readonly Func<WindingCode, bool> _assignedMediaDisabled = (windingCode) => windingCode.FolderPath == null;
  private async Task RefreshWindingCodes() {
    var windingCodesList = await HubClientService.GetCodeList();
    if (windingCodesList != null) {
      _windingCodesList.Clear();
      _windingCodesList.AddRange(windingCodesList);
      StateHasChanged();
    }
  }


  private void StartedEditingItem(WindingCode item) {
    Snackbar.Add($"Started editing, Data = {System.Text.Json.JsonSerializer.Serialize(item)}", Severity.Info);
  }
  private void CanceledEditingItem(WindingCode item) {
    Snackbar.Add($"Canceled editing, Data = {System.Text.Json.JsonSerializer.Serialize(item)}", Severity.Info);
  }

  private async Task CommittedItemChanges(WindingCode item) {
    bool result = await HubClientService.UpdateWindingCode(item);
    if (!result) {
      Snackbar.Add($"Failed to commit changes, Data = {System.Text.Json.JsonSerializer.Serialize(item)}", Severity.Error);
      return;
    }
    Snackbar.Add($"Committed changes, Data = {System.Text.Json.JsonSerializer.Serialize(item)}", Severity.Success);
    WindingCode? updatedItem = await HubClientService.GetWindingCode(item.Id);
    if (updatedItem != null) {
      int index = _windingCodesList.FindIndex(x => x.Id == updatedItem.Id);
      _windingCodesList[index] = updatedItem;
      StateHasChanged();
    }
  }
  private void UpdateGridFilterList() {
    var enumerable = _selectedDivisions.ToList();
    Logger.LogInformation("Selected Divs: {DivFilter}", string.Join(", ", enumerable));
    if (!enumerable.Any()) {
      _dataGridFilter.Clear();
      return;
    }

    _dataGridFilter.Clear();
    _dataGridFilter.Add(new() {
      FilterFunction = (x) => { return enumerable.Any(d => d == x.Division); }
    });

    _selectedDivisions.Clear();
    _selectedDivisions.AddRange(enumerable);
  }

  private Task OnDivisionCheckedChanged(bool isChecked, Division divEnum) {
    if (isChecked) {
      _selectedDivisions.Add(divEnum);
    } else {
      _selectedDivisions.Remove(divEnum);
    }

    UpdateGridFilterList();
    return Task.CompletedTask;
  }
  #endregion

  private async Task HandleFoldersSubmitted(Folder[]? folders) {
    if (folders != null) {
      _dropItems.AddRange(folders.Where(x => _dropItems.All(y => y.Name != x.Name))
        .Select(x => new DropItem() {
          Name = x.Name,
          Identifier = "Drop Zone 0"
        }));
    } else {
      _dropItems.Clear();
    }


    await InvokeAsync(StateHasChanged);
  }
  private static void ItemUpdated(MudItemDropInfo<DropItem> dropItem) {
    dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
  }

  public class DropItem {
    public string? Name { get; init; }
    public string? Identifier { get; set; }
  }

}
