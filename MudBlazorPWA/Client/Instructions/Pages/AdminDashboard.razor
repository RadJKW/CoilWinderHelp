@page "/AdminDashboard"
@layout DocViewLayout
@inject HubClientService HubClientService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@implements IDisposable

<MudScrollbar Selector=""
    Width="6"
    Color="@Colors.DeepPurple.Accent3"
    BorderRadius="6"/>

<MudDropContainer T="DropItem"
    id="admin-dashboard"
    @ref="_dropContainer"
    Items="_dropItems.OrderBy(f => f.Name)"
    Class="mud-width-full"
    CanDropClass="mud-border-success cursor-cell"
    NoDropClass="mud-border-error cursor-not-allowed"
    DraggingClass="item-dragging"
    ApplyDropClassesOnDragStarted="true"
    ItemsSelector="@((item, dropzone) => item.Identifier == dropzone)"
    ItemDropped="ItemUpdated">
  <ChildContent>

    <MudStack Row
        Class="dashboard-content"
        AlignItems="AlignItems.Stretch"
        Justify="Justify.FlexStart">
      @switch (_windingCodesList.Count == 0) {
        case true:
          <MudProgressLinear Indeterminate="true"/>
          break;
        case false:
          <FolderSelector
              OnDropItemsUpdated="DropItemsUpdated"/>
          <div class="data-grid-border mud-background-gray">
            <WindingCodesTable WindingCodes="@_windingCodesList"
                FolderPaths="@_folderPathsCollection"
                DropItems="@_dropItems">
            </WindingCodesTable>
          </div>
          break;
      }
    </MudStack>
  </ChildContent>
  <ItemRenderer>
    @{
      var chipClass = "border border-solid drop-zone-item";
      string chipIcon;
      switch (context.Type) {
        case DropItemType.Folder:
          chipClass += " " + "folder-item";
          chipIcon = Icons.Material.Filled.Folder;
          break;
        case DropItemType.Pdf:
          chipClass += " " + "pdf-item";
          chipIcon = Icons.Material.Filled.PictureAsPdf;
          break;
        case DropItemType.Video:
          chipClass += " " + "video-item";
          chipIcon = Icons.Material.Filled.VideoLibrary;
          break;
        default:
          throw new ArgumentOutOfRangeException();
      }

      string? chipCloseIcon = context.IsCopy ? null : " ";

      <MudChip Class="@chipClass"
          UserAttributes="GetDropItemAttributes(context)"
          Icon="@chipIcon"
          Size="Size.Small"
          CloseIcon="@chipCloseIcon"
          OnClose="@(() => _dropItems.Remove(context))"
          Label="true">
        <p class="mud-typography-button">@context.Name</p>
      </MudChip>
    }
  </ItemRenderer>

</MudDropContainer>
