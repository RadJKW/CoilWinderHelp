@page "/AdminDashboard"
@layout DocViewLayout
@inject HubClientService HubClientService
@inject ISnackbar Snackbar
@implements IDisposable

<MudScrollbar Selector=""
    Width="6"
    Color="@Colors.DeepPurple.Accent3"
    BorderRadius="6"/>

<div class="mt-6 mx-4">
  <MudGrid Spacing="4">
    <MudItem xs="12"
        Class="d-flex justify-center mud-width-full">
      <MudCard Style="width: 75%">
        <MudCardContent>
          <div class="align-center d-flex flex-column gap-1 justify-center mud-width-full">
            <div class="d-flex flex-row gap-6 justify-center mx-auto">
              <div class="d-flex justify-start mx-auto px-4">
                <MudIconButton Color="Color.Primary"
                    Icon="@Icons.Material.Outlined.Refresh"
                    Variant="Variant.Outlined"
                    Size="Size.Small"
                    OnClick="RefreshWindingCodes">
                </MudIconButton>
                <MudIconButton Color="Color.Warning"
                    Icon="@Icons.Material.Filled.DeleteOutline"
                    Variant="Variant.Outlined"
                    Size="Size.Small"
                    OnClick="() => _windingCodesList.Clear()">
                </MudIconButton>
              </div>
              <MudText Typo="Typo.h6">Winding Codes</MudText>
              <MudText Typo="Typo.body2">Total: <strong>@_windingCodesList.Count</strong></MudText>
            </div>
            <MudDivider FlexItem="true"
                DividerType="DividerType.FullWidth"/>
            <div class="d-flex flex-wrap justify-center">
            </div>
          </div>
        </MudCardContent>
      </MudCard>
    </MudItem>
    @switch (_windingCodesList.Count == 0) {
      case true:
        <MudProgressLinear Indeterminate="true"/>
        break;
      case false:
        <MudItem xs="12"
            Class="d-flex justify-center">
          <div class="data-grid-border mud-background-gray">
            <MudDataGrid T="WindingCode"
                id="winding-codes-data-grid"
                Class="mud-elevation-4"
                Style="min-width: 60%;"
                Items="@_windingCodesList"
                QuickFilter="@DataGridQuickFilter"
                Height="50vh"
                Virtualize="true"
                OverscanCount="5"
                ShowMenuIcon="true"
                Hover="true"
                ReadOnly="@(_enableEdit != true)"
                EditMode="DataGridEditMode.Form"
                EditTrigger="DataGridEditTrigger.OnRowClick"
                StartedEditingItem="@StartedEditingItem"
                CanceledEditingItem="@CanceledEditingItem"
                CommittedItemChanges="@CommittedItemChanges"
                HorizontalScrollbar="false"
                FixedHeader="true"
                Striped="true"
                Bordered="true"
                Dense="true">
              <ToolBarContent>
                <MudStack Row
                    AlignItems="AlignItems.Center"
                    Justify="Justify.Center">
                  <MudTooltip Placement="Placement.Bottom"
                      Text="Table Settings">
                    <MudMenu Icon="@Icons.Material.Outlined.ExpandCircleDown"
                        Class="mud-background-gray"
                        AnchorOrigin="Origin.BottomLeft"
                        TransformOrigin="Origin.TopLeft"
                        Variant="Variant.Filled"
                        PopoverClass="py-1 px-2 border border-radius-4"
                        Size="Size.Small">
                      <MudCheckBox Label="Enable Edit"
                          @bind-Checked="_enableEdit"
                          Color="Color.Info"
                          Dense="true"
                          Size="Size.Small"/>
                    </MudMenu>
                  </MudTooltip>
                  <MudText Typo="Typo.h6">Winding-Stop Codes</MudText>
                </MudStack>
                <MudSpacer/>
                <MudTextField @bind-Value="_searchString"
                    Variant="Variant.Text"
                    Placeholder="Search"
                    Adornment="Adornment.Start"
                    Immediate="true"
                    AdornmentIcon="@Icons.Material.Filled.Search"
                    IconSize="Size.Medium"
                    Class="mt-0">
                </MudTextField>
              </ToolBarContent>
              <Columns>
                <HierarchyColumn T="WindingCode"
                    ButtonDisabledFunc="@_assignedMediaDisabled"/>
                <PropertyColumn Property="x => x.Id"
                    T="WindingCode"
                    TProperty="int"
                    IsEditable="false"
                    Hideable="true">
                  <EditTemplate/>
                </PropertyColumn>
                <PropertyColumn Property="x => x.Division.ToString()"
                    Title="Dept"
                    T="WindingCode"
                    TProperty="string"
                    IsEditable="false"
                    Hideable="true">
                  <EditTemplate/>
                </PropertyColumn>
                <PropertyColumn Property="x => x.Code"
                    TProperty="string"
                    T="WindingCode"
                    IsEditable="false">
                  <EditTemplate/>
                </PropertyColumn>
                <PropertyColumn Property="x => x.Name"
                    T="WindingCode"
                    TProperty="string"
                    IsEditable="false">
                  <EditTemplate/>
                </PropertyColumn>
                <PropertyColumn Property="x => x.CodeTypeId.ToString()"
                    T="WindingCode"
                    TProperty="string"
                    Title="CodeType"
                    Hideable="true">
                  <EditTemplate>
                    <MudSelectExtended T="CodeTypeId"
                        Class="mt-4"
                        RelativeWidth="true"
                        ItemCollection="@(Enum.GetValues<CodeTypeId>().ToList())"
                        @bind-Value="@context.Item.CodeTypeId"
                        Margin="Margin.Dense"
                        Dense="true"
                        Variant="Variant.Outlined"
                        Label="CodeType">
                    </MudSelectExtended>
                  </EditTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.FolderPath"
                    T="WindingCode"
                    TProperty="string"
                    Hidden="true">
                  <EditTemplate>
                    <MudSelectExtended T="string"
                        Context="selectContext"
                        ItemCollection="@(_folderPathsCollection.OrderByDirection(SortDirection.Ascending, x => x).ToList())"
                        @bind-Value="@context.Item.FolderPath"
                        Margin="Margin.Dense"
                        Variant="Variant.Filled"
                        Clearable="true"
                        CloseIcon="true"
                        OnClearButtonClick="@(() => @context.Item.FolderPath = null)"
                        Color="Color.Dark"
                        Label="Assigned Folder"
                        Placeholder="Select a folder"
                        PopoverClass="folder-select-popover"
                        ForceShrink="true"
                        SearchBox="true"
                        SearchBoxPlaceholder="@($"\"{@context.Item.Name}\"")"
                        SearchBoxAutoFocus="true"
                        LockScroll="true"
                        DisablePopoverPadding="true">
                      <ItemTemplate>
                        <MudText Typo="Typo.button"> @selectContext.Value</MudText>
                      </ItemTemplate>
                    </MudSelectExtended>
                  </EditTemplate>
                </PropertyColumn>

              </Columns>
              <ChildRowContent>
                <div class="d-flex justify-center mud-width-full">
                  <MudCard Style="width: 75%; background-color: transparent"
                      Elevation="4"
                      Outlined="true">
                    <MudCardHeader>
                      <MudText Typo="Typo.h6">
                        <strong>
                          Assigned Media
                        </strong>
                      </MudText>
                    </MudCardHeader>
                    <MudDivider/>
                    <MudCardContent>
                      <MudGrid Spacing="2"
                          Class="mud-width-full"
                          Justify="Justify.Center">
                        <MudItem xs="8">
                          <MudStack Spacing="2">
                            <MudAutocomplete T="string"
                                @bind-Value="@context.Item.FolderPath"
                                SearchFunc="@FolderSearchFunc"
                                Placeholder="@context.Item.FolderPath"
                                Label="@(nameof(WindingCode.FolderPath))"
                                Margin="Margin.Dense"
                                Variant="Variant.Outlined"/>
                            <MudAutocomplete T="string"
                                @bind-Value="@context.Item.Media.Pdf"
                                SearchFunc="@PdfSearchFunc"
                                Placeholder="@context.Item.Media.Pdf"
                                Label="@(nameof(WindingCode.Media.Pdf))"
                                Margin="Margin.Dense"
                                Variant="Variant.Outlined"/>
                            <MudAutocomplete T="string"
                                @bind-Value="@context.Item.Media.Video"
                                SearchFunc="@VideoSearchFunc"
                                Placeholder="@context.Item.Media.Video"
                                Label="@(nameof(WindingCode.Media.Video))"
                                Margin="Margin.Dense"
                                Variant="Variant.Outlined"/>
                            <MudAutocomplete T="string"
                                SearchFunc="@PdfSearchFunc"
                                Placeholder="@_pdfPathsCollection.Count.ToString()">
                            </MudAutocomplete>
                          </MudStack>
                        </MudItem>
                      </MudGrid>
                    </MudCardContent>
                    <MudCardActions>
                      <MudStack Row
                          Spacing="2">
                        @* TODO: // fix changes not saving to DB *@
                        <MudButton StartIcon="@Icons.Material.Filled.Verified"
                            OnClick="() => CommittedItemChanges(context.Item)">
                          Submit
                        </MudButton>
                      </MudStack>
                    </MudCardActions>
                  </MudCard>
                </div>
              </ChildRowContent>
            </MudDataGrid>
          </div>
        </MudItem>
        break;
    }
  </MudGrid>
</div>

@code {
  private readonly List<string> _pdfPathsCollection = new();
  private readonly List<WindingCode> _windingCodesList = new();
  private readonly List<string> _folderPathsCollection = new();
  private bool _enableEdit;
  private string? _searchString;

  // private static IEnumerable<(string? Placeholder, string Label, string Icon, WindingCode Item )> GetFields(WindingCode contextItem) {
  //   yield return (Placeholder: contextItem.FolderPath, Label: nameof(WindingCode.FolderPath), Icon: Icons.Material.Outlined.Folder, contextItem);
  //   yield return (Placeholder: contextItem.Media.Pdf, Label: nameof(WindingCode.Media.Pdf).ToUpper(), Icon: Icons.Material.Outlined.PictureAsPdf, contextItem);
  //   yield return (Placeholder: contextItem.Media.Video, Label: nameof(WindingCode.Media.Video).ToUpper(), Icon: Icons.Material.Outlined.VideoLibrary, contextItem);
  //   yield return (Placeholder: contextItem.Media.ReferenceFolder, Label: "REFERENCE FOLDER", Icon: Icons.Material.Outlined.PermMedia, contextItem);
  // }

  protected override Task OnInitializedAsync() {
    HubClientService.WindingCodesDbUpdated += OnWindingCodesDbUpdated;
    return base.OnInitializedAsync();
  }
  private void OnWindingCodesDbUpdated() {
    Snackbar.Add("Winding Codes Database Updated", Severity.Success);
    RefreshWindingCodes();
  }
  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
      var getWindingCodesTask = HubClientService.GetCodeList();
      var getFolderPathsTask = HubClientService.GetFoldersInPath();
      var getPdfFilePathsTask = HubClientService.ListPdfFiles();

      await Task.WhenAll(getWindingCodesTask, getFolderPathsTask, getPdfFilePathsTask);

      if (getWindingCodesTask.Result != null) {
        _windingCodesList.AddRange(getWindingCodesTask.Result);
        _folderPathsCollection.AddRange(getFolderPathsTask.Result);
        _pdfPathsCollection.AddRange(getPdfFilePathsTask.Result);
        StateHasChanged();
      }
    }
    await base.OnAfterRenderAsync(firstRender);
  }
  void IDisposable.Dispose() {
    HubClientService.WindingCodesDbUpdated -= OnWindingCodesDbUpdated;
    Snackbar.Dispose();
  }

  #region QuickFilterSearch
  private readonly Dictionary<string, Func<WindingCode, string>> _columnMap = new() {
    ["CodeType"] = x => x.CodeTypeId.ToString(),
    ["CodeTypeId"] = x => x.CodeTypeId.ToString(),
    ["Code"] = x => x.Code,
    ["Name"] = x => x.Name,
    ["Division"] = x => x.Division.ToString(),
    ["Dept"] = x => x.Division.ToString()
  };

  private Func<WindingCode, bool> DataGridQuickFilter => x => {
    if (string.IsNullOrWhiteSpace(_searchString)) {
      return true;
    }

    var searchTerms = _searchString.Split(',').Select(s => s.Trim()).Where(s => !string.IsNullOrEmpty(s));
    foreach (var searchTerm in searchTerms) {
      var delimiterIndex = searchTerm.IndexOfAny(new[] {
        '=', ':'
      });
      if (delimiterIndex < 0) {
        var matches = _columnMap.Values.Any(propertySelector => propertySelector(x).Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        if (!matches) {
          return false;
        }
      } else {
        var columnName = searchTerm.Substring(0, delimiterIndex).Trim();
        if (!_columnMap.TryGetValue(columnName, out var propertySelector)) {
          continue;
        }

        var searchTermValue = searchTerm.Substring(delimiterIndex + 1).Trim();
        var columnValue = propertySelector(x);
        if (!columnValue.Contains(searchTermValue, StringComparison.OrdinalIgnoreCase)) {
          return false;
        }
      }
    }

    return true;
  };
  #endregion

  private readonly Func<WindingCode, bool> _assignedMediaDisabled = (windingCode) => windingCode.FolderPath == null;
  void RefreshWindingCodes() => Task.Run(async () => {
    var windingCodesList = await HubClientService.GetCodeList();
    if (windingCodesList != null) {
      _windingCodesList.Clear();
      _windingCodesList.AddRange(windingCodesList);
      StateHasChanged();
    }
  });
  void StartedEditingItem(WindingCode item) {
    Snackbar.Add($"Started editing, Data = {System.Text.Json.JsonSerializer.Serialize(item)}", Severity.Info);
  }
  void CanceledEditingItem(WindingCode item) {
    Snackbar.Add($"Canceled editing, Data = {System.Text.Json.JsonSerializer.Serialize(item)}", Severity.Info);
  }
  void CommittedItemChanges(WindingCode item) => Task.Run(async () => {
    var result = await HubClientService.UpdateWindingCode(item);
    if (!result) {
      Snackbar.Add($"Failed to commit changes, Data = {System.Text.Json.JsonSerializer.Serialize(item)}", Severity.Error);
      return;
    }
    Snackbar.Add($"Committed changes, Data = {System.Text.Json.JsonSerializer.Serialize(item)}", Severity.Success);
    var updatedItem = await HubClientService.GetWindingCode(item.Id);
    if (updatedItem != null) {
      var index = _windingCodesList.FindIndex(x => x.Id == updatedItem.Id);
      _windingCodesList[index] = updatedItem;
      StateHasChanged();
    }
  });
  private async Task<IEnumerable<string>> PdfSearchFunc(string arg) {
    await Task.CompletedTask;

    return
      string.IsNullOrWhiteSpace(arg)
        ? _pdfPathsCollection
        : _pdfPathsCollection.Where(x => x.Contains(arg, StringComparison.OrdinalIgnoreCase));
  }
  private async Task<IEnumerable<string>> FolderSearchFunc(string arg) {
    await Task.CompletedTask;

    return
      string.IsNullOrWhiteSpace(arg)
        ? _folderPathsCollection
        : _folderPathsCollection.Where(x => x.Contains(arg, StringComparison.OrdinalIgnoreCase));
  }
  private static Task<IEnumerable<string>> VideoSearchFunc(string arg) {
    return Task.FromResult(Enumerable.Empty<string>());
  }
}
