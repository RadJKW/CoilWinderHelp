@page "/StopEmulator"
@layout DocViewLayout
@inject HubClientService DirectoryHub
@implements IDisposable

<div class="stops-container">

  <div class="stops-left-column ">

    <MudStack Row="true"
        Spacing="0"
        Justify="Justify.FlexStart">
      @foreach (var breadcrumb in _breadcrumbs) {

          <MudChip Text="@breadcrumb"
            Icon="@Icons.Material.Outlined.Folder"
            Size="Size.Small"
            Label="true">
        </MudChip>
        <MudText Typo="Typo.h5" GutterBottom="false" Inline="false">/</MudText>
      }

    </MudStack>
    <MudPaper Class="left-column-paper mud-width-full">

      <MudListExtended T="Folder"
          Clickable="true"
          MultiSelection="false"
          DisablePadding="true"
          @bind-SelectedItem="SelectedItem"
          @bind-SelectedValue="SelectedValue"
          Style="max-height:400px; overflow-y: auto;">
        <MudListSubheaderExtended T="string"
            Sticky="true"
            SecondaryBackground="true">
          @RootFolder?.Name
        </MudListSubheaderExtended>
        @if (RootFolder?.SubFolders != null) {
          foreach (var folder in RootFolder.SubFolders) {
            <MudListItemExtended T="Folder"
                Icon="@Icons.Material.Filled.Folder"
                Text="@folder.Name"
                Value="@folder"
                OnClick="@(async () => await InvokeAsync(StateHasChanged))">
            </MudListItemExtended>
          }
        }
      </MudListExtended>
      @if (SelectedItem != null) {
        <MudListSubheaderExtended T="string"
            Sticky="true"
            SecondaryBackground="true">
          @SelectedItem.Text
        </MudListSubheaderExtended>
        @if (SelectedItem.Value?.SubFolders != null) {
          foreach (var folder in SelectedItem.Value.SubFolders) {
            <MudListItemExtended T="Folder"
                Icon="@Icons.Material.Filled.Folder"
                Text="@folder.Name"
                Value="@folder">
            </MudListItemExtended>
          }
        }
      }
    </MudPaper>

  </div>
  <div class="stops-right-column">
    <MudPaper Class="mud-background-gray right-column-paper">
      <MudStack Justify="Justify.Center"
          AlignItems="AlignItems.Center"
          Spacing="2">
        <MudText>Selected Item: @(SelectedItem != null ? SelectedItem.Text : "none")</MudText>
        <MudText>Selected Value @(SelectedValue?.Name)</MudText>
      </MudStack>

      <MudList>
            @if (_folders is not null) {
              foreach (var folder in _folders.OrderBy(f => f)) {
                <MudListItem Icon="@Icons.Material.Filled.Folder"
                    Text="@folder"/>
              }
            }

          </MudList>
        </MudPaper>

  </div>
</div>

@code{

  public class Folder {
    public string Name { get; init; }
    private string Path { get; init; }
    public List<Folder> SubFolders { get; set; }

    public Folder(string name, string? path = null) {
      Name = name;
      Path = path ?? name;
      SubFolders = new();
    }

    public void AddSubFolder(Folder folder) {
      SubFolders.Add(folder);
    }
  }
  private List<string> _breadcrumbs = new() {
    "B:",
    "Docs",
  };

  #region Properties

  private Folder? BaseFolder { get; set; }
  private Folder? CurrentFolder { get; set; }
  private List<Folder>? Breadcrumb { get; set; }
  private List<Folder>? SelectedFolderSubFolders { get; set; }
  private MudListItemExtended<Folder?>? SelectedItem { get; set; }
  private Folder? SelectedValue { get; set; }
  private Folder? RootFolder { get; set; }
  private string[]? _folders;

  #endregion

  protected override async Task OnInitializedAsync() {
    DirectoryHub.ReceiveAllFolders += OnReceiveAllFolders;
    await base.OnInitializedAsync();
  }

  private void OnReceiveAllFolders(string[] folders) {
    _folders = folders;
    StateHasChanged();
  }




  public void Dispose() {
    DirectoryHub.ReceiveAllFolders -= OnReceiveAllFolders;
  }
}
