@page "/StopEmulator"
@layout DocViewLayout

<MudScrollbar Selector=""
    Width="6"
    BorderRadius="6"
    Color="#594ae2ff"
    Hide="false"/>
<div class="stops-container">

  <div class="stops-left-column ">

    <FolderSelector OnFolderSubmitted="HandleFolderSubmitted" />

  </div>
  <div class="stops-right-column">
    <MudDropContainer T="DropItem" Items="_items" ItemsSelector="@((item,dropzone) => item.Identifier == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
        <ChildContent>
            <MudDropZone T="DropItem" Identifier="Drop Zone 1" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                <MudText Typo="Typo.h6" Class="mb-4">Drop Zone 1</MudText>
             </MudDropZone>
            <MudDropZone T="DropItem" Identifier="Drop Zone 2" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                <MudText Typo="Typo.h6" Class="mb-4">Drop Zone 2</MudText>
            </MudDropZone>
        </ChildContent>
        <ItemRenderer>
            <MudPaper Elevation="25" Class="pa-4 my-4">@context.Name</MudPaper>
        </ItemRenderer>
    </MudDropContainer>



  </div>
</div>

@code{

  #region Properties
  private List<DropItem> _items = new()
  {
    new DropItem(){ Name = "Drag me!", Identifier = "Drop Zone 1" },
    new DropItem(){ Name = "Or me!", Identifier = "Drop Zone 2" },
    new DropItem(){ Name = "Just Mud", Identifier = "Drop Zone 1" },
  };

  #endregion

  private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
  {
    dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
  }

  private async Task HandleFolderSubmitted(Folder[] folders)
  {
    // for each folder in the array, convert it to a DropItem with Name = Folder.Name and Drop zone 1
    // add the new DropItem to the _items list
    // call StateHasChanged()
    foreach (var folder in folders)
    {
      _items.Add(new DropItem() { Name = folder.Name, Identifier = "Drop Zone 1" });
    }
    await InvokeAsync(StateHasChanged);
  }


  public class DropItem
  {
    public string? Name { get; init; }
    public string? Identifier { get; set; }
  }






}
