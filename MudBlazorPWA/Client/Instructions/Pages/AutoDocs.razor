@page "/"
@layout DocViewLayout
@inject HubClientService DirectoryHub
@inherits ComponentBase
@implements IAsyncDisposable


@switch (_currentWindingStop is not null) {
  case true: {
    <div class="auto-docs container">
      <MudSplitter Class="auto-docs splitter"
          @bind-Dimension="@_startWidth"
          StyleBar="width: 2px !important;"
          OnDoubleClicked="HandleDoubleClicked"
          EnableSlide="true"
          EnableMargin="false"
          Sensitivity="0.1d">
        <StartContent>

          <div class="d-flex justify-center relative">
            <MudIconButton Size="Size.Medium"
                Variant="Variant.Text"
                Class="align-center justify-center splitter-size-toggle"
                Icon="@(_startWidth >= 50 ? Icons.Material.Outlined.ArrowCircleLeft : Icons.Material.Outlined.ArrowCircleRight)"
                OnClick="ToggleContentSize">
            </MudIconButton>
          </div>
          <PrimaryContent Src="@_currentWindingStop?.Media.Pdf"/>

        </StartContent>
        <EndContent>
          <SecondaryContent VideoUrl="@_currentWindingStop?.Media.Video"
              RefsFolder="@_currentWindingStop?.Media.ReferenceFolder"/>
        </EndContent>
      </MudSplitter>
    </div>
    break;
  }
  case false: {
    <div class="align-center d-flex justify-center mud-width-full"
        style="height: 50%">
      <div class="align-center d-flex flex-column justify-center">

        <MudProgressCircular Color="Color.Tertiary"
            StrokeWidth="5"
            Size="Size.Large"
            Indeterminate="true"/>

        <MudText Typo="Typo.h3">Loading...</MudText>
      </div>

    </div>
    break;
  }
}


@code{
  private WindingCode? _currentWindingStop;
  private double _startWidth = 65;

  private IJSObjectReference? _moduleJS;


  protected override async Task OnInitializedAsync() {
    _currentWindingStop = await DirectoryHub.GetCurrentCoilWinderStop();
    DirectoryHub.CurrentWindingStopUpdated += DirectoryHub_OnCurrentWindingStopUpdated;
    await base.OnInitializedAsync();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    await base.OnAfterRenderAsync(firstRender);
    if (firstRender) {
      // _moduleJS = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Instructions/Pages/AutoDocs.razor.js");
      _moduleJS = null;
    }
  }


  private void DirectoryHub_OnCurrentWindingStopUpdated(object? sender, WindingCode windingCode) {
    _currentWindingStop = windingCode;
    StateHasChanged();
    if (_moduleJS != null)
      InvokeAsync(async () => { await _moduleJS.InvokeVoidAsync("init"); });
  }

  private void HandleDoubleClicked() {
    _startWidth = _startWidth <= 50 ? 70 : 30;
  }
  private void ToggleContentSize() {
    _startWidth = _startWidth >= 50 ? 40 : 70;
  }
  public async ValueTask DisposeAsync() {
    if (_moduleJS != null)
      await _moduleJS.DisposeAsync();
  }
}
