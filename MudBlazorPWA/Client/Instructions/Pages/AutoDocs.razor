@page "/"
@layout DocViewLayout
@inject HubClientService DirectoryHub
@inherits ComponentBase
@implements IAsyncDisposable

@switch (_currentWindingStop is not null) {
  case true: {
    <div class="auto-docs container">
      <MudSplitter Class="auto-docs splitter"
          @bind-Dimension="@_startWidth"
          StyleBar="width: 6px !important;"
          OnDoubleClicked="HandleDoubleClicked"
          EnableSlide="true"
          EnableMargin="false"
          Sensitivity="0.1d">
        <StartContent>

          <div class="d-flex justify-center relative">
            <MudIconButton Size="Size.Medium"
                Variant="Variant.Text"
                Class="align-center justify-center splitter-size-toggle"
                Icon="@(_startWidth >= 50 ? Icons.Material.Outlined.ArrowCircleLeft : Icons.Material.Outlined.ArrowCircleRight)"
                OnClick="ToggleContentSize">
            </MudIconButton>
          </div>
          <PrimaryContent Src="@PdfUrl"/>

        </StartContent>
        <EndContent>
          @*//TODO: Figure Out why Secondary Content is not re-rendering on WindingStopUpdate*@

          <SecondaryContent VideoUrl="@VideoUrl"
              RefsFolder="@RefsFolder"/>
        </EndContent>
      </MudSplitter>
    </div>
    break;
  }
  case false: {
    <div class="align-center d-flex justify-center mud-width-full"
        style="height: 50%">
      <div class="align-center d-flex flex-column justify-center">

        <MudProgressCircular Color="Color.Tertiary"
            StrokeWidth="5"
            Size="Size.Large"
            Indeterminate="true"/>

        <MudText Typo="Typo.h3">Loading...</MudText>
      </div>

    </div>
    break;
  }
}


@code{
    private const string FileServer = "http://192.168.0.10:5126/files/";

  private WindingCode? _currentWindingStop;
  private double _startWidth = 65;
  private string? PdfUrl { get; set; }
  private string? VideoUrl { get; set; }
  private string? RefsFolder { get; set; }




  protected override async Task OnInitializedAsync() {
    _currentWindingStop = await DirectoryHub.GetCurrentCoilWinderStop();
    DirectoryHub.CurrentWindingStopUpdated += async (_, code) => await DirectoryHub_OnCurrentWindingStopUpdated(code);

    await base.OnInitializedAsync();
  }


  private async Task DirectoryHub_OnCurrentWindingStopUpdated(WindingCode windingCode) {
    PdfUrl = windingCode.Media.Pdf is not null ? FileServer + windingCode.Media.Pdf : null;
    VideoUrl = windingCode.Media.Video is not null ? FileServer + windingCode.Media.Video : null;
    RefsFolder = windingCode.Media.ReferenceFolder is not null ? FileServer + windingCode.Media.ReferenceFolder : null;
    _currentWindingStop = windingCode;
    await InvokeAsync(StateHasChanged);
  }

  private void HandleDoubleClicked() {
    _startWidth = _startWidth <= 50 ? 70 : 30;
  }
  private void ToggleContentSize() {
    _startWidth = _startWidth >= 50 ? 40 : 70;
  }
  public ValueTask DisposeAsync() {
    return ValueTask.CompletedTask;
  }
}
