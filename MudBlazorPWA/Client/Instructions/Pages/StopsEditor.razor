@page "/stops"
@layout DocViewLayout
@inject IHttpClientFactory HttpClient
@implements IDisposable
@using Newtonsoft.Json
@using System.Text.RegularExpressions

<MudScrollbar Selector=""
    Width="4"
    HoverWidth="6"
    BorderRadius="3"
    Color="rgba(10,133,255,0.5)"
    Hide="false"/>
<MudStack Class="stack-container stops-editor"
    Spacing="1"
    Justify="Justify.FlexStart"
    AlignItems="AlignItems.Center">
  <div class="py-4">
    <DirectoryMenu OnRootFolderChange="HandleRootFolderChange"/>
  </div>
  @switch (State) {
    case PageState.Loading:
      <div class="align-center d-flex justify-center mud-width-full"
          style="height: 50%">
        <div class="align-center d-flex flex-column justify-center">

          <MudProgressCircular Color="Color.Tertiary"
              StrokeWidth="5"
              Size="Size.Large"
              Indeterminate="true"/>

          <MudText Typo="Typo.h3">Loading...</MudText>
        </div>

      </div>
      break;
    case PageState.Loaded:

      <MudGrid Spacing="2"
          Justify="Justify.Center"
          Class="stops-editor-grid">
        @foreach (var group in WindingCodeGroups) {
          <MudItem xs="@(GetBreakpoint(WindingCodeGroups.Count()))"
              Class="stops-grid-item">
            <MudPaper Class="stops-editor-paper"
                Elevation="4">
              <MudListSubheaderExtended T="string"
                  Class="mud-elevation-4"
                  Sticky="true"
                  SecondaryBackground="true">
                <MudText Typo="Typo.h6"
                    Class="ml-6">
                  <strong>@group.Key.ToString() Codes</strong>
                </MudText>
              </MudListSubheaderExtended>

              <MudExpansionPanels MultiExpansion="true"
                  Class="flex-grow-0 overflow-auto stops-expansion-panel"
                  Elevation="2">
                @foreach (var windingCode in group) {
                  <MudExpansionPanel Class="stops-expansion-item"
                      IsInitiallyExpanded="false">
                    <TitleContent>
                      <div class="d-flex gap-10">
                        <MudIcon Icon="@Icons.Material.Filled.MoreVert"
                            Color="Color.Primary"/>
                        <MudText Align="Align.Center"
                            Style="width: 20%;backdrop-filter: contrast(75%) opacity(33%); ">
                          <strong> @windingCode.Code</strong>
                        </MudText>
                        <div class="d-flex justify-start mud-width-full mx-auto">

                          <MudText Typo="Typo.button"
                              Color="Color.Tertiary"
                              Align="Align.Center">
                            @windingCode.Name
                          </MudText>
                        </div>
                      </div>
                    </TitleContent>
                    <ChildContent>
                      <MudSelectExtended T="string"
                          Label="Assigned Folder"
                          @bind-Value="_selectedValue"
                          Placeholder="@windingCode.FolderPath"
                          PopoverClass="folder-select-popover">
                        @foreach (var folderItemGroup in _folderItemGroups) {
                          if (folderItemGroup.Item2 != null) {
                            <MudSelectItemGroupExtended T="string"
                                Text="@folderItemGroup.Item1"
                                Nested="true"
                                Class="folder-item-group">
                              @foreach (var folderItem in folderItemGroup.Item2) {
                                <MudSelectItemExtended T="string"
                                    Class="folder-item"
                                    Value="@folderItem"
                                    Text="@folderItem"/>
                              }
                            </MudSelectItemGroupExtended>
                          } else {
                            <MudSelectItemExtended T="string"
                                Value="@folderItemGroup.Item1"
                                Text="@folderItemGroup.Item1"/>
                          }
                        }
                      </MudSelectExtended>
                    </ChildContent>
                  </MudExpansionPanel>
                }

              </MudExpansionPanels>
              <MudSpacer/>
            </MudPaper>
          </MudItem>
        }
      </MudGrid>
      break;
    case PageState.Error:
    default:
      <MudAlert Severity="Severity.Error"
          Class="mud-height-full mud-width-full"
          Text="Error loading data"/>
      break;
  }
</MudStack>

@code{

  public enum PageState {
    Loading,
    Loaded,
    Error
  }

  #region Properties
  private HttpClient _pwaServer = null!;
  private IEnumerable<IGrouping<CodeTypeId, WindingCode>> WindingCodeGroups { get; set; } = new List<IGrouping<CodeTypeId, WindingCode>>();
  private PageState State { get; set; } = PageState.Loading;
  private List<string> _folderPaths = new List<string>();
  private readonly List<(string, List<string>?)> _folderItemGroups = new();
  private string _selectedValue = string.Empty;
  #endregion

  protected override async Task OnInitializedAsync() {
    _pwaServer = HttpClient.CreateClient("PwaServer");
    var response = await _pwaServer.GetAsync("files/WindingCodes.json");
    if (response.IsSuccessStatusCode) {
  //await Task.Delay(1000).ContinueWith(_ => ParseWindingCodes(response));
      await ParseWindingCodes(response);
    }
  }


  private async Task ParseWindingCodes(HttpResponseMessage response) {
    var content = await response.Content.ReadAsStringAsync();
    var windingCodes = JsonConvert.DeserializeObject<List<WindingCode>>(content);
    if (windingCodes == null) {
      State = PageState.Error;
      return;
    }
    WindingCodeGroups = windingCodes.GroupBy(wc => wc.CodeTypeId);
    State = PageState.Loaded;
    StateHasChanged();
  }

  private static int GetBreakpoint(int count) {
    return count switch {
      1 => 12,
      2 => 6,
      _ => 6
      };
  }

  private async Task HandleRootFolderChange(DirectoryMenu.FolderCallbackArgs folderArgs) {
    _folderPaths.Clear();
    if (folderArgs.SubFolders == null)
      return;

    _folderPaths = folderArgs.SubFolders.OrderBy(f => f).ToList();
    await PopulateFolderItemGroups();
  }

  private Task PopulateFolderItemGroups() {
    _folderItemGroups.Clear();
    var splitChar = _folderPaths.First().Contains('/') ? '/' : '\\';
    var folderGroups = _folderPaths.Where(f => f.Count(c => c is '/' or '\\') == 1)
      .Select(f => f.Split(splitChar).Last())
      .Distinct()
      .OrderBy(f => f)
      .ToList();

    foreach (var folderGroup in folderGroups) {
      var matchFolderRegex = new Regex($@"\{splitChar}{folderGroup}\{splitChar}");
      var folderItems = new List<string>() {
        folderGroup
      };
      folderItems.AddRange(_folderPaths.Where(f => matchFolderRegex.IsMatch(f) || f == folderGroup).OrderBy(f => f).ToList());
      _folderItemGroups.Add(folderItems.Count > 0 ? (folderGroup, folderItems) : (folderGroup, null));
      _folderPaths.RemoveAll(f => matchFolderRegex.IsMatch(f) || f == $"..{splitChar}{folderGroup}");
    }

    if (_folderPaths.Any()) {
      foreach (var folderPath in _folderPaths) {
      _folderItemGroups.Add((folderPath, null));
    }
    }

    _folderItemGroups.Sort((x, y) => {
      return x.Item2 switch {
        null when y.Item2 == null => string.Compare(x.Item1, y.Item1, StringComparison.OrdinalIgnoreCase),
        null => -1,
        _ => y.Item2 == null ? 1 : string.Compare(x.Item1, y.Item1, StringComparison.OrdinalIgnoreCase)
        };
    });
    StateHasChanged();
    return Task.CompletedTask;
  }

  public void Dispose() {
    _pwaServer.Dispose();
  }
}
