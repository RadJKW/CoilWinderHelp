@using Microsoft.AspNetCore.SignalR.Client
@using MudBlazorPWA.Shared.Extensions
@using MudBlazorPWA.Shared.Models
@inject NavigationManager Navigation
@implements IDisposable
<div
    class="directory-tree">

  <MudPaper
      Class="tree-paper">
    @*TODO: MudTreeView causes UI to stutter when Expanded Folder has MANY children.*@
    <MudTreeView
        id="directory-tree-list"
        @bind-SelectedValue="SelectedValue"
        ServerData="LoadServerData"
        Items="TreeItems"
        ExpandOnClick="true"
        Color="Color.Primary"
        Hover="true"
        Dense="true">
      <ItemTemplate>
        <MudTreeViewItem
            Class="@(context.CanExpand ? "folder" : "file")"
            Value="@context"
            Icon="@context.Icon"
            LoadingIconColor="Color.Info"
            CanExpand="@context.CanExpand"
            Text="@context.Title"
            EndText="@context.Number?.ToString()"
            EndTextTypo="@Typo.caption"
            OnClick="@(() => NotifyFileSelected(context))">
        </MudTreeViewItem>
      </ItemTemplate>
    </MudTreeView>
  </MudPaper>
</div>

@code{
  private string? _rootDirectory;
  protected virtual HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();
  private TreeItemData? SelectedValue { get; set; }

  private HubConnection? _directoryHub;

  protected override async Task OnInitializedAsync() {
    await InitializeDirectoryHub();
  }

  private async Task InitializeDirectoryHub() {
    _directoryHub = new HubConnectionBuilder()
      .WithUrl(Navigation.ToAbsoluteUri("/directoryHub"))
      .Build();

    _directoryHub.On<string, string[]?, string[]?>("ReceiveFolderContent", (path, files, folders) => {
     _rootDirectory ??= path;
      ConvertToTreeItems(
        files: files,
        folders: folders,
        SelectedValue
      );
      StateHasChanged();
    });

    await _directoryHub.StartAsync();
    await _directoryHub.SendAsync("GetFolderContent", null);
  }

  private Task ConvertToTreeItems(string[]? files, string[]? folders, TreeItemData? selectedNode = null) {
    if (folders != null) {

      foreach (var folder in folders) {
        var folderTitle = GetLastIndexOf(folder);
        var newNode = new TreeItemData(
          title: folderTitle,
          path: folder,
          icon: Icons.Material.Outlined.Folder,
          number: null,
          canExpand: true);
        if (selectedNode == null) {
          TreeItems.Add(newNode);
        } else {
          var nodeTitle = newNode.Title.Replace(selectedNode.Title + "\\", "");
          newNode.Title = nodeTitle;
          selectedNode.TreeItems.Add(newNode);
        }
      }
    }
  //ReSharper disable once InvertIf
    if (files != null) {
      foreach (var file in files) {
        var fileTitle = GetLastIndexOf(file);
        var newNode = new TreeItemData(
          title: fileTitle,
          path: file,
          icon: fileTitle.EndsWith(".pdf") ? Icons.Material.Outlined.PictureAsPdf : Icons.Material.Outlined.PlayCircleOutline,
          number: null,
          canExpand: false);
        if (selectedNode == null) {
          TreeItems.Add(newNode);
        } else {
          var nodeTitle = newNode.Title.Replace(selectedNode.Title + "\\", "");
          newNode.Title = nodeTitle;
          selectedNode.TreeItems.Add(newNode);
        }
      }
    }
    return Task.CompletedTask;
  }

  private string GetLastIndexOf(string path) {
    return path.Contains("\\") ?
      path
        [(path.LastIndexOf("\\", StringComparison.Ordinal) + 1)..]
      : path
        [(path.LastIndexOf("/", StringComparison.Ordinal) + 1)..];
  }

  private async Task NotifyFileSelected(TreeItemData node) {
    switch (node.CanExpand) {
      case false when _directoryHub != null:
        await _directoryHub.SendAsync("FileSelected", node.Path);
        break;
      case true:
        SelectedValue = node;
        break;
    }
  }

  private bool IsFolder(TreeItemData node) {
    return node.Type != TreeItemData.ItemType.File;
  }

  protected virtual async Task<HashSet<TreeItemData>> LoadServerData(TreeItemData parentNode) {
    var currentPath = parentNode.Path;
    await _directoryHub!
      .SendAsync("GetFolderContent", currentPath);
    SelectedValue = parentNode;
  // find the parent node in _mudTreeView and set Activated to true
    return parentNode.TreeItems;
  }

  public void Dispose() {
    _directoryHub?.DisposeAsync();
  }


}
