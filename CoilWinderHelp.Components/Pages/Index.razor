@page "/"
@layout DocViewLayout
@implements IDisposable
@inject IHttpClientFactory ClientFactory

<PageTitle>Index</PageTitle>

<div class="index-grid">

  <div class="video-content">
  @if (VideoUrl is not null) {
    
    <VideoPlayer
        @ref="_videoPlayer"
        VideoPlayerId="video"
        VideoUrl="@VideoUrl">
    </VideoPlayer>
  }
  </div>

  <div class="video-footer">

  </div>
</div>

@code{

      private const string RelativePath = "files";

      private const string RelativeVideoUrl = "TrainingVideos/Unsorted/WINDING%20SPEC%20DOWNLOAD%20Z80.mp4";
  
  
  
  [CascadingParameter]
  public MainLayout? MainLayout { get; set; }
  
  private HttpClient? FileServer { get; set; }
  
  private VideoPlayer? _videoPlayer;
  
  private string? VideoUrl { get; set; }

  protected override async Task OnInitializedAsync() {
    await base.OnInitializedAsync();
    FileServer = ClientFactory.CreateClient("FileServer");
    VideoUrl = $"{RelativePath}/{RelativeVideoUrl}";
  }
  
  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender && _videoPlayer != null) {
      await _videoPlayer.ReloadVideo();
      MainLayout!.DrawerDisabled = false;
    }
    await base.OnAfterRenderAsync(firstRender);
  }
  public void Dispose() {
    if (MainLayout != null)
      MainLayout.DrawerDisabled = false;
  }
}